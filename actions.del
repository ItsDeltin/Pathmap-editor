import 'main.del';

playervar String[] actionLabels!;

rule: 'Store action labels'
if (HasSpawned(host))
{
    host.actionLabels = [
        'wait',
        'jump',
        'start holding jump',
        'stop holding jump',
        'ability 1',
        'ability 2',
        'melee',
        'primary fire',
        'secondary fire',
        'stop walking',
        'walk to destination',
        'look at floor',
        'look at destination'
    ];
}

String LabelFromAction(in RuleAction ruleAction)
{
    return <'<0> <1>', host.actionLabels[ruleAction.Data[0]], ruleAction.Data[1]>;
}

void ExecuteAction(RuleAction ruleAction)
{
    define actionID: ruleAction.Data[0];

    # Wait
    if (actionID == 0)
        Wait(ruleAction.Data[1]);
    # Jump
    if (actionID == 1)
        PressButton(eventPlayer, Button.Jump);
    # Start holding jump
    else if (actionID == 2)
    {
        StartHoldingButton(eventPlayer, Button.Jump);
        pfstateIsJumping = true;
    }
    # Stop holding jump
    else if (actionID == 3)
    {
        StopHoldingButton(eventPlayer, Button.Jump);
        pfstateIsJumping = false;
    }
    # Ability 1
    else if (actionID == 4)
        PressButton(eventPlayer, Button.Ability1);
    # Ability 2
    else if (actionID == 5)
        PressButton(eventPlayer, Button.Ability2);
    # Melee
    else if (actionID == 6)
        PressButton(eventPlayer, Button.Melee);
    # Primary fire
    else if (actionID == 7)
        PressButton(eventPlayer, Button.PrimaryFire);
    # Secondary fire
    else if (actionID == 8)
        PressButton(eventPlayer, Button.SecondaryFire);
    # Stop walking
    else if (actionID == 9)
    {
        StopThrottleInDirection(eventPlayer);
        pfstateIsStopped = true;
    }
    # Walk to destination
    else if (actionID == 10)
    {
        WalkToDestination();
        pfstateIsStopped = false;
    }
    # Look at floor
    else if (actionID == 11)
        StartFacing(
            eventPlayer,
            DirectionFromAngles(HorizontalFacingAngleOf(eventPlayer), 89),
            1000,
            Relative.ToWorld,
            FacingRev.None
        );
    # Look at destination
    else if (actionID == 12)
        StartFacing(
            eventPlayer,
            EyePosition().DirectionTowards(walkingTo + Up() * 1.75),
            1000,
            Relative.ToWorld,
            FacingRev.DirectionAndTurnRate
        );
}