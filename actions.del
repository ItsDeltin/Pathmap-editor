import 'main.del';

RuleAction CreateAction(in Number item)
{
    // Jump
    if (item == 1)
        return {Label: ' jump ', Executor: () => PressButton(eventPlayer, Button.Jump), Export: Vector(1)};
    
    // Start holding jump
    else if (item == 2)
        return {Label: ' start holding jump ', Executor: () => {
            StartHoldingButton(eventPlayer, Button.Jump);
            pfstateIsJumping = true;
        }, Export: Vector(2)};
    
    // Stop holding jump
    else if (item == 3)
        return {Label: ' stop holding jump', Executor: () => {
            StopHoldingButton(eventPlayer, Button.Jump);
            pfstateIsJumping = false;
        }, Export: Vector(3)};
    
    // Ability 1
    else if (item == 4)
        return {Label: ' ability 1', Executor: () => PressButton(eventPlayer, Button.Ability1), Export: Vector(4)};
    
    // Ability 2
    else if (item == 5)
        return {Label: ' ability 2', Executor: () => PressButton(eventPlayer, Button.Ability2), Export: Vector(5)};
    
    // Melee
    else if (item == 6)
        return {Label: ' melee', Executor: () => PressButton(eventPlayer, Button.Melee), Export: Vector(6)};
    
    // Primary fire
    else if (item == 7)
        return {Label: ' primary fire', Executor: () => PressButton(eventPlayer, Button.PrimaryFire), Export: Vector(7)};

    // Secondary fire
    else if (item == 8)
        return {Label: ' secondary fire', Executor: () => PressButton(eventPlayer, Button.SecondaryFire), Export: Vector(8)};
    
    // Stop walking
    else if (item == 9)
        return {Label: ' stop walking', Executor: () => {
            StopThrottleInDirection(eventPlayer);
            pfstateIsStopped = true;
        }, Export: Vector(9)};
    
    // Walk to destination
    else if (item == 10)
        return {Label: ' walk to destination', Executor: () => {
            WalkToDestination();
            pfstateIsStopped = false;
        }, Export: Vector(10)};

    // Look at floor
    else if (item == 11)
        return {Label: ' look at floor', Executor: () => StartFacing(
            eventPlayer,
            DirectionFromAngles(HorizontalFacingAngleOf(eventPlayer), 89),
            1000,
            Relative.ToWorld,
            FacingRev.None
        ), Export: Vector(11)};
    
    // Look at destination
    else if (item == 12)
        return {Label: ' look at destination', Executor: () => StartFacing(
            eventPlayer,
            EyePosition().DirectionTowards(walkingTo + Up() * 1.75),
            1000,
            Relative.ToWorld,
            FacingRev.DirectionAndTurnRate
        ), Export: Vector(12)};
}