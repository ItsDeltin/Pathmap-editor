import 'utility.del';

struct CursorButton
{
    // The actual text shown by the button.
    public String Label;

    public (() => void) PrimaryAction;

    public (() => void) SecondaryAction;

    // The size of the button text. Uses the same scale system as any other In-World Text. Maximum is 4.
    public Number Scale;

    // The x coordinate of the button on the menu in screen units.
    // By default, the center of the menu is at X = 0, and the bounds are ±2.5.
    // Positive direction is towards the right of the screen.
    public Number PositionX;

    // The y coordinate of the button on the menu in screen units.
    // By default, the center of the menu is at Y = 0, and the bounds are ±1.25.
    // Positive direction is towards the top of the screen.
    public Number PositionY;

    // The width of the clickable area of the button in screen units.
    public Number ClickWidth;

    // The height of the clickable area of the button in screen units.
    public Number ClickHeight;

    // The color of the button when the cursor is not hovering over it, or when it is non-clickable. Can be a Custom Color.
    public Color DefaultColor;

    // The color of the button when the cursor is hovering over it, indicating it can be clicked. Can be a Custom Color.
    public Color HoverColor;

    // If set to true, the script will force the button to use the alternate, thinner font for In-World Texts.
    // Note that if you have certain characters in the label text, the button may render as the alternate font even with this value set to false.
    public Boolean UseDefaultFont;

    // If set to false, the button will not be clickable and the hover color will not be used. Useful for making menu labels.
    public Boolean Interactable;

    // If set to false, the button will not be rendered. Useful for hiding buttons to save text budget without destroying the button entirely.
    public Boolean ButtonIsVisible;

    public Any a13 = null;
    public Any a14 = null;
    public Any a15 = null;
}

globalvar Number cm_textBudget! = 128;
globalvar Number cm_menuWidth! = WorkshopSettingReal("Josbird's Cursor Menu", "Menu Width", 5, 0, 10, 1); // [1]
globalvar Number cm_menuHeight! = WorkshopSettingReal("Josbird's Cursor Menu", "Menu Height", 2.5, 0, 5, 2); // [2]
globalvar Number cm_buttonClickSounds! = WorkshopSettingToggle("Josbird's Cursor Menu", "Button click sounds", true, 3); // [6]
globalvar Number cm_debugMode! = WorkshopSettingToggle("Josbird's Cursor Menu", "Debug mode (show button click areas)", false, 4); // [5]
globalvar Number cm_menuDisablesGameHud! = WorkshopSettingToggle("Josbird's Cursor Menu", "Menu disables game hud", true, 7); // [7]
globalvar CursorButton[] cm_buttons;

String ext3: '━'; // [3]
String ext4: '┃\n'; // [4]

playervar Boolean isInMenu;
playervar Number pExt2;
playervar Any[] cm_menuFrame = [];
playervar Vector cm_menuOriginalFacing;

void createMenuButton(in CursorButton button)
{
    Number newButtonId = cm_buttons.Length;
    pExt2 = 0;
    while (pExt2 < cm_buttons.Length)
    {
        if (cm_buttons[pExt2].Label == null)
        {
            newButtonId = pExt2;
            pExt2 = cm_buttons.Length;
        }
        pExt2++;
    }
    cm_buttons[newButtonId] = button;
}

void destroyMenuButton(in Number buttonID)
{
    if (buttonID >= cm_buttons.Length || cm_buttons[buttonID].Label == null)
        LogToInspector(<"[CursorMenu.destroyMenuButton] Error: tried to destroy an invalid button ID (<0>)", buttonID>);
    else
        cm_buttons[buttonID].a15 = true;
}

rule: 'Toggle menu'
Event.OngoingPlayer
if (!IsDummyBot())
if (button(Button.Interact))
if (!IsCommunicatingAnyEmote())
{
    isInMenu = !isInMenu;
}

void createCursor()
{
    const Number => void segment = step => {
        cm_menuFrame += CreateInWorldText(
            VisibleTo: Invalidate(eventPlayer, step),
            Header: "▲",
            Position: UpdateEveryFrame(
                eyePos + 100 * (AngleDifference(facing.HorizontalAngle, cm_menuOriginalFacing.HorizontalAngle) *
                    facing.CrossProduct(DirectionFromAngles(
                        facing.HorizontalAngle,
                        facing.VerticalAngle - 90
                    )) + (AngleDifference(facing.VerticalAngle, cm_menuOriginalFacing.VerticalAngle) - 0.2) *
                    DirectionFromAngles(facing.HorizontalAngle, facing.VerticalAngle - 90) + 3 * facing)),
            Scale: 3,
            Clipping: Clipping.DoNotClip,
        );
        cm_textBudget -= 1;
    };

    segment(TotalTimeElapsed() % 0.032 < 0.016);
    segment(TotalTimeElapsed() % 0.032 >= 0.016);
}

/*

EyePosition(EventPlayer()) +
    100 * (
        cm_menuWidth * -1 /
        2 * CrossProduct(FacingDirectionOf(EventPlayer()), DirectionFromAngles(HorizontalAngleFromDirection(FacingDirectionOf(EventPlayer())), VerticalAngleFromDirection(FacingDirectionOf(EventPlayer())) - 90))
            + (cm_extendedGlobalCollection[2] / 2 - 0.2) * DirectionFromAngles(HorizontalAngleFromDirection(FacingDirectionOf(EventPlayer())), VerticalAngleFromDirection(FacingDirectionOf(EventPlayer())) - 90) + 3 * FacingDirectionOf(EventPlayer()))

*/