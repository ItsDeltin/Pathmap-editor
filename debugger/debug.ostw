
import '../pathfinder/core.ostw';
import 'settings.lobby';

playervar DbgEvent[] dbgEvents = [];
struct DbgEvent { public String name; public Number timeStamp; }

Vector ray: RayCastHitPosition(EyePosition(HostPlayer()), EyePosition(HostPlayer()) + FacingDirectionOf(HostPlayer()) * 100, null, HostPlayer(), false);

rule: 'Debug▶ Disable Inspector'
{
    DisableInspectorRecording();
}

rule: 'Debug▶ Host Control: [Interact] to create a dummy bot'
if (IsButtonHeld(HostPlayer(), Button.Interact))
{
    CreateDummyBot(Hero.Ashe, Team.Team1, -1, ray);
    StartForcingDummyBotName(LastCreatedEntity(), <'vivi #<0>', NumberOfPlayers(Team.Team1)>);
}

rule: 'Debug▶ Host Control: [Crouch] to teleport dummies to self'
if (IsButtonHeld(HostPlayer(), Button.Crouch))
{
    Teleport(AllPlayers().FilteredArray(p => p.IsDummy()), HostPlayer());
}

rule: 'Debug▶ Dummy: Set pathfinding attributes'
Event.OngoingPlayer
{
    // pfPlayerAttributes = [1];
    // DisableMovementCollisionWithPlayers(EventPlayer());
}

rule: 'Debug▶ Dummy: Follow the host on [Melee]'
Event.OngoingPlayer
if (IsDummyBot())
if (IsButtonHeld(HostPlayer(), Button.Melee))
{
    pfDestination = PositionOf(HostPlayer());
}

rule: 'Debug▶ Host hud & control setup'
if (HasSpawned(HostPlayer()))
{
    SetPrimaryFireEnabled(HostPlayer(), false);
    SetMeleeEnabled(HostPlayer(), false);
    SetAbility1Enabled(HostPlayer(), false);
    SetAbility2Enabled(HostPlayer(), false);
    CreateHudText(AllPlayers(), Text: <'CAP: <0>, <1>, <2>\nPos: <5>\nTime: <3>\nOwner: <4>', ServerLoad(), ServerLoadAverage(), ServerLoadPeak(), TotalTimeElapsed(), pfExecOwner, PositionOf(HostPlayer())>, Location: Location.Top);
}

globalvar Boolean inspectorEnabled;
playervar Player selectedPlayer;
playervar Boolean isSlow;
playervar Player[] lastSelected = [];
globalvar Boolean pathfinderEnabled;

rule: 'Debug▶ Create debugging entities'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
{
    # Name and common variables
    CreateHudText(
        selectedPlayer != null ? EventPlayer() : null,
        Header: selectedPlayer,
        Text: <'Is Pathfinding: <0>\nCurrent node index: <1>\npfActiveNode: <2>', selectedPlayer.pfIsPathfinding, selectedPlayer.pfCurrentNodeIndex, selectedPlayer.pfActiveNode>,
        SortOrder: 1,
        Reevaluation: HudTextRev.VisibleToAndString,
        Location: Location.Top);
    # Events
    for (Number i = 0; 10; 1) {
        CreateHudText(
            selectedPlayer != null && selectedPlayer.dbgEvents.Length > EvaluateOnce(i) ? EventPlayer() : null,
            Text: selectedPlayer.dbgEvents[EvaluateOnce(i)].name,
            Subheader: selectedPlayer.dbgEvents[EvaluateOnce(i)].timeStamp,
            SubheaderColor: Color.Yellow,
            Reevaluation: HudTextRev.VisibleToAndString,
            Location: Location.Left,
            SortOrder: 10 - i);
    }
    # Path visual
    for (Number i = 0; 20; 1) {
        CreateIcon(
            selectedPlayer != null && selectedPlayer.pfPath.Length > EvaluateOnce(i) ? EventPlayer() : null,
            selectedPlayer.pfPath[EvaluateOnce(i)] == -1 ? selectedPlayer.pfDestination : pfLoadedMap.nodes[selectedPlayer.pfPath[EvaluateOnce(i)]],
            Icon.ArrowDown,
            IconRev.VisibleToPositionAndColor,
            selectedPlayer.pfPath[EvaluateOnce(i)] == -1 ? Color.Red : EvaluateOnce(i) == 0 ? Color.Orange : Color.Yellow,
            false);
        CreateHudText(
            selectedPlayer != null && selectedPlayer.pfPath.Length > EvaluateOnce(i) ? EventPlayer() : null,
            Text: selectedPlayer.pfPath[EvaluateOnce(i)],
            SortOrder: i + 1,
            Reevaluation: HudTextRev.VisibleToAndString,
            Location: Location.Right
        );
    }
    # Attributes
    CreateHudText(
            selectedPlayer != null ? EventPlayer() : null,
            Header: 'Attributes',
            HeaderColor: Color.SkyBlue,
            SortOrder: 100,
            Location: Location.Right,
            Reevaluation: HudTextRev.VisibleToAndString);
    for (Number i = 0; 5; 1) {
        CreateHudText(
            selectedPlayer != null && selectedPlayer.pfAttributes.Length > EvaluateOnce(i) ? EventPlayer() : null,
            Text: selectedPlayer.pfAttributes[EvaluateOnce(i)],
            SortOrder: 101 + i,
            Location: Location.Right,
            Reevaluation: HudTextRev.VisibleToAndString);
    }
    # pfWalkingToPosition
    CreateIcon(selectedPlayer != null ? EventPlayer() : null, selectedPlayer.pfWalkingToPosition, Icon.Halo, IconRev.VisibleToAndPosition, Color.Green, true);
}

rule: 'Debug▶ Host Control: [Primary Fire] to inspect bot'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsButtonHeld(EventPlayer(), Button.PrimaryFire))
{
    if (selectedPlayer) {
        StopForcingPlayerOutlines(selectedPlayer, EventPlayer());
        lastSelected += selectedPlayer;
        selectedPlayer = null;
    }

    # Get selected entity
    selectedPlayer = AllPlayers().FilteredArray(p => p.IsDummy() &&
        p.Position().DistanceTo(EyePosition() + FacingDirectionOf() * EyePosition().DistanceTo(p.Position()))
            < 2
    ).SortedArray(p => lastSelected.IndexOf(p)).First;

    if (selectedPlayer) {
        StartForcingPlayerOutlines(selectedPlayer, EventPlayer(), true, Color.Green, OutlineType.Always);
        lastSelected.ModRemoveByValue(selectedPlayer);
    }
}

rule: 'Debug▶ Host Control: [Ultimate] to clear pf logs'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
{
    SmallMessage(AllPlayers(), 'PF logs cleared');
    AllPlayers().dbgEvents = [];
}

rule: 'Debug▶ Host Control: [Ability 1] to slow down'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsButtonHeld(EventPlayer(), Button.Ability1))
{
    if (!isSlow) {
        SetSlowMotion(0);
        isSlow = true;
    } else {
        SetSlowMotion(100);
        isSlow = false;
    }
}

rule: 'Debug▶ Host Control: [Secondary Fire] to toggle inspector'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
{
    inspectorEnabled = !inspectorEnabled;
    if (inspectorEnabled)
    {
        SmallMessage(AllPlayers(), 'inspector enabled');
        EnableInspectorRecording();
    }
    else
    {
        DisableInspectorRecording();
        SmallMessage(AllPlayers(), 'inspector disabled');
    }
    // Vector r = ray;
    // Number n = pfLoadedMap.nodes.Map((n, i) => i).SortedArray(n => pfLoadedMap.nodes[n].DistanceTo(r)).First;

    // Any text = CreateInWorldText(EventPlayer(), <'Node: <0>', n>, pfLoadedMap.nodes[n], 1, Clipping.DoNotClip, InworldTextRev.VisibleTo, Color.Yellow, Spectators.VisibleNever);

    // WaitUntil(!IsButtonHeld(EventPlayer(), Button.SecondaryFire), 9999);
    // WaitUntil(IsButtonHeld(EventPlayer(), Button.SecondaryFire), 9999);

    // DestroyInWorldText(text);
}

rule: 'Debug▶ Host Control: [Ability 2] to toggle pathfinding'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsButtonHeld(EventPlayer(), Button.Ability2))
{
    pathfinderEnabled = !pathfinderEnabled;
    if (pathfinderEnabled) {
        ChaseVariableAtRate(AllPlayers().pfDestination, PositionOf(HostPlayer()), 100, RateChaseReevaluation.DestinationAndRate);
    } else {
        StopChasingVariable(AllPlayers().pfDestination);
        AllPlayers().pfDestination = null;
    }
}