import 'main.del';

Number closestNodeToPosition(Vector position): Nodes.Map((node, i) => i).SortedArray(i => Nodes[i].Node.Position.DistanceTo(position)).First;

globalvar Boolean pathfinderActive! = false;
globalvar Number dijkstraProgressReport = 0;

DijkstraResult Dijkstra(
    Number source,
    Number[] targets,
    Number[] attributes
) 'Subroutine: Dijkstra'
{
    if (pathfinderActive)
    {
        LogToInspector('Error: Attempted to pathfind while already active');
        return { Parents: null };
    }
    pathfinderActive = true;
    dijkstraProgressReport = 0;

    // WorldNode to actual node
    Number[] unvisited = Nodes.Map((node, i) => i);
    Number[] distances = unvisited.Map(node => 9999);
    Number[] parents = unvisited.Map(node => -1);

    distances[source] = 0;

    while (unvisited.Length && (targets == null || targets.IsTrueForAny(target => unvisited.Contains(target))))
    {
        Number current = unvisited.SortedArray(i => distances[i]).First;
        Number currentID = Nodes[current].Node.UniqueID;
        unvisited -= current;

        define neighbors = Segments
            // Get the list of segments that contain the current node.
            .FilteredArray(segment => segment.Node1 == currentID || segment.Node2 == currentID)
            // Select the opposite node in the segment to get the list of neighbors.
            .Map(segment => NodeIndexFromID(segment.Node1 == currentID ? segment.Node2 : segment.Node1))
            // Only use the unvisited neighbors
            .FilteredArray(node => unvisited.Contains(node));
        
        for (Number i = 0; neighbors.Length; 1)
        {
            Number neighborIndex = neighbors[i];
            Number neighborID = Nodes[neighborIndex].Node.UniqueID;
            Number[] neighborAttributes = Attributes.FilteredArray(
                attribute => attribute.Node1 == neighborID && attribute.Node2 == currentID
            ).Map(a => a.Value);

            Number newDistance = distances[current] + Nodes[current].Node.Position.DistanceTo(Nodes[neighborIndex].Node.Position);
            if (newDistance < distances[neighborIndex] &&
                (neighborAttributes.Length == 0 || neighborAttributes.IsTrueForAny(attribute => attributes.Contains(attribute)))
            )
            {
                distances[neighborIndex] = newDistance;
                parents[neighborIndex] = current;
            }
        }

        dijkstraProgressReport++;
        MinWait();
    }

    pathfinderActive = false;
    return { Parents: parents };
}

struct DijkstraResult
{
    public Number[] Parents;
}

void MakeBake() playervar 'Subroutine: Make Bake'
{
    bakeResult = [];
    Number n = 0;

    define progressBar = CreateProgressBarHudText(
        AllPlayers(),
        (n / EvaluateOnce(Nodes.Length) + dijkstraProgressReport / EvaluateOnce(Nodes.Length) ^ 2) * 100,
        "Baking...",
        Location.Right,
        15,
        ProgressBarColor: Color.Orange,
        TextColor: Color.White
    );

    # For each node
    for (n = 0; Nodes.Length; 1) {
        # Node 'n's compressed data is stored in here.
        String[] compressed = [];
        # Will be appended to the end of compressed when it is large enough.
        String stub = '';
        # Pathfind current node.
        Number[] parents = Dijkstra(n, null, pathfinderAttributes).Parents;
        # Loop through each node relation.
        Number p;
        for (p = 0; parents.Length; 1) {
            # Compress value.
            stub = stub + bakeMatcher[parents[p]];
            # Append stub to compressed every 256 characters.
            if (p && !(p % 256)) {
                compressed += stub;
                stub = '';
            }
            MinWait();
        }

        # If this condition is true, then stub still has contents that should be added to the
        # compressed data before we continue.
        if (p && p % 256) {
            compressed += stub;
            stub = '';
        }

        # Add compressed data.
        bakeResult[n] = compressed;
        # For good measure.
        compressed = null;

        Wait(0.2);
    }

    DestroyProgressBarHudText(progressBar);
}

rule: 'Initialize Bake Matcher'
Event.OngoingPlayer
if (eventPlayer == host)
{
    bakeMatcher = BakemapStruct.GenerateMatchArray(500);
}

playervar String[][] bakeResult;
playervar String[] bakeMatcher;