import 'main.del';

playervar Boolean dummyHighlighted;
playervar Boolean dummySelected;
playervar Number dummySavedOutlineState = -1;
playervar Number[] travelPath;
playervar Number currentPathNode;
playervar Boolean isPathfinding;
playervar Vector pathfindDestination;

Number dummyOutlineState: dummyHighlighted + dummySelected * 2;
Player[] selectedDummies: AllPlayers().FilteredArray(p => p.IsDummy() && p.dummySelected);
Vector currentPathfindingNodePosition: Nodes[travelPath[currentPathNode]].Node.Position;
Vector walkingTo: travelPath[currentPathNode] == -1 ? pathfindDestination : currentPathfindingNodePosition;

rule: 'Dummy: new state'
Event.OngoingPlayer
if (dummyOutlineState != dummySavedOutlineState)
{
    dummySavedOutlineState = dummyOutlineState;

    if (dummySavedOutlineState == 0)
        StopForcingPlayerOutlines(eventPlayer, host);
    else if (dummySavedOutlineState == 1)
        StartForcingPlayerOutlines(eventPlayer, host, true, Color.SkyBlue, OutlineType.Always);
    else if (dummySavedOutlineState == 2)
        StartForcingPlayerOutlines(eventPlayer, host, true, Color.Green, OutlineType.Always);
    else if (dummySavedOutlineState == 3)
        StartForcingPlayerOutlines(eventPlayer, host, true, Color.Turquoise, OutlineType.Always);
}

rule: 'Pathfind: Pathfind selected dummies'
if (button(Button.Reload))
if (selectedDummies.Length)
if (!pathfinderActive)
{
    Vector destination = watchPoint;
    Player[] players = selectedDummies;
    Number[] targetNodes = [];
    Number source = closestNodeToPosition(destination);

    for (waitlessI = 0; players.Length; 1)
        targetNodes[waitlessI] = closestNodeToPosition(players[waitlessI].Position());

    DijkstraResult dijkstra = Dijkstra(source, targetNodes, []);
    players.travelPath = dijkstra.Parents;
    players.isPathfinding = true;
    players.pathfindDestination = destination;

    for (waitlessI = 0; players.Length; 1)
        players[waitlessI].currentPathNode = targetNodes[waitlessI];
}

rule: 'Pathfind: Begin'
Event.OngoingPlayer
if (isPathfinding)
{
    WalkToDestination();
}

rule: 'Pathfind: Next node'
Event.OngoingPlayer
if (isPathfinding)
if (PositionOf().DistanceTo(currentPathfindingNodePosition) < 0.4)
{
    Number previous! = currentPathNode;
    currentPathNode = travelPath[currentPathNode];

    // Get attributes of current node
    Number[] attributes = Attributes.FilteredArray(a =>
        a.Node1 == Nodes[travelPath[previous]].Node.UniqueID &&
        a.Node2 == Nodes[travelPath[currentPathNode]].Node.UniqueID)
        .Map(a => a.ID);
    
    // Execute the rules that contain the attributes.
    for (define i = 0; attributes.Length; 1)
        for (define r = 0; Rules.Length; r++)
            if (Rules[r].ExecutesOnAttribute == attributes[i])
            {
                for (define a = 0; a < Rules[r].Actions.Length; a++)
                    Rules[r].Actions[a].Executor();
                break;
            }
}

void WalkToDestination()
{
    StartThrottleInDirection(
        eventPlayer,
        PositionOf().DirectionTowards(walkingTo),
        1,
        Relative.ToWorld,
        ThrottleBehavior.ReplaceExistingThrottle,
        ThrottleRev.DirectionAndMagnitude
    );
}