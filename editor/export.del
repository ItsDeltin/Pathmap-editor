import 'main.del';
import 'map languages.del';

# A newline followed by a bunch of horizontal lines.
String sep: '\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯';

enum OutputLanguage
{
    Workshop,
    OSTW,
    OverPy
}

# `0` = Workshop, `1` = OSTW, `2` = overpy
globalvar persist Number outputLanguage;

# Determines which components get built.
# 
# `[0]`: The map itself. (default: true)
# 
# `[1]`: The custom rules. (default: true)
# 
# `[2]`: A compressed map. (default: true)
globalvar Boolean[] buildToggles = [true, true, true];

globalvar Number selectWorkshopButton!;
globalvar Number selectOstwButton!;
globalvar Number selectOverpyButton!;
globalvar Number exportButton!;

void ExportMenu() 'EXPORT: create export menu'
{
    setMainLabel("main / export");

    createHelpButton(posX: -1.25, posY: .8,
        'Export settings', [
            MessageLine.Text('These settings decide which pathfinding components will be exported.\n'
                + 'The generated code exported should be copied into your gamemode.\n\n', Color.White),
            MessageLine.Separator('Export Map', Color.Green),
            MessageLine.Text(<'If enabled, the nav mesh you created for <0> will be generated.\n\n', CurrentMap()>, Color.White),
            MessageLine.Separator('Export Custom Rules', Color.Green),
            MessageLine.Text('If enabled, the custom rules in the rule menu will be compiled into the specified workshop language.\n\n', Color.White),
            MessageLine.Separator('Compress map', Color.Green),
            MessageLine.Text('If enabled, the exported map data will be compressed.', Color.White)
        ]);
    buttonCollectionMain += createButton(
        label: "┏━ Export Settings ━┓",
        posX: -1.25,
        posY: .6,
        defaultColor: Color.White,
        interactable: false
    );
    CreateToggle(0, 'Export Map', posX: -1.25, posY: .3);
    CreateToggle(1, 'Export Custom Rules', posX: -1.25, posY: .1);
    CreateToggle(2, 'Compress map', posX: -1.25, posY: -.1);
    
    createHelpButton(posX: 1.5, posY: .8,
        'Pathmaps can be compiled into several workshop languages.   ', [
            MessageLine.Separator('Workshop Code', Color.Green),
            MessageLine.Text('Vanilla workshop syntax.\nThis can be pasted directly into the game.\n\n', Color.White),
            MessageLine.Separator('Ostw', Color.SkyBlue),
            MessageLine.Text(
'An abstraction over the workshop allowing programming features such as collections in the form of
structs or classes, object '+ 'oriented programming, and lambdas.', Color.White),
            MessageLine.Text('https://github.com/ItsDeltin/Overwatch-Script-To-Workshop\n\n', Color.Blue),
            MessageLine.Separator('Overpy', Color.Yellow),
            MessageLine.Text(
'Code your gamemodes with modern development practices and break the limitations of the
workshop UI with features such as '+'multiple files, macros, switches, enums, optimizations,
string splitting, better syntax, etc.', Color.White),
            MessageLine.Text('https://github.com/Zezombye/overpy', Color.Blue)
        ]);
    buttonCollectionMain += createButton(
        label: "┏━ Language ━┓",
        posX: 1.5,
        posY: .6,
        defaultColor: Color.White,
        interactable: false
    );
    selectWorkshopButton = createButton(
        label: "",
        posX: 1.5,
        posY: .3,
        clickWidth: 1.2,
        defaultColor: Color.Green,
        onClick: left => {
            outputLanguage = 0;
            SetLanguageSelectLabels();
        },
    );
    selectOstwButton = createButton(
        label: "",
        posX: 1.5,
        posY: 0.,
        clickWidth: 1.2,
        defaultColor: Color.SkyBlue,
        onClick: left => {
            outputLanguage = 1;
            SetLanguageSelectLabels();
        },
    );
    selectOverpyButton = createButton(
        label: "",
        posX: 1.5,
        posY: -.3,
        clickWidth: 1.2,
        defaultColor: Color.Yellow,
        onClick: left => {
            outputLanguage = 2;
            SetLanguageSelectLabels();
        },
    );

    createHelpButton(posX: 0, posY: -0.7, null, [
        MessageLine.Separator('Code Generation', Color.Green),
        MessageLine.Text('This button will generate the pathfinding code that you can copy into your gamemode.\n' +
            'The code can be copied from the inspector by clicking the "Copy to clipboard all log" button.\n'),
        MessageLine.Text('Make sure the "Enable Workshop Inspector Log File" setting is enabled under Options >\n' +
            'Gameplay > General.\n\n'),
        MessageLine.Text('Don\'t confuse this with saving your map in the editor, you won\'t be able to re-edit\n' +
            'your map with the code generated from this. To do that, see the guide in the main menu.', Color.Yellow)]);
    exportButton = createButton(
        label: '',
        posY: -0.9,
        clickWidth: 3,
        defaultColor: Color.Green,
        onClick: left => {
            # Do nothing if nothing is going to be exported.
            if (!buildToggles[0] && !buildToggles[1]) {
                showMessage('Error', [MessageLine.Text('\n\nAll exporting options disabled, nothing to export.', Color.Rose)]);
            } else {
                Export();
            }
        }
    );

    buttonCollectionMain += [selectWorkshopButton, selectOstwButton, selectOverpyButton, exportButton];
    SetLanguageSelectLabels();
}

void SetLanguageSelectLabels() 'Subroutine: Set Language Select Labels'
{
    SetLabel(selectWorkshopButton, outputLanguage == 0 ? '【Workshop】' : 'Workshop');
    SetLabel(selectOstwButton, outputLanguage == 1 ? '【Ostw】' : 'Ostw');
    SetLabel(selectOverpyButton, outputLanguage == 2 ? '【Overpy】' : 'Overpy');
    SetLabel(exportButton, <'<1>Generate code for <0><1>', ['the workshop', 'ostw', 'overpy'][outputLanguage], AbilityIconString(Hero.Torbjorn, Button.Ability2)>);
}

void CreateToggle(in Number index, in String label, in Number posX, in Number posY)
{
    Number bid: NextButtonId();
    buttonCollectionMain += createButton(
        label: ExportBuildLabel(label, index),
        defaultColor: ExportBuildColor(index),
        posX: posX,
        posY: posY,
        clickWidth: 2,
        onClick: left => {
            buildToggles[index] = !buildToggles[index];
            SetLabel(bid, ExportBuildLabel(label, index));
            SetColor(bid, ExportBuildColor(index));
        },
    );
}

String ExportBuildLabel(String label, Number index): <'<0>: <1>', label, buildToggles[index] ? 'on' : 'off'>;
Color ExportBuildColor(Number index): buildToggles[index] ? Color.LimeGreen : CustomColor(182, 57, 57, 255);

rule: 'EXPORT: open export menu'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.Export)
{
    SetMenuState(MenuState.Export);
}

void Export() playervar 'Subroutine: Generate map code.'
{
    StartLongRunningTask('Exporting, please wait...');

    # Enable inspector so we can log the exported code to it.
    EnableInspector();

    # Export introduction.
    LogToInspector(<'Place the following text into your <0> script:<1>\n/*', ['workshop', 'ostw', 'overpy'][outputLanguage], sep>);

    String coreMessage! = '\nIn order to pathfind, you must add the core pathfinding code to your gamemode from the following link:
https://github.com/Its' + $'Deltin/Pathmap-editor/blob/main/pathfinder/core.{['ow', 'ostw', 'opy'][outputLanguage]}';

    # 1. Export the rules.
    if (buildToggles[1]) {
        ExportRules();
    }
    # 2. Export the map.
    if (buildToggles[0]) {
        # Export map to workshop.
        if (outputLanguage == 0)
            ExportMapToWorkshop();
        # Export map to ostw.
        else if (outputLanguage == 1)
            ExportMapToOstw();
        # Export map to overpy.
        else if (outputLanguage == 2)
            ExportMapToOverpy();
    }
    
    LogToInspector(sep + coreMessage);

    # Disable inspector.
    DisableInspector();

    EndLongRunningTask();

    # Show code generation completed message.
    showMessage('Pathfinding code generated!', [
        MessageLine.Separator('Your code has been generated, and you are almost ready to start pathfinding players!\n\n', Color.LimeGreen),
        MessageLine.Text(
            'Open the inspector and click the "Copy To Workshop All Log" button to copy the generated code to your clipboard.\n' +
            <'Paste the contents into a text editor<0>\n\n', outputLanguage == 0 ?
            '. Remove the first timestamp and then you can paste the workshop\ncode directly into your game.' : ', then follow the instructions in the text to use the pathfinder.\n'> +
            coreMessage),
        MessageLine.Separator(''),
        MessageLine.Text('It is recommended to restart the game instance before doing another export\n' +
            'because the copy will include *all* exports. Remember to save your map beforehand\nby copying the action set code!')
    ]);
}

void ExportRules() playervar 'EXPORT: Export'
{
    // OngoingPlayer is not vital, it's just so we can use player variables here
    OutputLanguage lang: <OutputLanguage>outputLanguage;
    Boolean is_ow: lang == OutputLanguage.Workshop;
    Boolean is_ostw: lang == OutputLanguage.OSTW;
    Boolean is_overpy: lang == OutputLanguage.OverPy;

    for(define i = 0; Rules.Length; 1) {
        # Rule syntax
        ExportStatement(lang,
            '*/ rule(\"【Generated】Custom pathfinding rule #{0}\") { /*'.Format([i + 1]),
            '*/ rule: \"【Generated】Custom pathfinding rule #{0}\" /*'.Format([i + 1]),
            '*/\nrule \"【Generated】Custom pathfinding rule #{0}\": @Event eachPlayer /*'.Format([i + 1])
        );

        # Get the number of enabled heroes.
        Number numberOfEnabledHeroes! = (Rules[i].EnabledHeroes[0] ? AllHeroes().Length - (Rules[i].EnabledHeroes.Length - 1) : Rules[i].EnabledHeroes.Length - 1);
        # Store the first toggled hero. This is effectively the first enabled hero since
        # anything using this value ensures that the switch is off. This will be null if no heroes are toggled.
        Hero firstEnabledHero! = Rules[i].EnabledHeroes[1];

        # Add event (ow)
        if (is_ow) {
            LogToInspector(<'*/ event { Ongoing - Each Player; All; <0>; } /*',
                numberOfEnabledHeroes != 1 ? 'All' : firstEnabledHero>);
        }
        # Add event (ostw)
        else if (is_ostw) {
            LogToInspector('*/ Event.OngoingPlayer /*');
            if (numberOfEnabledHeroes == 1) {
                LogToInspector(<'*/ Player.<0> /*', workshopHeroToOstwHero(firstEnabledHero)>); // torb
            }
        }
        # Add event (overpy)
        else if (is_overpy && numberOfEnabledHeroes == 1) {
            LogToInspector(<'*/\n    @Hero <0> /*', workshopHeroToOverpyHero(firstEnabledHero)>);
        }

        Hero[] toggledHeroes! = Rules[i].GetToggledHeroes();
        String heroListString! = null;
        Boolean doExportHeroArray! = numberOfEnabledHeroes > 1 && numberOfEnabledHeroes < AllHeroes().Length;
        if (doExportHeroArray)
        {
            heroListString = StringJoin(toggledHeroes, ', ', v =>
            {
                if (is_ow)
                    return <'Hero(<0>)', v>;
                if (is_ostw)
                    return <'Hero.<0>', workshopHeroToOstwHero(v)>;
                if (is_overpy)
                    return <'Hero.<0>', workshopHeroToOverpyHero(v)>;
            });
        }
        Boolean heroListCondition! = !Rules[i].EnabledHeroes[0];

        # Workshop condition
        if (lang == OutputLanguage.Workshop) {
            LogToInspector('*/ conditions { /*');
            LogToInspector('*/     Array Contains(Event Player.pfAttributes, {0}) == True; /*'.Format([Rules[i].ExecutesOnAttribute]));
            # Multiple heroes
            if (doExportHeroArray) {
                LogToInspector(<'*/     Array Contains(Array(<0>), Hero Of(Event Player)) == <1>; /*', heroListString, heroListCondition>);
            }
            LogToInspector('*/ } actions { /*');
        }
        # OSTW condition
        else if (lang == OutputLanguage.OSTW) {
            LogToInspector('*/ if (pfAttributes.Contains({0})) /*'.Format([Rules[i].ExecutesOnAttribute]));
            # Multiple heroes
            if (doExportHeroArray) {
                LogToInspector(<'*/ if (<1>[<0>].Contains(HeroOf())) /*', heroListString, heroListCondition ? '' : '!'>);
            }
            # Start rule block
            LogToInspector('*/ { /*');
        }
        # Overpy condition
        else if (lang == OutputLanguage.OverPy) {
            LogToInspector('*/\n    @Condition {0} in eventPlayer.pfAttributes /*'.Format([Rules[i].ExecutesOnAttribute]));
            # Multiple heroes
            if (doExportHeroArray) {
                LogToInspector(<'*/\n    @Condition eventPlayer.getCurrentHero() <1> [<0>] /*', heroListString, heroListCondition ? 'in' : 'not in'>);
            }
        }            
        
        # Loop through each action in the rule.
        for(define a = 0; Rules[i].Actions.Length; 1) {
            # Extract the action ID.
            define data = Rules[i].Actions[a].Data;
            define actionID: data[0];

            # Wait
            if (actionID == 0) {
                ExportAction(lang,
                    <'Wait(<0>, Ignore Condition);', data[1]>,
                    <'Wait(<0>);', data[1]>,
                    <'wait(<0>)', data[1]>);
            }
            # Jump
            else if (actionID == 1) {
                ExportAction(lang,
                    'Press Button(Event Player, Button(Jump));',
                    'PressButton(EventPlayer(), Button.Jump);',
                    'eventPlayer.forceButtonPress(Button.JUMP)');
            }
            # Start holding jump
            else if (actionID == 2) {
                ExportAction(lang,
                    'Start Holding Button(Event Player, Button(Jump));',
                    'StartHoldingButton(EventPlayer(), Button.Jump);',
                    'eventPlayer.startForcingButton(Button.JUMP)');
            }
            # Stop holding jump
            else if (actionID == 3) {
                ExportAction(lang,
                    'Stop Holding Button(Event Player, Button(Jump));',
                    'StopHoldingButton(EventPlayer(), Button.Jump);',
                    'eventPlayer.stopForcingButton(Button.JUMP)');
            }
            # Ability 1
            else if (actionID == 4) {
                ExportAction(lang,
                    'Press Button(Event Player, Button(Ability 1));',
                    'PressButton(EventPlayer(), Button.Ability1);',
                    'eventPlayer.forceButtonPress(Button.ABILITY_1)');
            }
            # Ability 2
            else if (actionID == 5) {
                ExportAction(lang,
                    'Press Button(Event Player, Button(Ability 2));',
                    'PressButton(EventPlayer(), Button.Ability2);',
                    'eventPlayer.forceButtonPress(Button.ABILITY_2)');
            }
            # Melee
            else if (actionID == 6) {
                ExportAction(lang,
                    'Press Button(Event Player, Button(Melee));',
                    'PressButton(EventPlayer(), Button.Melee);',
                    'eventPlayer.forceButtonPress(Button.MELEE)');
            }
            # Primary fire
            else if (actionID == 7) {
                ExportAction(lang,
                    'Press Button(Event Player, Button(Primary Fire));',
                    'PressButton(EventPlayer(), Button.PrimaryFire);',
                    'eventPlayer.forceButtonPress(Button.PRIMARY_FIRE)');
            }
            # Secondary fire
            else if (actionID == 8) {
                ExportAction(lang,
                    'Press Button(Event Player, Button(Secondary Fire));',
                    'PressButton(EventPlayer(), Button.SecondaryFire);',
                    'eventPlayer.forceButtonPress(Button.SECONDARY_FIRE)');
            }
            # Stop walking
            else if (actionID == 9) {
                ExportAction(lang,
                    'Stop Throttle In Direction(Event Player);',
                    'StopThrottleInDirection();',
                    'eventPlayer.stopThrottleInDirection()');
            }
            # Walk to destination
            else if (actionID == 10) {
                ExportAction(lang,
                    'Call Subroutine(pfWalkToDestination);',
                    'pfWalkToDestination();',
                    'pfWalkToDestination()');
            }
            # Look at floor
            else if (actionID == 11) {
                ExportAction(lang,
                    'Start Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 89), 1000, To World, None);',
                    'StartFacing(EventPlayer(), DirectionFromAngles(HorizontalFacingAngleOf(), 89), 1000, Relative.ToWorld, FacingRev.None);',
                    'eventPlayer.startFacing(angleToDirection(eventPlayer.getHorizontalFacingAngle(), 89), 1000, Relativity.TO_WORLD,' + ' FacingReeval.NONE)');
            }
            # Look at destination
            else if (actionID == 12) {
                ExportAction(lang,
                    'Call Subroutine(pfLookAtDestination);',
                    'pfLookAtDestination();',
                    'pfLookAtDestination()');
            }
            # Wait for ability 1
            else if (actionID == 13) {
                ExportAction(lang,
                    'Wait(Ability Cooldown(Event Player, Button(Ability 1)), Ignore Condition);',
                    'Wait(AbilityCooldown(eventPlayer, Button.Ability1));',
                    'wait(eventPlayer.getAbilityCooldown(Button.ABILITY_1))');
            }
            # Wait for ability 2
            else if (actionID == 14) {
                ExportAction(lang,
                    'Wait(Ability Cooldown(Event Player, Button(Ability 2)), Ignore Condition);',
                    'Wait(AbilityCooldown(eventPlayer, Button.Ability2));',
                    'wait(eventPlayer.getAbilityCooldown(Button.ABILITY_2))');
            }
            # Wait for secondary fire
            else if (actionID == 15) {
                ExportAction(lang,
                    'Wait(Ability Cooldown(Event Player, Button(Secondary Fire)), Ignore Condition);',
                    'Wait(AbilityCooldown(eventPlayer, Button.SecondaryFire));',
                    'wait(eventPlayer.getAbilityCooldown(Button.SECONDARY_FIRE))');
            }

            MinWait();
        }

        # End rule & actions for the c-like languages 
        if (lang == OutputLanguage.Workshop)
            LogToInspector('*/ } } /*');
        else if (lang == OutputLanguage.OSTW)
            LogToInspector('*/ } /*');
        
        MinWait();
    }
}

void ExportMapToWorkshop()
{
    # Compressed
    if (buildToggles[2]) {
        ExportMapBlock('compressed', false, () => {
            # Set pfDecompress
            LogToInspector('*/     global.pfDecompress = Array(Array( /*');
            LoadCompressionTable();
            # Export nodes
            PrintCompressedNodes();
            # End nodes data array, start neighbors data array
            LogToInspector('*/ ), Array( /*');
            # Print compressed neighbors.
            PrintCompressedNeighbors();
            UnloadCompressionTable();
            # End array
            LogToInspector('*/ )); /*');
        });
    }
    # Uncompressed
    else 
    {
        ExportMapBlock('nodes', true, () => {
            # Set loadedMap_segments
            LogToInspector('*/     global.pfLoadedMap_nodes = Array( /*');
            # For each attribute
            ExportArray(Nodes, 10, (node, isLast) => <'Vector<0><1>', node.Node.Position, isLast ? '' : ', '>);
            # End pathfinder segments
            LogToInspector('*/ ); /*');
        });
        ExportMapBlock('neighbors', false, () => {
            # Set loadedMap_neighors
            LogToInspector('*/     global.pfLoadedMap_neighbors = Array( /*');
            ExportNeighborsPattern('Array(', ')', 'Empty Array');
            # End array
            LogToInspector('*/ ); /*');
        });
    }
}

void ExportMapToOstw()
{
    # This exported code should be placed in the ostw file.
    if (buildToggles[2])
    {
        LogToInspector('*/' + ExportOstwDataSet("compressed", "pfDecompress", "") + sep);
    }
    else
    {
        LogToInspector('*/' + ExportOstwDataSet("nodes", "pfLoadedMap.nodes", ".nodes") + '/*');
        LogToInspector('*/' + ExportOstwDataSet("neighbors", "pfLoadedMap.neighbors", ".neighbors") + sep);
    }

    # Introduction message
    LogToInspector(<'Place the following text into a file named \"<0>.jsonc\":<1>\n/*', CurrentMap(), sep>);


    if (buildToggles[2])
    {
        LogToInspector('*/ [[ /*');
        LoadCompressionTable();
        PrintCompressedNodes();
        LogToInspector('*/ ], [ /*');
        PrintCompressedNeighbors();
        UnloadCompressionTable();
        LogToInspector('*/ ]]');
    }
    else
    {
        # Export Ostw nodes
        LogToInspector('*/ { "nodes": [ /*');
        ExportArray(Nodes, 10, (wn, isLast) => ExportJsonVector(wn.Node.Position, isLast));
        # Export Ostw segments
        LogToInspector('*/ ], "neighbors": [ /*');
        ExportNeighborsPattern('[', ']', '[]');
        # Conclude JSON
        LogToInspector('*/ ] }');
    }
}

void ExportMapToOverpy()
{
    if (buildToggles[2]) {
        ExportOverpyMapBlock('compressed', 'pfDecompress = [[');
        LoadCompressionTable();
        PrintCompressedNodes();
        LogToInspector(<'*/ ], [ /*'>);
        PrintCompressedNeighbors();
        UnloadCompressionTable();
        LogToInspector('*/ ]]');
        return;
    }

    # Export Overpy nodes
    ExportOverpyMapBlock('nodes', 'pfLoadedMap_nodes = [');
    ExportArray(Nodes, 10, (wn, isLast) => <'vect(<0>, <1>, <2>)<3>',
        wn.Node.Position.X, wn.Node.Position.Y, wn.Node.Position.Z, isLast ? '' : ','>);
    LogToInspector('*/ ] /*');

    # Export Overpy neighors
    ExportOverpyMapBlock('neighbors', 'pfLoadedMap_neighbors = [');
    ExportNeighborsPattern('[', ']', '[]');
    LogToInspector('*/ ]');
}

# Exports the segments and attributes in a nicely optimized way.
# - `beginArray`: The term used to begin an array in the intended output language.
# - `endArray`: The term used to end an array in the intended output language.
# - `emptyArray`: The term used to create an empty array in the intended output language.
void ExportNeighborsPattern(String beginArray, String endArray, String emptyArray) playervar 'Subroutine: Export Neighbors Pattern'
{
    DisableInspectorRecording();
    # For each attribute
    for (Number n = 0; Nodes.Length; 1)
    {
        # Get connected segments.
        Number[] connected = GetConnectedSegments(n);
        String neighborString: StringJoin(connected, ',', si =>
        {
            # Find the attributes from node A to node B.
            # The core pathfinding code travels from the goal to the player's position,
            # so attr.Node1 and attr.Node2 are flipped here.
            Number[] attributes = GetConnectedAttributesReversed(n, si);
            
            # If there are no attributes, use the empty array term.
            String attrString = emptyArray;
            if (attributes.Length != 0) {
                attrString = <'<0><1><2>', beginArray, StringJoin(attributes, ',', v => v), endArray>;
            }

            return <'<0><1>, <2><3>',
                beginArray,
                GetConnectedNodeIndex(Nodes[n], Segments[si]),
                attrString,
                endArray>;
        });
        EnableInspectorRecording();
        LogToInspector(<'*/ <0><1><2><3> /*', beginArray, neighborString, endArray, n == Nodes.Length - 1 ? '' : ','>);
        DisableInspectorRecording();
        Wait(0.03);
    }
    EnableInspectorRecording();
}

# Finds all the segments connected to a node.
Number[] GetConnectedSegments(Number nodeIndex): Segments
    .Map((s, i) => i)
    .FilteredArray(i => Segments[i].Node1 == Nodes[nodeIndex].Node.UniqueID || Segments[i].Node2 == Nodes[nodeIndex].Node.UniqueID);

# Finds all the attributes of a node and a neighbor.
Number[] GetConnectedAttributesReversed(Number nodeIndex, Number segmentIndex): Attributes
    .FilteredArray(attr => Nodes[nodeIndex].Node.UniqueID == attr.Node2 && (attr.Node1 == Segments[segmentIndex].Node1 || attr.Node1 == Segments[segmentIndex].Node2))
    .Map(attr => attr.Value);

Number GetConnectedNodeIndex(WorldNode node, WorldSegment segment): NodeIndexFromID(segment.Node1 == node.Node.UniqueID ? segment.Node2 : segment.Node1);

playervar String exportArrayStub;
playervar Number exportArrayNumA;
playervar Number exportArrayNumB;
void ExportArray<T>(in T[] array, in Number step, const (T, Boolean) => String valueToString)
{
    for (exportArrayNumA = 0; array.Length; step) {
        exportArrayStub = '';
        for (exportArrayNumB = exportArrayNumA; Min(exportArrayNumA + step, array.Length); 1) {
            exportArrayStub = exportArrayStub + valueToString(array[exportArrayNumB], exportArrayNumB == array.Length - 1);
        }
        LogToInspector('*/{0}/*'.Format([exportArrayStub]));
        MinWait();
    }
}

String StringJoin<T>(in T[] array, in String joinValue, const T => Any tToString)
{
    String joinStringResult! = '';
    for (Number joinStringI! = 0; array.Length; 1)
    {
        joinStringResult = <'<0><1><2>', joinStringResult, tToString(array[joinStringI]), joinStringI != array.Length - 1 ? joinValue : ''>;
        MinWait();
    }
    return joinStringResult;
}

void ExportMapBlock(in String blockName, in Boolean terminate, const () => void exportActions)
{
    # Attributes rule
    LogToInspector('*/ rule(\"【Map】{0} ({1})\") { event { Ongoing - Global; } /*'.Format([CurrentMap(), blockName]));
    # Conditions
    LogToInspector('*/ conditions { /*');
    # Make sure this is the correct map
    LogToInspector(mapCondition);
    # Start actions
    LogToInspector('*/ } actions { /*');
    # Export inner actions
    exportActions();
    # End action & rule block
    LogToInspector('*/ } }' + (terminate ? ' /*' : ''));
}

void ExportOverpyMapBlock(in String blockName, in String initialLine) {
    LogToInspector($'*/\nrule "【Map】{CurrentMap()} ({blockName})":
    @Condition getCurrentMap() == Map.{mapNameToOverpyName(CurrentMap())}
    {initialLine} /*');
}

String ExportJsonVector(in Vector vector, in Boolean isLast)
{
    return <'{"x":<0>, "y":<1>, "z":<2>}<3>', vector.X, vector.Y, vector.Z, isLast ? '' : ', '>;
}

String ExportOstwDataSet(in String setName, in String variable, in String path)
{
    return <'\nrule: "【Map】<0> (<1>)"\n', CurrentMap(), setName> +
        <'if (CurrentMap() == Map.<0>) {\n', mapNameToOstwName(CurrentMap())> +
        <'    <0> = import("<1>.jsonc")<2>;\n}', variable, CurrentMap(), path>;
}

void ExportStatement(in OutputLanguage language, in String workshop, in String deltinscript, in String overpy)
{
    LogToInspector([workshop, deltinscript, overpy][language]);
}

void ExportAction(in OutputLanguage language, in String workshop, in String deltinScript, in String overpy)
{
    LogToInspector("*/{0} /*".Format([[" " + workshop, "     " + deltinScript, "\n    " + overpy][language]]));
}

String mapCondition: '*/     Current Map == Map({0}); /*'.Format([CurrentMap()]);

playervar String compressionTable;
void LoadCompressionTable() 'Load compression table'
{
    host.compressionTable =
        " !#$%&'()*+,-./:;<=>?@[]^_`|~ ¡¢£¤¥¦§¨©«¬­®¯°±´¶·¸»¿×÷˂˃˄˅˒˓˔˕˖˗˘˙˚˛˜˝˞˟˥˦˧˨˩˪˫˭˯˰˱˲˳˴˵˶˷˸˹˺˻˼˽" +
        "˾˿̴̵̶̷̸̡̢̧̨̛̖̗̘̙̜̝̞̟̠̣̤̥̦̩̪̫̬̭̮̯̰̱̲̳̹̺̻̼͇͈͉͍͎̀́̂̃̄̅̆̇̈̉̊̋̌̍̎̏̐̑̒̓̔̽̾̿̀́͂̓̈́͆͊͋͌̕̚ͅ͏͓͔͕͖͙͚͐͑͒͗͛ͣͤͥͦͧͨͩͪͫͬͭͮͯ͘͜͟͢͝͞͠͡͵͸͹;΀΁΂΃΄΅·΋΍΢" +
        "϶҂҃҄҅҆҇҈҉԰՗՘՚՛՜՝՞՟։֊֋֌֍֎֏֐ְֱֲֳִֵֶַָֹֺֻּֽ֑֖֛֢֣֤֥֦֧֪֚֭֮֒֓֔֕֗֘֙֜֝֞֟֠֡֨֩֫֬֯־ֿ׀ׁׂ׃ׅׄ׆ׇ׈׉׊׋׌׍׎׏׫׬׭׮׳״׵׶׷׸׹׺׻׼׽׾׿؀؁؂؃؄؅؆؇؈؉؊؋،؍؎؏ؐؑؒؓؔؕ" +
        "ؘؙؚؖؗ؛؜؝؞؟ًٌٍَُِّْٕٖٜٟٓٔٗ٘ٙٚٛٝٞ٪٫٬٭ٰ۔ۖۗۘۙۚۛۜ۝۞ۣ۟۠ۡۢۤۧۨ۩۪ۭ۫۬۽۾܀܁܂܃܄܅܆܇܈܉܊܋܌܍܎܏ܑܱܴܷܸܹܻܼܾ݂݄݆݈ܰܲܳܵܶܺܽܿ݀݁݃݅݇݉݊݋݌ަާިީުޫެޭޮޯް޲޳޴޵޶޷޸޹޺޻" +
        "޼޽޾޿߲߫߬߭߮߯߰߱߳߶߷߸߹߻߼߽߾߿ࠖࠗ࠘࠙ࠛࠜࠝࠞࠟࠠࠡࠢࠣࠥࠦࠧࠩࠪࠫࠬ࠭࠮࠯࠰࠱࠲࠳࠴࠵࠶࠷࠸࠹࠺࠻࠼࠽࠾࠿࡙࡚࡛࡜࡝࡞࡟࡫࡬࡭࡮࡯ࡰࡱࡲࡳࡴࡵࡶࡷࡸࡹࡺࡻࡼࡽࡾࡿࢀࢁࢂࢃࢄࢅࢆࢇ࢈ࢉࢊࢋࢌࢍࢎ࢏࢐࢑࢒࢓࢔࢕࢖࢙࢚࢛ࢗ࢘࢜࢝࢞࢟ࢵࣈࣉ࣊࣋࣌࣍" +
        "࣏࣐࣑࣒࣓࣎ࣔࣕࣖࣗࣘࣙࣚࣛࣜࣝࣞࣟ࣠࣡࣢ࣰࣱࣲࣣࣦࣩ࣭࣮࣯ࣶࣹࣺࣤࣥࣧࣨ࣪࣫࣬ࣳࣴࣵࣷࣸࣻࣼࣽࣾࣿऀँंःऺऻ़ािीुूृॄॅॆेैॉॊोौ्ॎॏ॒॑॓॔ॕॖॗॢॣ।॥॰ঁংঃ঄঍঎঑঒঩঱঳঴঵঺঻়ািীুূৃৄ৅৆েৈ৉৊োৌ্৏৐৑৒৓৔৕৖ৗ" +
        "৘৙৚৛৞ৢৣ৤৥৲৳৺৻৽৾৿਀ਁਂਃ਄਋਌਍਎਑਒਩਱਴਷਺਻਼਽ਾਿੀੁੂ੃੄੅੆ੇੈ੉੊ੋੌ੍੎੏੐ੑ੒੓੔੕੖੗੘੝੟੠੡੢੣੤੥ੰੱੵ੶੷੸੹੺੻੼੽੾੿઀ઁંઃ઄઎઒઩઱઴઺઻઼ાિીુૂૃૄૅ૆ેૈૉ૊ોૌ્૎૏૑૒૓૔૕૖૗૘૙૚૛૜૝૞" +
        "૟ૢૣ૤૥૰૱૲૳૴૵૶૷૸ૺૻૼ૽૾૿଀ଁଂଃ଄଍଎଑଒଩଱଴଺଻଼ାିୀୁୂୃୄ୅୆େୈ୉୊ୋୌ୍୎୏୐୑୒୓୔୕ୖୗ୘୙୚୛୞ୢୣ୤୥୰୸୹୺୻୼୽୾୿஀஁ஂ஄஋஌஍஑஖஗஘஛஝஠஡஢஥஦஧஫஬஭஺஻஼஽ாிீுூ௃௄௅ெேை௉ொோௌ்௎௏௑௒௓௔௕" +
        "௖ௗ௘௙௚௛௜௝௞௟௠௡௢௣௤௥௳௴௵௶௷௸௹௺௻௼௽௾௿ఀఁంఃఄ఍఑఩఺఻఼ాిీుూృౄ౅ెేై౉ొోౌ్౎౏౐౑౒౓౔ౕౖ౗౛౜ౝ౞౟ౢౣ౤౥౰౱౲౳౴౵౶౷౿ಁಂಃ಄಍಑಩಴಺಻಼ಾಿೀುೂೃೄ೅ೆೇೈ೉ೊೋೌ್೎೏೐೑೒೓೔ೕೖ೗೘೙೚೛೜ೝ೟" +
        "ೢೣ೤೥೰ೳ೴೵೶೷೸೹೺೻೼೽೾೿ഀഁംഃ഍഑഻഼ാിീുൂൃൄ൅െേൈ൉ൊോൌ്൏൐൑൒൓ൗൢൣ൤൥൹඀ඁංඃ඄඗඘඙඲඼඾඿෇෈෉්෋෌෍෎ාැෑිීු෕ූ෗ෘෙේෛොෝෞෟ෠෡෢෣෤෥෰෱ෲෳ෴෵෶෷෸෹෺෻෼෽෾෿฀ัิีึืฺุู฻฼฽฾฿็่" +
        "้๊๋์ํ๎๏๚๛๜๝๞๟๠๡๢๣๤๥๦๧๨๩๪๫๬๭๮๯๰๱๲๳๴๵๶๷๸๹๺๻๼๽๾๿຀຃຅຋຤຦ັິີຶື຺ຸູົຼ຾຿໅໇່້໊໋໌ໍ໎໏໚໛໠໡໢໣໤໥໦໧໨໩໪໫໬໭໮໯໰໱໲໳໴໵໶໷໸໹໺໻໼໽໾໿༁༂༃༄༅༆༇༈༉༊་༌།༎༏༐༑༒༓༔༕" +
        "༖༗༘༙༚༛༜༝༞༟༴༵༶༷༸༹༺༻༼༽༾༿཈཭཮཯཰ཱཱཱིིུུྲྀཷླྀཹེཻོཽཾཿ྄ཱྀྀྂྃ྅྆྇ྍྎྏྐྑྒྒྷྔྕྖྗ྘ྙྚྛྜྜྷྞྟྠྡྡྷྣྤྥྦྦྷྨྩྪྫྫྷྭྮྯྰྱྲླྴྵྶྷྸྐྵྺྻྼ྽྾྿࿀࿁࿂࿃࿄࿅࿆࿇࿈࿉࿊࿋࿌࿍࿎࿏࿐࿑࿒࿓࿔࿕࿖࿗࿘࿙࿚" +
        "࿛࿜࿝࿞࿟࿠࿡࿢࿣࿤࿥࿦࿧࿨࿩࿪࿫࿬࿭࿮࿯࿰࿱࿲࿳࿴࿵࿶࿷࿸࿹࿺࿻࿼࿽࿾࿿ါာိီုူေဲဳဴဵံ့း္်ျြွှ၊။၌၍၎၏ၖၗၘၙၞၟၠၢၣၤၧၨၩၪၫၬၭၱၲၳၴႂႃႄႅႆႇႈႉႊႋႌႍႏႚႛႜႝ႞႟჆჈჉჊჋჌჎჏჻቉቎቏቗቙቞቟኉኎኏኱኶኷኿዁዆" +
        "዇዗጑጖጗፛፜፝፞፟፠፡።፣፤፥፦፧፨፽፾፿᎐᎑᎒᎓᎔᎕᎖᎗᎘᎙᎚᎛᎜᎝᎞᎟᏶᏷᏾᏿᐀᙭᙮ ᚛᚜᚝᚞᚟᛫᛬᛭᛹᛺᛻᛼᛽᛾᛿ᜍᜒᜓ᜔᜕᜖᜗᜘᜙᜚᜛᜜᜝᜞ᜟᜲᜳ᜴᜵᜶᜷᜸᜹᜺᜻᜼᜽᜾᜿ᝒᝓ᝔᝕᝖᝗᝘᝙᝚᝛᝜᝝᝞᝟᝭᝱ᝲᝳ᝴᝵᝶᝷᝸᝹᝺᝻᝼᝽᝾᝿឴឵ាិីឹឺុ" +
        "ូួើឿៀេែៃោៅំះៈ៉៊់៌៍៎៏័៑្៓។៕៖៘៙៚៛៝៞៟៪៫៬៭៮៯៺៻៼៽៾៿᠀᠁᠂᠃᠄᠅᠆᠇᠈᠉᠊᠋᠌᠍᠎᠏᠚᠛᠜᠝᠞᠟᡹᡺᡻᡼᡽᡾᡿ᢅᢆᢩ᢫᢬᢭᢮᢯᣶᣷᣸᣹᣺᣻᣼᣽᣾᣿᤟ᤠᤡᤢᤣᤤᤥᤦᤧᤨᤩᤪᤫ᤬᤭᤮᤯ᤰᤱᤲᤳᤴᤵᤶᤷᤸ᤻᤹᤺᤼᤽᤾᤿᥀᥁" +
        "᥂᥃᥄᥅᥮᥯᥵᥶᥷᥸᥹᥺᥻᥼᥽᥾᥿᦬᦭᦮᦯᧊᧋᧌᧍᧎᧏᧛᧜᧝᧞᧟᧠᧡᧢᧣᧤᧥᧦᧧᧨᧩᧪᧫᧬᧭᧮᧯᧰᧱᧲᧳᧴᧵᧶᧷᧸᧹᧺᧻᧼᧽᧾᧿ᨘᨗᨙᨚᨛ᨜᨝᨞᨟ᩕᩖᩗᩘᩙᩚᩛᩜᩝᩞ᩟᩠ᩡᩢᩣᩤᩥᩦᩧᩨᩩᩪᩫᩬᩭᩮᩯᩰᩱᩲᩳᩴ᩵᩶᩷᩸᩹᩺᩻᩼᩽᩾᩿᪊᪋᪌᪍᪎᪏᪚᪛᪜᪝᪞᪟" +
        "᪠᪡᪢᪣᪤᪥᪦᪨᪩᪪᪫᪬᪭᪮᪯᪵᪶᪷᪸᪹᪺᪽᪰᪱᪲᪳᪴᪻᪼᪾ᪿᫀ᫃᫄᫊᫁᫂᫅᫆᫇᫈᫉᫋ᫌᫍᫎ᫏᫐᫑᫒᫓᫔᫕᫖᫗᫘᫙᫚᫛᫜᫝᫞᫟᫠᫡᫢᫣᫤᫥᫦᫧᫨᫩᫪᫫᫬᫭᫮᫯᫰᫱᫲᫳᫴᫵᫶᫷᫸᫹᫺᫻᫼᫽᫾᫿ᬀᬁᬂᬃᬄ᬴ᬵᬶᬷᬸᬹᬺᬻᬼᬽᬾᬿᭀᭁᭂᭃ᭄ᭌ᭍᭎᭏᭚᭛᭜᭝᭞᭟᭠" +
        "᭡᭢᭣᭤᭥᭦᭧᭨᭩᭪᭬᭫᭭᭮᭯᭰᭱᭲᭳᭴᭵᭶᭷᭸᭹᭺᭻᭼᭽᭾᭿ᮀᮁᮂᮡᮢᮣᮤᮥᮦᮧᮨᮩ᮪᮫ᮬᮭ᯦ᯧᯨᯩᯪᯫᯬᯭᯮᯯᯰᯱ᯲᯳᯴᯵᯶᯷᯸᯹᯺᯻᯼᯽᯾᯿ᰤᰥᰦᰧᰨᰩᰪᰫᰬᰭᰮᰯᰰᰱᰲᰳᰴᰵᰶ᰷᰸᰹᰺᰻᰼᰽᰾᰿᱊᱋᱌᱾᱿Ᲊᲊ᲋᲌᲍᲎᲏᲻᲼᳀᳁᳂᳃᳄᳅᳆᳇᳈᳉᳊᳋᳌" +
        "᳍᳎᳏᳐᳑᳒᳓᳔᳕᳖᳗᳘᳙᳜᳝᳞᳟᳚᳛᳠᳡᳢᳣᳤᳥᳦᳧᳨᳭᳴᳷᳸᳹᳻᳼᳽᳾᳿᷐᷎᷺᷂᷊᷏᷹᷽᷿᷷᷸᷀᷁᷃᷄᷅᷆᷇᷈᷉᷋᷌᷑᷒ᷓᷔᷕᷖᷗᷘᷙᷚᷛᷜᷝᷞᷟᷠᷡᷢᷣᷤᷥᷦᷧᷨᷩᷪᷫᷬᷭᷮᷯᷰᷱᷲᷳᷴ᷵᷻᷾᷶᷼᷍἖἗἞἟὆὇὎὏὘὚὜὞὾὿᾵᾽᾿῀῁῅῍῎῏῔῕῜" +
        "῝῞῟῭΅`῰῱῵´῾῿           ​‌‍‎‏‐‑‒–—―‖‗‘’‚‛“”„‟†‡•‣․‥…‧  ‪‫‬‭‮ ‰‱′″‴‵‶‷‸‹›※‼‽‾‿⁀⁁⁂⁃⁄⁅⁆⁇⁈⁉⁊⁋⁌⁍⁎⁏⁐⁑⁒⁓⁔⁕⁖⁗⁘⁙⁚⁛⁜⁝⁞ ⁠⁡⁢⁣⁤⁥⁦⁧⁨⁩⁪⁫⁬⁭⁮⁯⁲⁳⁺⁻" +
        "⁼⁽⁾₊₋₌₍₎₏₝₞₟₠₡₢₣₤₥₦₧₨₩₪₫€₭₮₯₰₱₲₳₴₵₶₷₸₹₺₻₼₽₾₿⃀⃁⃂⃃⃄⃅⃆⃇⃈⃉⃊⃋⃌⃍⃎⃏⃒⃓⃘⃙⃚⃐⃑⃔⃕⃖⃗⃛⃜⃝⃞⃟⃠⃡⃢⃣⃤⃥⃦⃪⃫⃨⃬⃭⃮⃯⃧⃩⃰⃱⃲⃳⃴⃵⃶⃷⃸⃹⃺⃻⃼⃽⃾⃿℀℁℃℄℅℆℈℉℔№℗℘℞℟℠℡™℣℥℧" +
        "℩℮℺℻⅀⅁⅂⅃⅄⅊⅋⅌⅍⅏↊↋↌↍↎↏←↑→↓↔↕↖↗↘↙↚↛↜↝↞↟↠↡↢↣↤↥↦↧↨↩↪↫↬↭↮↯↰↱↲↳↴↵↶↷↸↹↺↻↼↽↾↿⇀⇁⇂⇃⇄⇅⇆⇇⇈⇉⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇚⇛⇜⇝⇞⇟⇠⇡⇢⇣⇤⇥⇦⇧⇨⇩⇪⇫⇬⇭⇮⇯⇰⇱⇲⇳⇴⇵⇶⇷⇸⇹⇺⇻" +
        "⇼⇽⇾⇿∀∁∂∃∄∅∆∇∈∉∊∋∌∍∎∏∐∑−∓∔∕∖∗∘∙√∛∜∝∞∟∠∡∢∣∤∥∦∧∨∩∪∫∬∭∮∯∰∱∲∳∴∵∶∷∸∹∺∻∼∽∾∿≀≁≂≃≄≅≆≇≈≉≊≋≌≍≎≏≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟≠≡≢≣≤≥≦≧≨≩≪≫≬≭≮≯≰≱≲≳≴≵≶≷≸≹≺≻" +
        "≼≽≾≿⊀⊁⊂⊃⊄⊅⊆⊇⊈⊉⊊⊋⊌⊍⊎⊏⊐⊑⊒⊓⊔⊕⊖⊗⊘⊙⊚⊛⊜⊝⊞⊟⊠⊡⊢⊣⊤⊥⊦⊧⊨⊩⊪⊫⊬⊭⊮⊯⊰⊱⊲⊳⊴⊵⊶⊷⊸⊹⊺⊻⊼⊽⊾⊿⋀⋁⋂⋃⋄⋅⋆⋇⋈⋉⋊⋋⋌⋍⋎⋏⋐⋑⋒⋓⋔⋕⋖⋗⋘⋙⋚⋛⋜⋝⋞⋟⋠⋡⋢⋣⋤⋥⋦⋧⋨⋩⋪⋫⋬⋭⋮⋯⋰⋱⋲⋳⋴⋵⋶⋷⋸⋹⋺⋻" +
        "⋼⋽⋾⋿⌀⌁⌂⌃⌄⌅⌆⌇⌈⌉⌊⌋⌌⌍⌎⌏⌐⌑⌒⌓⌔⌕⌖⌗⌘⌙⌚⌛⌜⌝⌞⌟⌠⌡⌢⌣⌤⌥⌦⌧⌨〈〉⌫⌬⌭⌮⌯⌰⌱⌲⌳⌴⌵⌶⌷⌸⌹⌺⌻⌼⌽⌾⌿⍀⍁⍂⍃⍄⍅⍆⍇⍈⍉⍊⍋⍌⍍⍎⍏⍐⍑⍒⍓⍔⍕⍖⍗⍘⍙⍚⍛⍜⍝⍞⍟⍠⍡⍢⍣⍤⍥⍦⍧⍨⍩⍪⍫⍬⍭⍮⍯⍰⍱⍲⍳⍴⍵⍶⍷⍸⍹⍺⍻" +
        "⍼⍽⍾⍿⎀⎁⎂⎃⎄⎅⎆⎇⎈⎉⎊⎋⎌⎍⎎⎏⎐⎑⎒⎓⎔⎕⎖⎗⎘⎙⎚⎛⎜⎝⎞⎟⎠⎡⎢⎣⎤⎥⎦⎧⎨⎩⎪⎫⎬⎭⎮⎯⎰⎱⎲⎳⎴⎵⎶⎷⎸⎹⎺⎻⎼⎽⎾⎿⏀⏁⏂⏃⏄⏅⏆⏇⏈⏉⏊⏋⏌⏍⏎⏏⏐⏑⏒⏓⏔⏕⏖⏗⏘⏙⏚⏛⏜⏝⏞⏟⏠⏡⏢⏣⏤⏥⏦⏧⏨⏩⏪⏫⏬⏭⏮⏯⏰⏱⏲⏳⏴⏵⏶⏷⏸⏹⏺⏻" +
        "⏼⏽⏾⏿␀␁␂␃␄␅␆␇␈␉␊␋␌␍␎␏␐␑␒␓␔␕␖␗␘␙␚␛␜␝␞␟␠␡␢␣␤␥␦␧␨␩␪␫␬␭␮␯␰␱␲␳␴␵␶␷␸␹␺␻␼␽␾␿⑀⑁⑂⑃⑄⑅⑆⑇⑈⑉⑊⑋⑌⑍⑎⑏⑐⑑⑒⑓⑔⑕⑖⑗⑘⑙⑚⑛⑜⑝⑞⑟⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵ⒶⒷ" +
        "ⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋╌╍" +
        "╎╏═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳╴╵╶╷╸╹╺╻╼╽╾╿▀▁▂▃▄▅▆▇█▉▊▋▌▍▎▏▐░▒▓▔▕▖▗▘▙▚▛▜▝▞▟■□▢▣▤▥▦▧▨▩▪▫▬▭▮▯▰▱▲△▴▵▶▷▸▹►▻▼▽▾▿◀◁◂◃◄◅◆◇◈◉◊○◌◍" +
        "◎●◐◑◒◓◔◕◖◗◘◙◚◛◜◝◞◟◠◡◢◣◤◥◦◧◨◩◪◫◬◭◮◯◰◱◲◳◴◵◶◷◸◹◺◻◼◽◾◿☀☁☂☃☄★☆☇☈☉☊☋☌☍☎☏☐☑☒☓☔☕☖☗☘☙☚☛☜☝☞☟☠☡☢☣☤☥☦☧☨☩☪☫☬☭☮☯☰☱☲☳☴☵☶☷☸☹☺☻☼☽☾☿♀♁♂♃♄♅♆♇♈♉♊♋♌♍" +
        "♎♏♐♑♒♓♔♕♖♗♘♙♚♛♜♝♞♟♠♡♢♣♤♥♦♧♨♩♪♫♬♭♮♯♰♱♲♳♴♵♶♷♸♹♺♻♼♽♾♿⚀⚁⚂⚃⚄⚅⚆⚇⚈⚉⚊⚋⚌⚍⚎⚏⚐⚑⚒⚓⚔⚕⚖⚗⚘⚙⚚⚛⚜⚝⚞⚟⚠⚡⚢⚣⚤⚥⚦⚧⚨⚩⚪⚫⚬⚭⚮⚯⚰⚱⚲⚳⚴⚵⚶⚷⚸⚹⚺⚻⚼⚽⚾⚿⛀⛁⛂⛃⛄⛅⛆⛇⛈⛉⛊⛋⛌⛍" +
        "⛎⛏⛐⛑⛒⛓⛔⛕⛖⛗⛘⛙⛚⛛⛜⛝⛞⛟⛠⛡⛢⛣⛤⛥⛦⛧⛨⛩⛪⛫⛬⛭⛮⛯⛰⛱⛲⛳⛴⛵⛶⛷⛸⛹⛺⛻⛼⛽⛾⛿✀✁✂✃✄✅✆✇✈✉✊✋✌✍✎✏✐✑✒✓✔✕✖✗✘✙✚✛✜✝✞✟✠✡✢✣✤✥✦✧✨✩✪✫✬✭✮✯✰✱✲✳✴✵✶✷✸✹✺✻✼✽✾✿❀❁❂❃❄❅❆❇❈❉❊❋❌❍";
}
void UnloadCompressionTable()
{
    host.compressionTable = null;
}

String Compress(in Number value): compressionTable.CharAt(value);

void PrintCompressedNodes() 'Print compressed nodes' {
    PrintCompressedData(42, Nodes, node => '{0}{1}{2}'.Format([
        Compress((node.Node.Position.X * 10 + 4096) / 2),
        Compress((node.Node.Position.Y * 10 + 4096) / 2),
        Compress((node.Node.Position.Z * 10 + 4096) / 2)
    ]));
}

playervar String printCompressedDataCurrentString;
playervar Number printCompressedDataIndex;
void PrintCompressedData<T>(in Number splitCount, in T[] array, const T => String appendItem) {
    printCompressedDataCurrentString = '';
    for (printCompressedDataIndex = 0; array.Length; 1) {
        printCompressedDataCurrentString = printCompressedDataCurrentString + appendItem(array[printCompressedDataIndex]);

        if ((printCompressedDataIndex && printCompressedDataIndex % splitCount == 0) || printCompressedDataIndex == array.Length - 1) {
            LogCurrentStub(printCompressedDataIndex == array.Length - 1);

            // Start a new string.
            printCompressedDataCurrentString = '';
        }
        MinWait();
    }
}

void PrintCompressedNeighbors() 'Print compressed neighbors' {
    printCompressedDataCurrentString = '';

    # For each node
    for (Number n = 0; Nodes.Length; 1)
    {
        # Get the segments connected to the current node.
        Number[] connected = GetConnectedSegments(n);
        
        # For each connection
        for (Number s = 0; connected.Length; 1) {
            # Add the neighbor ID to the compressed data.
            AddToCompressedNeighborData(Compress(1 + GetConnectedNodeIndex(
                Nodes[n],
                Segments[connected[s]])));

            # Get attributes
            Number[] attributes = GetConnectedAttributesReversed(n, connected[s]);
            for (Number a = 0; attributes.Length; 1) {
                AddToCompressedNeighborData(Compress(1 + attributes[a]));
            }

            # End segment
            AddToCompressedNeighborData(Compress(0));
        }
        # End node
        AddToCompressedNeighborData(Compress(0), n == Nodes.Length - 1);
    }
    AddToCompressedNeighborData(null, true);
}

void AddToCompressedNeighborData(String value, Boolean isFinalItem = false) 'Add to compressed neighbor data' {
    if (!value || printCompressedDataCurrentString.Length >= 128)
    {
        Boolean isOwExport: !outputLanguage;
        LogCurrentStub(isFinalItem);
        printCompressedDataCurrentString = value;
    }
    else
    {
        printCompressedDataCurrentString = printCompressedDataCurrentString + value;
    }
    MinWait();
}

void LogCurrentStub(Boolean isFinalItem) 'LogCurrentStub'
{
    Boolean isOwExport: !outputLanguage;
    LogToInspector($'*/ {isOwExport ? "Custom String(" : ""}"{printCompressedDataCurrentString}"{isOwExport ? ")" : ""}{isFinalItem ? '' : ', '} /*');
}