import 'main.del';

Boolean CanUndo: historyPage > 0;
Boolean CanRedo: historyPage < historyItems.Length;

playervar Number historyPage;
playervar HistoryCatalog[] historyItems = [];

subroutines {
    0: Docment
}

void Document(HistoryCatalog catalogItem) playervar '(Subroutine) Doc Undoable Action': 'Docment'
{
    // If we went back in time and something is documented, the future states are now stale so we can remove them.
    while (historyItems.Length > historyPage)
        historyItems.ModRemoveByIndex(historyPage);

    catalogItem.Set();
    historyItems += [catalogItem];

    // If above the maximum allowed items, remove oldest item.
    if (historyPage == maxHistoryLength) {
        historyItems.ModRemoveByIndex(0);
    } else {
        historyPage++;
    }

    UpdateUndoInteractability();
}

// Represents a point in history
struct HistoryCatalog
{
    public () => void Set; // The action required to enter this state.
    public () => void Revert; // The logical inverse of 'Set' to backtrack out of this state.
}

void Undo()
{
    historyPage--;
    historyItems[historyPage].Revert();
    UpdateUndoInteractability();
}

void Redo()
{
    historyItems[historyPage].Set();
    historyPage++;
    UpdateUndoInteractability();
}