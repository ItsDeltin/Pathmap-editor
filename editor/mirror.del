import 'main.del';

globalvar Vector mirrorLineStart!;
globalvar Vector mirrorLineEnd!;
globalvar Number mirrorLineEffectA!;
globalvar Number mirrorLineEffectB!;

void enterMirroringMode() {
    cm_isInMenu = false;
    editorState = EditorState.MirrorMap;

    mirrorLineEffectA = CreateBeamEffect(
        mirrorLineStart && !mirrorLineEnd ? host : null,
        BeamType.MoiraOrbHealBeam,
        mirrorLineStart + Up() * .5,
        watchPoint + Up() * .5,
        Team.Team2,
        EffectRev.VisibleToPositionRadiusAndColor);

    mirrorLineEffectB = CreateBeamEffect(
        mirrorLineEnd ? host : null,
        BeamType.MoiraOrbHealBeam,
        mirrorLineStart + Up() * .5,
        mirrorLineEnd + Up() * .5,
        Team.Team1,
        EffectRev.VisibleToPositionRadiusAndColor);
}

rule: 'Editor: Exit mirror editing mode'
if (editorState != EditorState.MirrorMap)
{
    DestroyEffect(mirrorLineEffectA);
    DestroyEffect(mirrorLineEffectB);
}

// Show mirror preview
void mirrorMap() playervar 'Subroutine: Mirror map'
{
    Number nodeLength = Nodes.Length;
    Number segmentLength = Segments.Length;
    Number attributeLength = Attributes.Length;
    Vector start: mirrorLineStart;
    Vector end: mirrorLineEnd;

    Document({
        Set: () => {
            StartLongRunningTask('Mirroring, please wait...');
            executeMapMirror(nodeLength, segmentLength, attributeLength, start, end);
            EndLongRunningTask();
        },
        Revert: () => {
            Nodes = Nodes.Slice(0, nodeLength);
            Segments = Segments.Slice(0, segmentLength);
            Attributes = Attributes.Slice(0, attributeLength);
        }
    });

    mirrorLineStart = null;
    mirrorLineEnd = null;
}
void executeMapMirror(
    Number nodeLength,
    Number segmentLength,
    Number attributeLength,
    Vector mirrorStart,
    Vector mirrorEnd) playervar 'Subroutine: Execute map mirror'
{
    Number iterI = 0;
    # 0 = nodes, 1 = segments, 2 = attributes
    Number step = 0;

    # Create mirror progress HUD
    define progressHud = CreateProgressBarHudText(
        AllPlayers(),
        Value: iterI / [nodeLength, segmentLength, attributeLength][step] * 100,
        Text: [
            <'Mirroring nodes <0>/<1> (1/3)', iterI, nodeLength>,
            <'Mirroring paths <0>/<1> (2/3)', iterI, segmentLength>,
            <'Mirroring attributes <0>/<1> (3/3)', iterI, attributeLength>][step],
        Location: Location.Top,
        SortOrder: 100,
        ProgressBarColor: Color.Orange,
        TextColor: Color.White,
        Reevaluation: ProgressBarHudEvaluation.VisibleToAndValues
    );

    Vector center = (mirrorStart + mirrorEnd) / 2;
    Vector flip = (mirrorStart.DirectionTowards(mirrorEnd) * Vector(1, 0, 1))
        .Normalize()
        .CrossProduct(Up())
        .Normalize();

    # The distance where a mirrored node will be ignored.
    Number mergeRadius: 2;
    # The index of a node's mirrored node can be obtained by doing
    # `nodeMirrors[nodeIndex]`
    Number[] nodeMirrors = [];

    // Mirror nodes
    for (iterI = 0; nodeLength; 1) {
        if (!(iterI % 10)) {
            MinWait();
        }

        Vector currentNodePos: Nodes[iterI].Node.Position - center;
        Vector pos = center + (currentNodePos - 2 * currentNodePos.DotProduct(flip) * flip);

        // Do not mirror if the mirrored node is too close.
        if (pos.DistanceTo(Nodes[iterI].Node.Position) < mergeRadius) {
            nodeMirrors[iterI] = iterI;
            continue;
        }

        // Find existing nodes in the mirrored position.
        // The slice is so that only the original nodes are considered, not the mirrored nodes.
        // The Sort ensures that the correct already-mirrored node is linked to the current iter node.
        // Without the sort, an incorrect link may occur if multiple nodes are within the merge radius.
        Vector[] inRadius = Nodes.Map(n => n.Node.Position).Slice(0, nodeLength).SortedArray(n => n.DistanceTo(pos));
        // Do not mirror if a node already exists.
        if (inRadius.Length && inRadius.First.DistanceTo(pos) < mergeRadius)
        {
            nodeMirrors[iterI] = Nodes.Map(n => n.Node.Position).IndexOf(inRadius.First);
            continue;
        }

        nodeMirrors[iterI] = Nodes.Length;

        NodeUniqueID++;
        Nodes += { Node: {Position: pos, UniqueID: NodeUniqueID}, Selected: true };
    }
    step++;
    # Mirror segments
    mirrorNodeConnectedArray(nodeMirrors, Segments, iterI, segmentLength, SegmentUniqueID,
        seg => seg.Node1,
        seg => seg.Node2,
        (o, id, n1, n2) => { Node1: n1, Node2: n2, ID: id },
        true);
    step++;
    # Mirror attributes
    mirrorNodeConnectedArray(nodeMirrors, Attributes, iterI, attributeLength, AttributeUniqueID,
        attr => attr.Node1,
        attr => attr.Node2,
        (o, id, n1, n2) => { Value: o.Value, ID: id, Node1: n1, Node2: n2 },
        false);

    # Destroy progess hud
    DestroyProgressBarHudText(progressHud);

    # Notify user
    SmallMessage(AllPlayers(), <'Added <0> nodes', Nodes.Length - nodeLength>);
    SmallMessage(AllPlayers(), <'Added <0> segments', Segments.Length - segmentLength>);
    SmallMessage(AllPlayers(), <'Added <0> attributes', Attributes.Length - attributeLength>);

    # Update visiblity
    updateRenderingNodes();
}

void mirrorNodeConnectedArray<T>(
    in Number[] nodeMirrors,
    ref T[] array,
    ref Number i,
    in Number arrayLength,
    ref Number uniqueId,
    const T => Number getNode1,
    const T => Number getNode2,
    const (T, Number, Number, Number) => T mirroredValue,
    in Boolean isBidirectional)
{
    # Elements are added to the input array each iteration,
    # this ensures that we do not iterate past the initial length.
    for (i = 0; arrayLength; 1) {
        if (!(i % 10)) {
            MinWait();
        }

        Number node1Index! = NodeIndexFromID(getNode1(array[i]));
        Number node2Index! = NodeIndexFromID(getNode2(array[i]));

        Number mirrorNode1Index! = nodeMirrors[node1Index];
        Number mirrorNode2Index! = nodeMirrors[node2Index];

        // The mirrored segment would be the same as the current segment.
        // This will occur if 2 nodes on the center line of the map are connected to each other.
        if ((mirrorNode1Index == node1Index && mirrorNode2Index == node2Index)) {
            continue;
        }

        Number mirrorNode1Id = Nodes[mirrorNode1Index].Node.UniqueID;
        Number mirrorNode2Id = Nodes[mirrorNode2Index].Node.UniqueID;
        if (anyWithWait(array, arrayLength, v =>
            (getNode1(v) == mirrorNode1Id && getNode2(v) == mirrorNode2Id) ||
            (isBidirectional && getNode1(v) == mirrorNode2Id && getNode2(v) == mirrorNode1Id)))
        {
            continue;
        }

        uniqueId++;
        array += mirroredValue(
            array[i],
            uniqueId,
            mirrorNode1Id,
            mirrorNode2Id
        );
    }
}

Boolean anyWithWait<T>(in T[] array, in Number length, const T => Boolean condition)
{
    for (Number i = 0; length; 1) {
        if (condition(array[i])) {
            return true;
        }
        if (!(i % 40)) {
            MinWait();
        }
    }
    return false;
}

Vector mirror(in Vector v, in Number a, in Number b)
{
    // 'a' and 'b' can be converted into a point and direction,
    // which could be an infinite plane cutting the map into two halves.
    # Get the plane's normal. The cross product with Up will turn the plane perpendicularly.
    Vector n = Vector(a, 0, -1).Normalize().CrossProduct(Up()).Normalize();
    # Get an arbritrary point on the plane.
    Vector p = Vector(-b/a, 0, 0);
    Vector w = v - p;
    Number t = DotProduct(w, n);
    # Projection of 'v' to the plane.
    Vector r = p + t * n;

    return v + (r - v * Vector(1, 0, 1)) * 2;
}

void openMirrorConfirmationScreen()
{
    SetMenuState(MenuState.ConfirmMirror);
    buttonCollectionMain += createButton(
        label: 'Are you sure you want to mirror the map?\nPlease save your map before continuing.\nThis may take a minute.',
        posY: 0.1,
        interactable: false
    );
    buttonCollectionMain += createButton(
        label: 'no',
        posX: -0.4,
        posY: -0.3,
        defaultColor: Color.Red,
        onClick: _ => {
            SetMenuState(MenuState.Main);
        }
    );
    buttonCollectionMain += createButton(
        label: 'yes',
        posX: 0.4,
        posY: -0.3,
        defaultColor: Color.Green,
        onClick: _ => {
            SetMenuState(MenuState.Main);
            enterMirroringMode();
        }
    );
    createHelpButton(0, 0.7, null, [
        MessageLine.Separator('Map mirroring', Color.Purple),
        MessageLine.Text('\nThis tool can be used to mirror your map data for symmetrical Overwatch maps.' +
            '\n\nTo use this tool, Go to the center of the map and draw a line indicating the axis\nthat the map will be mirrored across.\n\n'),
        MessageLine.Input('Create mirror reflection line', Button.PrimaryFire),
        MessageLine.Input('Cancel map mirroring', Button.SecondaryFire),
        MessageLine.Text('\n\nEven though this operation can be reversed with the "undo" button, please\nsave your map beforehand.', Color.Yellow)
    ]);
}