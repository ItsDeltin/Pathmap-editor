import 'utility.del';

globalvar Vector cameraPosition;
globalvar Number cameraMode = 0; // 0: off, 1: on, 2: gimbal

Vector facing: FacingDirectionOf(host);
Vector facingControl: cameraMode == 2 ? facing : facing * Vector(1,0,1) ~ Normalize();
Vector cameraPos: cameraMode ? cameraPosition : EyePosition(host);

Vector watchPoint: RayCastHitPosition(cameraPos, cameraPos + facing * 100, null, null, false);

disabled rule: 'Enter freecam'
if (cameraMode)
{
    # Initial camera position.
    cameraPosition = EyePosition(host);

    # Allows the camera position to update to the eye position before we execute StartCamera.
    MinWait();

    # Override host camera.
    StartCamera(host, cameraPosition, cameraPosition + facing, 25);
    
    # Free cam
    ChaseVariableAtRate(
        cameraPosition,
        cameraPosition +
            ((facingControl * ThrottleOf(host).Z) + // Forward
            (facingControl.CrossProduct(Up()) * -ThrottleOf(host).X) + // Left
            Up() * (IsButtonHeld(host, Button.Jump) ? 1 : IsButtonHeld(host, Button.Crouch) ? -1 : 0))
            * 100,
        (ThrottleOf(host) != Vector.Zero || IsButtonHeld(host, Button.Jump) || IsButtonHeld(host, Button.Crouch)) ? cameraSpeed : 0,
        RateChaseReevaluation.DestinationAndRate
    );

    SetMoveSpeed(host, 0);
    ToggleInput(false);
}

disabled rule: 'Exit freecam'
if (!cameraMode)
{
    StopCamera(host);
    StopChasingVariable(cameraPosition);
    SetMoveSpeed(host, 100);
    ToggleInput(true);
    Teleport(host, cameraPosition);
}

void ToggleInput(Boolean enable) 'toggle input'
{
    define buttons = [Button.Ability1, Button.Ability2, Button.Crouch, Button.Interact, Button.Jump,
        Button.Melee, Button.PrimaryFire, Button.Reload, Button.SecondaryFire, Button.Ultimate];
    
    foreach (define button in buttons)
        if (enable)
            AllowButton(host, button);
        else
            DisallowButton(host, button);
}

define cameraSpeed: IsButtonHeld(host, Button.Ability1) ? 20 : 10;