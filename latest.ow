settings
{
    extensions
    {
        Spawn More Dummy Bots
        Play More Effects
        Buff Status Effects
        Debuff Status Effects
        Kinetic Explosion Effects
        Energy Explosion Effects
        Beam Effects
        Beam Sounds
        Buff and Debuff Sounds
        Explosion Sounds
    }
    modes
    {
        Skirmish
        Team Deathmatch
        {
            Game Mode Start: Manual
        }
        General
        {
            Respawn Time Scalar: 0%
        }
    }
    lobby
    {
        Max Team 1 Players: 1
        Max Team 2 Players: 0
    }
    heroes
    {
        General
        {
            Ability Cooldown Time: 0%
        }
    }
}
variables
{
    global:
        0: __loadPersist
        1: _objectVariable_0
        2: _objectVariable_1
        3: _objectVariable_2
        4: _objectVariable_3
        5: _objectVariable_4
        6: _objectVariable_5
        7: _objectVariable_6
        8: _objectVariable_7
        9: _objectVariable_8
        10: _objectVariable_9
        11: lambdaParameter_0
        12: lambdaValue_0
        13: lambdaValue_1
        14: version
        15: map
        16: _extendedGlobalCollection
        17: Nodes_Node_UniqueID
        18: Nodes_Node_Position
        19: Nodes_Selected
        20: Segments_ID
        21: Segments_Node1
        22: Segments_Node2
        23: Attributes_Value
        24: Attributes_ID
        25: Attributes_Node1
        26: Attributes_Node2
        27: NodeUniqueID
        28: SegmentUniqueID
        29: AttributeUniqueID
        30: SelectedNodeIndex
        31: SelectedNodeID
        32: SelectedSegment
        33: SelectedPlayer
        34: AttributeTexts
        35: savedPlayerLocation
        36: savedPlayerDirection
        37: inspector
        38: controlTexts
        39: controlTextOrder
        40: connectingFromNode
        41: attributeMode
        42: editorState
        43: waitlessI
        44: IsNoclipping
        45: dijkstraProgressReport
        46: Rules_Actions_Data
        47: Rules_ExecutesOnAttribute
        48: Rules_EnabledHeroes
        49: rulePage
        50: ruleAttributeSelector
        51: pagerButtons
        52: actionScrollBar
        53: heroScrollBar
        54: actionsSelected
        55: pathfinderAttributes
        56: pathfinderAttributeSelector
        57: outputLanguage
        58: buildToggles
        59: x
        60: previouslySelectedNodeID
        61: attributeIndices
        62: p1
        63: p2
        64: isSource
        65: group
        66: input
        67: returnValue___createButtonSubrou
        68: newState
        69: buttonID
        70: removeButtonIndex
        71: _classIndexes
        72: DisposeStack
        73: destroy
        74: i
        75: label
        76: UpdateStack
        77: i_0
        78: _arrayConstructor
        79: func_group
        80: destroy_0
        81: result
        82: stringBuilder
        83: objectiveDescription
        84: lines_Type
        85: lines_Content
        86: i_1
        87: index
        88: index_0
        89: index_1
        90: message
        91: isUndo
        92: direction
        93: step
        94: i_2
        95: action_Data
        96: isFinalItem
        97: n
        98: connected
        99: s
        100: value
        101: isFinalItem_0
        102: attributes
        103: a
        104: pages
    player:
        0: renderingNodes
        1: renderingSegments
        2: lastUpdatePosition
        3: releasePrimary
        4: releaseReload
        5: releaseInteract
        6: _extendedPlayerCollection
        7: buttonCollectionMain
        8: historyPage
        9: historyItems_Set
        10: historyItems_Revert
        11: dummyHighlighted
        12: dummySelected
        13: dummySavedOutlineState
        14: travelPath
        15: currentPathNode
        16: isPathfinding
        17: pathfindDestination
        18: cm_buttons_Label
        19: cm_buttons_PrimaryAction
        20: cm_buttons_SecondaryAction
        21: cm_buttons_PosX
        22: cm_buttons_PosY
        23: cm_buttons_ClickWidth
        24: cm_buttons_ClickHeight
        25: cm_buttons_DefaultColor
        26: cm_buttons_HoverColor
        27: cm_buttons_Interactable
        28: cm_buttons_Visible
        29: cm_buttons_ID
        30: cm_isInMenu
        31: cm_menuFrame
        32: cm_i
        33: cm_menuOriginalFacing
        34: cm_currActionID
        35: exportArrayStub
        36: exportArrayNumA
        37: exportArrayNumB
        38: compressionTable
        39: printCompressedDataCurrentString
        40: printCompressedDataIndex
        41: langMaps_map
        42: langMaps_ostwName
        43: langMaps_overpyName
        44: popupWindowVisible
        45: msgHudTexts
        46: msgProgressTexts
        47: msgPages
        48: msgCurrentPage
        49: b
        50: c
        51: callback
        52: i
        53: pos
        54: id
        55: catalogItem_Set
        56: catalogItem_Revert
        57: deleteNode_UniqueID
        58: deleteNode_Position
        59: deleteSegments
        60: deleteAttributes
        61: segment_ID
        62: segment_Node1
        63: segment_Node2
        64: existingAttributeIndex
        65: deleting
        66: destination
        67: players
        68: targetNodes
        69: source
        70: source_0
        71: targets
        72: attributes
        73: returnValue_Dijkstra_Parents
        74: unvisited
        75: distances
        76: parents
        77: current
        78: currentID
        79: neighbors
        80: dijkstra_Parents
        81: attributes_0
        82: executeRules
        83: a
        84: ruleAction_Data
        85: deleting_Data
        86: index
        87: primary
        88: i_0
        89: i_1
        90: lambda
        91: a_0
        92: data
        93: beginArray
        94: endArray
        95: emptyArray
        96: n
        97: connected
        98: attributes_1
        99: attrString
        100: nodeLength
        101: segmentLength
        102: attributeLength
        103: nodeLength_0
        104: segmentLength_0
        105: iterI
        106: step
        107: progressHud
        108: mapId
        109: a_1
        110: b_0
        111: justFlipXAxis
        112: nodeMirrors
        113: pos_0
        114: n_0
        115: p
        116: w
        117: t
        118: r
        119: inRadius
        120: mirrorNode1Id
        121: mirrorNode2Id
        122: returnValue_anyWithWait
        123: i_2
        124: mirrorNode1Id_0
        125: mirrorNode2Id_0
        126: returnValue_anyWithWait_0
        127: i_3
}

// Extended collection variables:
// global [0]: maxHistoryLength
// global [1]: undoText
// global [2]: redoText
// global [3]: longRunningTask
// global [4]: chooseHeroCallback
// global [5]: attribute
// global [6]: blueVisual
// global [7]: redVisual
// global [8]: attributeFloatText
// global [9]: cursorMarkerEffect
// global [10]: dummyBotHeroIcon
// global [11]: placingDummyHero
// global [12]: pathfinderActive
// global [13]: rulePageText
// global [14]: previousRuleText
// global [15]: nextRuleText
// global [16]: deleteActionText
// global [17]: moveActionsUpText
// global [18]: moveActionsDownText
// global [19]: waitTime
// global [20]: waitTimeText
// global [21]: pagerInitialized
// global [22]: pathfinderAttributesText
// global [23]: pathfinderAttributesAddText
// global [24]: cm_uniqueButtonID
// global [25]: cm_s_menuWidth
// global [26]: cm_s_menuHeight
// global [27]: cm_s_buttonClickSounds
// global [28]: cm_s_debugMode
// global [29]: cm_s_disableGameHud
// global [30]: cm_exitButtonProperties
// global [31]: selectWorkshopButton
// global [32]: selectOstwButton
// global [33]: selectOverpyButton
// global [34]: exportButton
// global [35]: preload
// global [36]: useNode
// global [37]: string
// global [38]: tempSegment
// global [39]: buttonIndex
// global [40]: buttonIndex
// global [41]: _new_NumberSelector_class_index
// global [42]: buttonIndex
// global [43]: buttonIndex
// global [44]: buttonIndex
// global [45]: posY
// global [46]: flip
// global [47]: up
// global [48]: selected
// global [49]: up
// global [50]: page
// global [51]: hero
// global [52]: i
// global [53]: i
// global [54]: removeIndex
// global [55]: i
// global [56]: ruleIndex
// player [0]: menuState
// player [1]: freecamSwitchID
// player [2]: linkModeID
// player [3]: attributeDescriptionButton
// player [4]: attributeSelector
// player [5]: mainText
// player [6]: pfstateIsStopped
// player [7]: pfstateIsJumping
// player [8]: actionLabels
// player [9]: cm_exitIconEntity
// player [10]: s
// player [11]: index
// player [12]: isHeroEnabled
// player [13]: id
// player [14]: from
// player [15]: to
// player [16]: from
// player [17]: to
// player [18]: value
// player [19]: id
// player [20]: i
// player [21]: neighborIndex
// player [22]: neighborID
// player [23]: neighborAttributes
// player [24]: newDistance
// player [25]: previous
// player [26]: originalIndices
// player [27]: ruleIndex
// player [28]: ruleIndex
// player [29]: i
// player [30]: numberOfEnabledHeroes
// player [31]: firstEnabledHero
// player [32]: toggledHeroes
// player [33]: heroListString
// player [34]: doExportHeroArray
// player [35]: joinStringResult
// player [36]: joinStringI
// player [37]: heroListCondition
// player [38]: joinStringResult
// player [39]: joinStringI
// player [40]: joinStringResult
// player [41]: joinStringI
// player [42]: attributeLength
// player [43]: node1Index
// player [44]: node2Index
// player [45]: mirrorNode1Index
// player [46]: mirrorNode2Index
// player [47]: node1Index
// player [48]: node2Index
// player [49]: mirrorNode1Index
// player [50]: mirrorNode2Index

subroutines
{
    0: Docment
    1: EnableInspector
    2: updateRenderingNodes
    3: updateRenderingSegments
    4: UpdateAttributeVisibility
    5: __createButtonSubroutine
    6: SetMenuState
    7: DestroyButton
    8: Dispose
    9: UpdateUndoInteractability
    10: updateFreecamLabel
    11: updateSegmentModeLabel
    12: SetupRuleMenu
    13: setMainLabel
    14: initiatePager
    15: Update
    16: updateRuleContent
    17: loadActionScrollbar
    18: func_group
    19: updateAllHeroIcons
    20: updateHeroIcon
    21: ExportMenu
    22: SetLanguageSelectLabels
    23: chooseHeroMenu
    24: Dijkstra
    25: OpenActionSelectMenu
    26: UpdatePathfinderAttributesList
    27: UpdatePathfinderAttributeSelecto
    28: createCursor
    29: createBorderCorners
    30: createBorderEdges
    31: createExitButton
    32: createClickAreas
    33: showMessage
    34: RemoveNodeByIndex
    35: RemoveSegmentByIndex
    36: RemoveAttributeByIndex
    37: DisableInspector
    38: StartLongRunningTask
    39: MoveSelectedActions
    40: DoMove
    41: DeleteRule
    42: OnRuleAdded
    43: OnRuleRemoved
    44: Export
    45: ExportCore
    46: ExportRules
    47: LoadCompressionTable
    48: PrintCompressedNodes
    49: LogCurrentStub
    50: PrintCompressedNeighbors
    51: AddToCompressedNeighborData
    52: ExportNeighborsPattern
    53: mirrorMap
    54: executeMapMirror
    55: showPagedMessage
}

// Rule Element Count: 1
rule("┏━【◈ Paste the actions to load a previous save here! (1/2) ◈】━┓")
{
    event
    {
        Ongoing - Global;
    }
}

// Rule Element Count: 1
rule("┗━【◈ Paste the actions to load a previous save here! (2/2) ◈】━┛")
{
    event
    {
        Ongoing - Global;
    }
}

// Rule Element Count: 217
rule("Initial Global")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 216, Action Count: 98
    // Largest Action Index: 62 using 6 Elements
    actions
    {
        Set Global Variable(_objectVariable_0, 0);
        Set Global Variable(_objectVariable_1, 0);
        Set Global Variable(_objectVariable_2, 0);
        Set Global Variable(_objectVariable_3, 0);
        Set Global Variable(_objectVariable_4, 0);
        Set Global Variable(_objectVariable_5, 0);
        Set Global Variable(_objectVariable_6, 0);
        Set Global Variable(_objectVariable_7, 0);
        Set Global Variable(_objectVariable_8, 0);
        Set Global Variable(_objectVariable_9, 0);
        Set Global Variable(lambdaParameter_0, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 0, 0);
        Set Global Variable(SelectedNodeIndex, -1);
        Set Global Variable(SelectedNodeID, -1);
        Set Global Variable(SelectedSegment, -1);
        Set Global Variable(SelectedPlayer, 0);
        Set Global Variable(AttributeTexts, Empty Array);
        Set Global Variable(inspector, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 1, -1);
        Set Global Variable At Index(_extendedGlobalCollection, 2, -1);
        Set Global Variable At Index(_extendedGlobalCollection, 3, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 4, 0);
        Set Global Variable(controlTexts, 0);
        Set Global Variable(controlTextOrder, 1);
        Set Global Variable(connectingFromNode, -1);
        Set Global Variable(attributeMode, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 5, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 6, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 7, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 8, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 9, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 10, 0);
        Set Global Variable(editorState, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 11, 0);
        Set Global Variable(waitlessI, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 12, False);
        Set Global Variable(dijkstraProgressReport, 0);
        Set Global Variable(rulePage, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 13, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 14, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 15, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 16, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 17, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 18, 0);
        Set Global Variable(ruleAttributeSelector, 0);
        Set Global Variable(pagerButtons, Empty Array);
        Set Global Variable(actionScrollBar, 0);
        Set Global Variable(heroScrollBar, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 19, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 20, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 21, 0);
        Set Global Variable(actionsSelected, 0);
        Set Global Variable(pathfinderAttributeSelector, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 22, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 23, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 24, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 25, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 26, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 27, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 28, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 29, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 30, 0);
        Set Global Variable(buildToggles, Array(True, True, False, False));
        Set Global Variable At Index(_extendedGlobalCollection, 31, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 32, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 33, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 34, 0);
        Set Global Variable At Index(_classIndexes, 0, -1);
        Set Global Variable(func_group, Empty Array);
        If(Not(Global Variable(__loadPersist)));
            Set Global Variable(__loadPersist, True);
            Set Global Variable(version, 5);
            Set Global Variable(map, Current Map);
            Set Global Variable(Nodes_Node_UniqueID, Empty Array);
            Set Global Variable(Nodes_Node_Position, Empty Array);
            Set Global Variable(Nodes_Selected, Empty Array);
            Set Global Variable(Segments_ID, Empty Array);
            Set Global Variable(Segments_Node1, Empty Array);
            Set Global Variable(Segments_Node2, Empty Array);
            Set Global Variable(Attributes_Value, Empty Array);
            Set Global Variable(Attributes_ID, Empty Array);
            Set Global Variable(Attributes_Node1, Empty Array);
            Set Global Variable(Attributes_Node2, Empty Array);
            Set Global Variable(NodeUniqueID, 1);
            Set Global Variable(SegmentUniqueID, 1);
            Set Global Variable(AttributeUniqueID, 1);
            Set Global Variable(savedPlayerLocation, 0);
            Set Global Variable(savedPlayerDirection, 0);
            Set Global Variable(IsNoclipping, 0);
            Set Global Variable(Rules_Actions_Data, Empty Array);
            Set Global Variable(Rules_ExecutesOnAttribute, Empty Array);
            Set Global Variable(Rules_EnabledHeroes, Empty Array);
            Set Global Variable(pathfinderAttributes, Empty Array);
            Set Global Variable(outputLanguage, 0);
        End;
        Set Global Variable At Index(_extendedGlobalCollection, 51, Empty Array);
        Set Global Variable At Index(_extendedGlobalCollection, 54, Empty Array);
        Set Global Variable At Index(_extendedGlobalCollection, 55, Empty Array);
    }
}

// Rule Element Count: 8
rule("Initial Player")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Action Count: 6
    // Largest Action Index: 3 using 2 Elements
    actions
    {
        Set Player Variable(Event Player, buttonCollectionMain, Empty Array);
        Set Player Variable(Event Player, historyItems_Set, Empty Array);
        Set Player Variable(Event Player, historyItems_Revert, Empty Array);
        Set Player Variable(Event Player, dummySavedOutlineState, -1);
        Set Player Variable(Event Player, msgHudTexts, Empty Array);
        Set Player Variable(Event Player, msgProgressTexts, Empty Array);
    }
}

// Rule Element Count: 4
rule("Enable inspector")
{
    event
    {
        Subroutine;
        EnableInspector;
    }

    // Element Count: 3, Action Count: 2
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Modify Global Variable(inspector, Add, 1);
        Enable Inspector Recording;
    }
}

// Rule Element Count: 74
rule("Setup: Inspector, Performance HUD, and Settings")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 73, Action Count: 12
    // Largest Action Index: 5 using 31 Elements
    actions
    {
        If(Not(Workshop Setting Toggle(Custom String("Pathmap Editor"), Custom String("Enable inspector recording"), False, 1)));
            Disable Inspector Recording;
        Else;
            Call Subroutine(EnableInspector);
        End;
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}{1}", Custom String("cap: {0} {1} {2}", Server Load, Server Load Average, Server Load Peak), Custom String("\nposition: {0}\n{1}", Position Of(Host Player), If-Then-Else(Compare(Global Variable(SelectedNodeIndex), ==, -1), Custom String(""), Custom String("Selected node index: {0}", Global Variable(SelectedNodeIndex))))), Left, 0, Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} Remember to save often!", Icon String(Warning)), Left, 0, Color(White), Color(White), Color(Yellow), Visible To And String, Default Visibility);
        Set Objective Description(All Players(All Teams), Custom String(""), Visible To);
        Set Global Variable At Index(_extendedGlobalCollection, 0, Workshop Setting Integer(Custom String("Pathmap Editor"), Custom String("Undo history length"), 20, 0, 100, 0));
        Disable Built-In Game Mode Completion;
        Set Match Time(1);
        Pause Match Time;
    }
}

// Rule Element Count: 19
rule("Player init")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Not(Is Dummy Bot(Event Player)) == True;
    }

    // Element Count: 12, Action Count: 6
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Disallow Button(Event Player, Button(Primary Fire));
        Disallow Button(Event Player, Button(Secondary Fire));
        Disallow Button(Event Player, Button(Ultimate));
        Disallow Button(Event Player, Button(Ability 1));
        Disallow Button(Event Player, Button(Ability 2));
        Disallow Button(Event Player, Button(Melee));
    }
}

// Rule Element Count: 221
rule("Preload nodes")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 220, Action Count: 11
    // Largest Action Index: 3 using 94 Elements
    actions
    {
        Set Global Variable At Index(_extendedGlobalCollection, 35, 0);
        Set Global Variable At Index(_extendedGlobalCollection, 35, 0);
        While(Compare(Value In Array(Global Variable(_extendedGlobalCollection), 35), <, 20));
            Create Effect(If-Then-Else(Compare(Evaluate Once(Value In Array(Global Variable(_extendedGlobalCollection), 35)), <, Count Of(Player Variable(Host Player, renderingNodes))), Host Player, Null), Sphere, If-Then-Else(Compare(Global Variable(SelectedNodeID), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Value In Array(Player Variable(Host Player, renderingNodes), Evaluate Once(Value In Array(Global Variable(_extendedGlobalCollection), 35))))), If-Then-Else(Value In Array(Global Variable(Nodes_Selected), Value In Array(Player Variable(Host Player, renderingNodes), Evaluate Once(Value In Array(Global Variable(_extendedGlobalCollection), 35)))), Color(Turquoise), Color(Blue)), If-Then-Else(Value In Array(Global Variable(Nodes_Selected), Value In Array(Player Variable(Host Player, renderingNodes), Evaluate Once(Value In Array(Global Variable(_extendedGlobalCollection), 35)))), Color(Lime Green), Color(White))), Add(Value In Array(Global Variable(Nodes_Node_Position), Value In Array(Player Variable(Host Player, renderingNodes), Evaluate Once(Value In Array(Global Variable(_extendedGlobalCollection), 35)))), Vector(0, 1.3, 0)), 0.3, Visible To Position Radius and Color);
            Modify Global Variable At Index(_extendedGlobalCollection, 35, Add, 1);
        End;
        Set Global Variable At Index(_extendedGlobalCollection, 35, 0);
        While(Compare(Value In Array(Global Variable(_extendedGlobalCollection), 35), <, 40));
            Create Beam Effect(Update Every Frame(If-Then-Else(Or(Or(Or(Compare(Global Variable(editorState), !=, 0), Global Variable(attributeMode)), Compare(Global Variable(SelectedSegment), !=, Evaluate Once(Value In Array(Global Variable(_extendedGlobalCollection), 35)))), Compare(Modulo(Total Time Elapsed, 1), <, 0.5)), All Players(All Teams), Null)), Brigitte Flail Chain Beam, Add(Value In Array(Global Variable(Nodes_Node_Position), Index Of Array Value(Global Variable(Nodes_Node_UniqueID), Value In Array(Global Variable(Segments_Node1), Value In Array(Player Variable(Host Player, renderingSegments), Evaluate Once(Value In Array(Global Variable(_extendedGlobalCollection), 35)))))), Vector(0, 1.3, 0)), Add(Value In Array(Global Variable(Nodes_Node_Position), Index Of Array Value(Global Variable(Nodes_Node_UniqueID), Value In Array(Global Variable(Segments_Node2), Value In Array(Player Variable(Host Player, renderingSegments), Evaluate Once(Value In Array(Global Variable(_extendedGlobalCollection), 35)))))), Vector(0, 1.3, 0)), Color(White), Visible To Position and Radius);
            Modify Global Variable At Index(_extendedGlobalCollection, 35, Add, 1);
        End;
    }
}

// Rule Element Count: 34
rule("Subroutine: Update rendering segments")
{
    event
    {
        Subroutine;
        updateRenderingSegments;
    }

    // Element Count: 33, Action Count: 2
    // Largest Action Index: 1 using 20 Elements
    actions
    {
        Set Global Variable(x, Mapped Array(Array Slice(Player Variable(Host Player, renderingNodes), 0, 10), Value In Array(Global Variable(Nodes_Node_UniqueID), Current Array Element)));
        Set Player Variable(Host Player, renderingSegments, Filtered Array(Mapped Array(Global Variable(Segments_ID), Current Array Index), Or(Array Contains(Global Variable(x), Value In Array(Global Variable(Segments_Node1), Current Array Element)), Array Contains(Global Variable(x), Value In Array(Global Variable(Segments_Node2), Current Array Element)))));
    }
}

// Rule Element Count: 13
rule("Subroutine: Update rendering nodes")
{
    event
    {
        Subroutine;
        updateRenderingNodes;
    }

    // Element Count: 12, Action Count: 2
    // Largest Action Index: 0 using 11 Elements
    actions
    {
        Set Player Variable(Host Player, renderingNodes, Sorted Array(Mapped Array(Global Variable(Nodes_Node_UniqueID), Current Array Index), Distance Between(Value In Array(Global Variable(Nodes_Node_Position), Current Array Element), Host Player)));
        Call Subroutine(updateRenderingSegments);
    }
}

// Rule Element Count: 42
rule("Update rendering nodes")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 35, Condition Count: 4
    conditions
    {
        Host Player == Event Player;
        Not(Value In Array(Global Variable(_extendedGlobalCollection), 3)) == True;
        Has Spawned(Event Player) == True;
        Or(Not(Player Variable(Event Player, lastUpdatePosition)), Compare(Distance Between(Player Variable(Event Player, lastUpdatePosition), Host Player), >, 10)) == True;
    }

    // Element Count: 6, Action Count: 4
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Set Player Variable(Event Player, lastUpdatePosition, Position Of(Host Player));
        Call Subroutine(updateRenderingNodes);
        Wait(3, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 21
rule("Snapshot")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 15, Condition Count: 2
    conditions
    {
        Not(Global Variable(inspector)) == True;
        Not(Value In Array(Global Variable(_extendedGlobalCollection), 3)) == True;
    }

    // Element Count: 5, Action Count: 4
    // Largest Action Index: 2 using 2 Elements
    actions
    {
        Enable Inspector Recording;
        "【◈ How to save & load ◈】
Click the (x) button under the timeline.

`                      ↓
•-   ≡   □   □⃩    (x)

Save the copied text into a text file. To load it, paste the contents into the first rule in the workshop editor."
        Disable Inspector Recording;
        Wait(5, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 15
rule("Main: Persistant Spawn")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 10, Condition Count: 2
    conditions
    {
        Has Spawned(Host Player) == True;
        Global Variable(savedPlayerLocation) == True;
    }

    // Element Count: 4, Action Count: 2
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Teleport(Host Player, Global Variable(savedPlayerLocation));
        Set Facing(Host Player, Global Variable(savedPlayerDirection), To World);
    }
}

// Rule Element Count: 222
rule("Subroutine: Update attribute visibility")
{
    event
    {
        Subroutine;
        UpdateAttributeVisibility;
    }

    // Element Count: 221, Action Count: 23
    // Largest Action Index: 20 using 31 Elements
    actions
    {
        While(Count Of(Global Variable(AttributeTexts)));
            Destroy In-World Text(First Of(Global Variable(AttributeTexts)));
            Modify Global Variable(AttributeTexts, Remove From Array By Index, 0);
        End;
        Set Global Variable At Index(_extendedGlobalCollection, 36, If-Then-Else(Compare(Global Variable(SelectedNodeID), !=, -1), Global Variable(SelectedNodeID), If-Then-Else(Compare(Global Variable(connectingFromNode), !=, -1), Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(connectingFromNode)), -1)));
        If(Compare(Value In Array(Global Variable(_extendedGlobalCollection), 36), ==, -1));
            Skip(16);
        End;
        Set Global Variable(attributeIndices, Filtered Array(Mapped Array(Global Variable(Attributes_Value), Current Array Index), Or(Compare(Value In Array(Global Variable(Attributes_Node1), Current Array Element), ==, Value In Array(Global Variable(_extendedGlobalCollection), 36)), Compare(Value In Array(Global Variable(Attributes_Node2), Current Array Element), ==, Value In Array(Global Variable(_extendedGlobalCollection), 36)))));
        While(Count Of(Global Variable(attributeIndices)));
            Set Global Variable(p1, Add(Value In Array(Global Variable(Nodes_Node_Position), Index Of Array Value(Global Variable(Nodes_Node_UniqueID), Value In Array(Global Variable(Attributes_Node1), First Of(Global Variable(attributeIndices))))), Vector(0, 1.3, 0)));
            Set Global Variable(p2, Add(Value In Array(Global Variable(Nodes_Node_Position), Index Of Array Value(Global Variable(Nodes_Node_UniqueID), Value In Array(Global Variable(Attributes_Node2), First Of(Global Variable(attributeIndices))))), Vector(0, 1.3, 0)));
            Set Global Variable(isSource, Compare(Value In Array(Global Variable(Attributes_Node1), First Of(Global Variable(attributeIndices))), ==, Value In Array(Global Variable(_extendedGlobalCollection), 36)));
            Set Global Variable(group, Filtered Array(Global Variable(attributeIndices), And(Compare(Value In Array(Global Variable(Attributes_Node1), First Of(Global Variable(attributeIndices))), ==, Value In Array(Global Variable(Attributes_Node1), Current Array Element)), Compare(Value In Array(Global Variable(Attributes_Node2), First Of(Global Variable(attributeIndices))), ==, Value In Array(Global Variable(Attributes_Node2), Current Array Element)))));
            Modify Global Variable(attributeIndices, Remove From Array By Value, Global Variable(group));
            Set Global Variable At Index(_extendedGlobalCollection, 37, Custom String(""));
            While(Count Of(Global Variable(group)));
                Set Global Variable At Index(_extendedGlobalCollection, 37, Custom String(" {0}\n{1}{2}{1}", Value In Array(Global Variable(_extendedGlobalCollection), 37), If-Then-Else(Global Variable(isSource), Custom String("◈"), Custom String("")), Value In Array(Global Variable(Attributes_Value), First Of(Global Variable(group)))));
                Modify Global Variable(group, Remove From Array By Index, 0);
            End;
            Create In-World Text(All Players(All Teams), Value In Array(Global Variable(_extendedGlobalCollection), 37), Add(Global Variable(p1), Multiply(Subtract(Global Variable(p2), Global Variable(p1)), 0.3)), 2.5, Do Not Clip, Visible To, If-Then-Else(Global Variable(isSource), Color(Sky Blue), Custom Color(255, 115, 0, 100)), Default Visibility);
            Modify Global Variable(AttributeTexts, Append To Array, Last Text ID);
        End;
    }
}

// Rule Element Count: 303
rule("Main: Selection loop")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 57, Condition Count: 6
    conditions
    {
        Has Spawned(Host Player) == True;
        Not(Player Variable(Host Player, cm_isInMenu)) == True;
        Not(Player Variable(Host Player, popupWindowVisible)) == True;
        Not(Value In Array(Global Variable(_extendedGlobalCollection), 3)) == True;
        Or(Compare(Global Variable(savedPlayerLocation), !=, Position Of(Host Player)), Compare(Global Variable(savedPlayerDirection), !=, Facing Direction Of(Host Player))) == True;
        Or(Count Of(Global Variable(Nodes_Node_UniqueID)), Is True For Any(All Players(All Teams), Is Dummy Bot(Current Array Element))) == True;
    }

    // Element Count: 245, Action Count: 30
    // Largest Action Index: 5 using 63 Elements
    actions
    {
        Set Global Variable(savedPlayerLocation, Position Of(Host Player));
        Set Global Variable(savedPlayerDirection, Facing Direction Of(Host Player));
        Set Player Variable(All Players(All Teams), dummyHighlighted, False);
        Set Global Variable(SelectedPlayer, Ray Cast Hit Player(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), All Players(All Teams), Host Player, False));
        Set Player Variable(Global Variable(SelectedPlayer), dummyHighlighted, True);
        Set Global Variable(SelectedNodeIndex, First Of(Append To Array(Filtered Array(Sorted Array(Mapped Array(Global Variable(Nodes_Node_UniqueID), Current Array Index), Distance Between(Add(Value In Array(Global Variable(Nodes_Node_Position), Current Array Element), Vector(0, 1.3, 0)), Eye Position(Host Player))), Compare(Distance Between(Add(Value In Array(Global Variable(Nodes_Node_Position), Current Array Element), Vector(0, 1.3, 0)), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), Distance Between(Add(Value In Array(Global Variable(Nodes_Node_Position), Current Array Element), Vector(0, 1.3, 0)), Eye Position(Host Player))))), <, 0.3)), -1)));
        If(And(Compare(Global Variable(SelectedPlayer), !=, Null), Compare(Global Variable(SelectedNodeIndex), !=, -1)));
            If(Compare(Distance Between(Add(Value In Array(Global Variable(Nodes_Node_Position), Global Variable(SelectedNodeIndex)), Vector(0, 1.3, 0)), Eye Position(Host Player)), >, Distance Between(Position Of(Global Variable(SelectedPlayer)), Eye Position(Host Player))));
                Set Global Variable(SelectedNodeIndex, -1);
            Else;
                Set Global Variable(SelectedPlayer, Null);
            End;
        End;
        Set Global Variable(previouslySelectedNodeID, Global Variable(SelectedNodeID));
        If(Compare(Global Variable(SelectedNodeIndex), ==, -1));
            Set Global Variable(SelectedNodeID, -1);
        Else;
            Set Global Variable(SelectedNodeID, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(SelectedNodeIndex)));
        End;
        If(Compare(Global Variable(previouslySelectedNodeID), !=, Global Variable(SelectedNodeID)));
            Call Subroutine(UpdateAttributeVisibility);
            If(Or(Compare(Global Variable(connectingFromNode), ==, -1), Compare(Global Variable(SelectedNodeID), ==, -1)));
                Set Global Variable(SelectedSegment, -1);
            Else;
                Set Global Variable At Index(_extendedGlobalCollection, 38, Filtered Array(Mapped Array(Global Variable(Segments_ID), Current Array Index), Or(And(Compare(Value In Array(Global Variable(Segments_Node1), Current Array Element), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(SelectedNodeIndex))), Compare(Value In Array(Global Variable(Segments_Node2), Current Array Element), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(connectingFromNode)))), And(Compare(Value In Array(Global Variable(Segments_Node2), Current Array Element), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(SelectedNodeIndex))), Compare(Value In Array(Global Variable(Segments_Node1), Current Array Element), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(connectingFromNode)))))));
                Set Global Variable(SelectedSegment, If-Then-Else(Compare(Value In Array(Global Variable(_extendedGlobalCollection), 38), ==, Empty Array), -1, First Of(Value In Array(Global Variable(_extendedGlobalCollection), 38))));
            End;
        End;
        Wait(0.1, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 19
rule("Release primary")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, releasePrimary) == True;
        Not(Is Button Held(Event Player, Button(Primary Fire))) == True;
    }

    // Element Count: 4, Action Count: 1
    actions
    {
        Set Player Variable(Event Player, releasePrimary, Not(Player Variable(Event Player, releasePrimary)));
    }
}

// Rule Element Count: 19
rule("Release reload")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, releaseReload) == True;
        Not(Is Button Held(Event Player, Button(Reload))) == True;
    }

    // Element Count: 4, Action Count: 1
    actions
    {
        Set Player Variable(Event Player, releaseReload, Not(Player Variable(Event Player, releaseReload)));
    }
}

// Rule Element Count: 19
rule("Release Interact")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, releaseInteract) == True;
        Not(Is Button Held(Event Player, Button(Interact))) == True;
    }

    // Element Count: 4, Action Count: 1
    actions
    {
        Set Player Variable(Event Player, releaseInteract, Not(Player Variable(Event Player, releaseInteract)));
    }
}

// Rule Element Count: 71
rule("CM: Create button")
{
    event
    {
        Subroutine;
        __createButtonSubroutine;
    }

    // Element Count: 70, Action Count: 14
    // Largest Action Index: 2 using 7 Elements
    actions
    {
        Modify Global Variable At Index(_extendedGlobalCollection, 24, Add, 1);
        Modify Player Variable(Event Player, cm_buttons_Label, Append To Array, First Of(Global Variable(input)));
        Modify Player Variable(Event Player, cm_buttons_PrimaryAction, Append To Array, Array(Value In Array(Global Variable(input), 1)));
        Modify Player Variable(Event Player, cm_buttons_SecondaryAction, Append To Array, Array(Value In Array(Global Variable(input), 2)));
        Modify Player Variable(Event Player, cm_buttons_PosX, Append To Array, Value In Array(Global Variable(input), 3));
        Modify Player Variable(Event Player, cm_buttons_PosY, Append To Array, Value In Array(Global Variable(input), 4));
        Modify Player Variable(Event Player, cm_buttons_ClickWidth, Append To Array, Value In Array(Global Variable(input), 5));
        Modify Player Variable(Event Player, cm_buttons_ClickHeight, Append To Array, Value In Array(Global Variable(input), 6));
        Modify Player Variable(Event Player, cm_buttons_DefaultColor, Append To Array, Value In Array(Global Variable(input), 7));
        Modify Player Variable(Event Player, cm_buttons_HoverColor, Append To Array, Value In Array(Global Variable(input), 8));
        Modify Player Variable(Event Player, cm_buttons_Interactable, Append To Array, Value In Array(Global Variable(input), 9));
        Modify Player Variable(Event Player, cm_buttons_Visible, Append To Array, Value In Array(Global Variable(input), 10));
        Modify Player Variable(Event Player, cm_buttons_ID, Append To Array, Value In Array(Global Variable(_extendedGlobalCollection), 24));
        Set Global Variable(returnValue___createButtonSubrou, Value In Array(Global Variable(_extendedGlobalCollection), 24));
    }
}

// Rule Element Count: 31
rule("CM: Destroy button")
{
    event
    {
        Subroutine;
        DestroyButton;
    }

    // Element Count: 30, Action Count: 13
    // Largest Action Index: 0 using 6 Elements
    actions
    {
        Set Global Variable(removeButtonIndex, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Global Variable(buttonID)));
        Modify Player Variable(Event Player, cm_buttons_Label, Remove From Array By Index, Global Variable(removeButtonIndex));
        Modify Player Variable(Event Player, cm_buttons_PrimaryAction, Remove From Array By Index, Global Variable(removeButtonIndex));
        Modify Player Variable(Event Player, cm_buttons_SecondaryAction, Remove From Array By Index, Global Variable(removeButtonIndex));
        Modify Player Variable(Event Player, cm_buttons_PosX, Remove From Array By Index, Global Variable(removeButtonIndex));
        Modify Player Variable(Event Player, cm_buttons_PosY, Remove From Array By Index, Global Variable(removeButtonIndex));
        Modify Player Variable(Event Player, cm_buttons_ClickWidth, Remove From Array By Index, Global Variable(removeButtonIndex));
        Modify Player Variable(Event Player, cm_buttons_ClickHeight, Remove From Array By Index, Global Variable(removeButtonIndex));
        Modify Player Variable(Event Player, cm_buttons_DefaultColor, Remove From Array By Index, Global Variable(removeButtonIndex));
        Modify Player Variable(Event Player, cm_buttons_HoverColor, Remove From Array By Index, Global Variable(removeButtonIndex));
        Modify Player Variable(Event Player, cm_buttons_Interactable, Remove From Array By Index, Global Variable(removeButtonIndex));
        Modify Player Variable(Event Player, cm_buttons_Visible, Remove From Array By Index, Global Variable(removeButtonIndex));
        Modify Player Variable(Event Player, cm_buttons_ID, Remove From Array By Index, Global Variable(removeButtonIndex));
    }
}

// Rule Element Count: 79
rule("(Subroutine) dispose scrollbar")
{
    event
    {
        Subroutine;
        Dispose;
    }

    // Element Count: 78, Action Count: 26
    // Largest Action Index: 2 using 9 Elements
    actions
    {
        Set Global Variable(destroy, Value In Array(Global Variable(_objectVariable_4), Global Variable(DisposeStack)));
        For Global Variable(i, 0, Count Of(Global Variable(destroy)), 1);
            If(Compare(Value In Array(Global Variable(destroy), Global Variable(i)), !=, -1));
                Set Global Variable(buttonID, Value In Array(Global Variable(destroy), Global Variable(i)));
                Call Subroutine(DestroyButton);
            End;
        End;
        Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_5), Global Variable(DisposeStack)));
        Call Subroutine(DestroyButton);
        Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_6), Global Variable(DisposeStack)));
        Call Subroutine(DestroyButton);
        If(Global Variable(DisposeStack));
            Set Global Variable At Index(_classIndexes, Global Variable(DisposeStack), 0);
            Set Global Variable At Index(_objectVariable_0, Global Variable(DisposeStack), 0);
            Set Global Variable At Index(_objectVariable_1, Global Variable(DisposeStack), 0);
            Set Global Variable At Index(_objectVariable_2, Global Variable(DisposeStack), 0);
            Set Global Variable At Index(_objectVariable_3, Global Variable(DisposeStack), 0);
            Set Global Variable At Index(_objectVariable_4, Global Variable(DisposeStack), 0);
            Set Global Variable At Index(_objectVariable_5, Global Variable(DisposeStack), 0);
            Set Global Variable At Index(_objectVariable_6, Global Variable(DisposeStack), 0);
            Set Global Variable At Index(_objectVariable_7, Global Variable(DisposeStack), 0);
            Set Global Variable At Index(_objectVariable_8, Global Variable(DisposeStack), 0);
            Set Global Variable At Index(_objectVariable_9, Global Variable(DisposeStack), 0);
        Else;
            Log To Inspector(Custom String("[Error] Attempted to delete invalid reference in scroll menu.del at line 164"));
        End;
    }
}

// Rule Element Count: 89
rule("CM: Update undo interactability")
{
    event
    {
        Subroutine;
        UpdateUndoInteractability;
    }

    // Element Count: 88, Action Count: 8
    // Largest Action Index: 6 using 18 Elements
    actions
    {
        If(Compare(Value In Array(Global Variable(_extendedGlobalCollection), 1), !=, -1));
            Set Global Variable At Index(_extendedGlobalCollection, 39, Index Of Array Value(Player Variable(Host Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 1)));
            Set Player Variable At Index(Host Player, cm_buttons_Interactable, Value In Array(Global Variable(_extendedGlobalCollection), 39), Compare(Player Variable(Event Player, historyPage), >, 0));
            Set Player Variable At Index(Host Player, cm_buttons_DefaultColor, Value In Array(Global Variable(_extendedGlobalCollection), 39), If-Then-Else(Compare(Player Variable(Event Player, historyPage), >, 0), Color(Aqua), Color(Gray)));
            Set Global Variable At Index(_extendedGlobalCollection, 40, Index Of Array Value(Player Variable(Host Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 2)));
            Set Player Variable At Index(Host Player, cm_buttons_Interactable, Value In Array(Global Variable(_extendedGlobalCollection), 40), Compare(Player Variable(Event Player, historyPage), <, Count Of(Player Variable(Event Player, historyItems_Set))));
            Set Player Variable At Index(Host Player, cm_buttons_DefaultColor, Value In Array(Global Variable(_extendedGlobalCollection), 40), If-Then-Else(Compare(Player Variable(Event Player, historyPage), <, Count Of(Player Variable(Event Player, historyItems_Set))), Color(Yellow), Color(Gray)));
        End;
    }
}

// Rule Element Count: 17
rule("(Subroutine) CM: Update freecam label")
{
    event
    {
        Subroutine;
        updateFreecamLabel;
    }

    // Element Count: 16, Action Count: 1
    actions
    {
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1)), If-Then-Else(Global Variable(IsNoclipping), Custom String("noclip: on"), Custom String("noclip: off")));
    }
}

// Rule Element Count: 162
rule("(Subroutine) CM: Update segment mode label")
{
    event
    {
        Subroutine;
        updateSegmentModeLabel;
    }

    // Element Count: 161, Action Count: 13
    // Largest Action Index: 1 using 23 Elements
    actions
    {
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), If-Then-Else(Not(Global Variable(attributeMode)), Custom String("Connect: Paths"), Custom String("          Connect: Attributes")));
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)), If-Then-Else(Global Variable(attributeMode), Custom Color(240, 240, 240, 255), Color(Gray)));
        If(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4));
            Set Global Variable At Index(_extendedGlobalCollection, 42, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_objectVariable_1), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4))));
            Set Player Variable At Index(Event Player, cm_buttons_Interactable, Value In Array(Global Variable(_extendedGlobalCollection), 42), Global Variable(attributeMode));
            Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Value In Array(Global Variable(_extendedGlobalCollection), 42), If-Then-Else(Global Variable(attributeMode), Color(Yellow), Custom Color(112, 101, 0, 140)));
            Set Global Variable At Index(_extendedGlobalCollection, 43, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_objectVariable_3), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4))));
            Set Player Variable At Index(Event Player, cm_buttons_Interactable, Value In Array(Global Variable(_extendedGlobalCollection), 43), Global Variable(attributeMode));
            Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Value In Array(Global Variable(_extendedGlobalCollection), 43), If-Then-Else(Global Variable(attributeMode), Color(White), Custom Color(217, 217, 217, 69)));
            Set Global Variable At Index(_extendedGlobalCollection, 44, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_objectVariable_2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4))));
            Set Player Variable At Index(Event Player, cm_buttons_Interactable, Value In Array(Global Variable(_extendedGlobalCollection), 44), Global Variable(attributeMode));
            Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Value In Array(Global Variable(_extendedGlobalCollection), 44), If-Then-Else(Global Variable(attributeMode), Color(White), Custom Color(217, 217, 217, 69)));
        End;
    }
}

// Rule Element Count: 12
rule("(Subroutine) CM: Set main label")
{
    event
    {
        Subroutine;
        setMainLabel;
    }

    // Element Count: 11, Action Count: 1
    actions
    {
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 5)), Global Variable(label));
    }
}

// Rule Element Count: 283
rule("(Subroutine) CM: Update scrollbar")
{
    event
    {
        Subroutine;
        Update;
    }

    // Element Count: 282, Action Count: 26
    // Largest Action Index: 12 using 52 Elements
    actions
    {
        For Global Variable(i_0, 0, Count Of(Value In Array(Global Variable(_objectVariable_3), Global Variable(UpdateStack))), 1);
            If(Or(Compare(Global Variable(i_0), <, Value In Array(Global Variable(_objectVariable_8), Global Variable(UpdateStack))), Compare(Global Variable(i_0), >=, Add(Value In Array(Global Variable(_objectVariable_8), Global Variable(UpdateStack)), Value In Array(Global Variable(_objectVariable_7), Global Variable(UpdateStack))))));
                If(Compare(Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(UpdateStack)), Global Variable(i_0)), !=, -1));
                    Set Global Variable(buttonID, Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(UpdateStack)), Global Variable(i_0)));
                    Call Subroutine(DestroyButton);
                    Set Global Variable(_arrayConstructor, Value In Array(Global Variable(_objectVariable_4), Global Variable(UpdateStack)));
                    Set Global Variable At Index(_arrayConstructor, Global Variable(i_0), -1);
                    Set Global Variable At Index(_objectVariable_4, Global Variable(UpdateStack), Global Variable(_arrayConstructor));
                End;
            Else;
                Set Global Variable At Index(_extendedGlobalCollection, 45, Subtract(Value In Array(Global Variable(_objectVariable_0), Global Variable(UpdateStack)), Multiply(Add(Subtract(Global Variable(i_0), Value In Array(Global Variable(_objectVariable_8), Global Variable(UpdateStack))), 1), 0.175)));
                If(Compare(Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(UpdateStack)), Global Variable(i_0)), ==, -1));
                    Set Global Variable(input, Array(Value In Array(Value In Array(Global Variable(_objectVariable_3), Global Variable(UpdateStack)), Global Variable(i_0)), Array(20, Global Variable(UpdateStack), Add(Value In Array(Global Variable(_extendedGlobalCollection), 24), 1)), 0, Value In Array(Global Variable(_objectVariable_1), Global Variable(UpdateStack)), Value In Array(Global Variable(_extendedGlobalCollection), 45), 1.4, 0.175, Value In Array(Value In Array(Global Variable(_objectVariable_2), Global Variable(UpdateStack)), Global Variable(i_0)), Color(Blue), True, True));
                    Call Subroutine(__createButtonSubroutine);
                    Set Global Variable(_arrayConstructor, Value In Array(Global Variable(_objectVariable_4), Global Variable(UpdateStack)));
                    Set Global Variable At Index(_arrayConstructor, Global Variable(i_0), Global Variable(returnValue___createButtonSubrou));
                    Set Global Variable At Index(_objectVariable_4, Global Variable(UpdateStack), Global Variable(_arrayConstructor));
                Else;
                    Set Player Variable At Index(Event Player, cm_buttons_PosY, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(UpdateStack)), Global Variable(i_0))), Value In Array(Global Variable(_extendedGlobalCollection), 45));
                End;
            End;
        End;
        Set Player Variable At Index(Event Player, cm_buttons_Interactable, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_objectVariable_5), Global Variable(UpdateStack))), Compare(Value In Array(Global Variable(_objectVariable_8), Global Variable(UpdateStack)), >, 0));
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_objectVariable_5), Global Variable(UpdateStack))), If-Then-Else(Compare(Value In Array(Global Variable(_objectVariable_8), Global Variable(UpdateStack)), >, 0), Color(White), Color(Gray)));
        Set Player Variable At Index(Event Player, cm_buttons_Interactable, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_objectVariable_6), Global Variable(UpdateStack))), Compare(Value In Array(Global Variable(_objectVariable_8), Global Variable(UpdateStack)), <, Subtract(Count Of(Value In Array(Global Variable(_objectVariable_3), Global Variable(UpdateStack))), Value In Array(Global Variable(_objectVariable_7), Global Variable(UpdateStack)))));
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_objectVariable_6), Global Variable(UpdateStack))), If-Then-Else(Compare(Value In Array(Global Variable(_objectVariable_8), Global Variable(UpdateStack)), <, Subtract(Count Of(Value In Array(Global Variable(_objectVariable_3), Global Variable(UpdateStack))), Value In Array(Global Variable(_objectVariable_7), Global Variable(UpdateStack)))), Color(White), Color(Gray)));
    }
}

// Rule Element Count: 155
rule("(Subroutine) CM: Load action scrollbar")
{
    event
    {
        Subroutine;
        loadActionScrollbar;
    }

    // Element Count: 154, Action Count: 18
    // Largest Action Index: 10 using 34 Elements
    actions
    {
        Set Global Variable(actionScrollBar, Index Of Array Value(Global Variable(_classIndexes), 0));
        Set Global Variable(actionScrollBar, If-Then-Else(Compare(Global Variable(actionScrollBar), ==, -1), Count Of(Global Variable(_classIndexes)), Global Variable(actionScrollBar)));
        Set Global Variable At Index(_classIndexes, Global Variable(actionScrollBar), 2);
        Set Global Variable At Index(_objectVariable_1, Global Variable(actionScrollBar), -1.5);
        Set Global Variable At Index(_objectVariable_0, Global Variable(actionScrollBar), 0.5);
        Set Global Variable At Index(_objectVariable_3, Global Variable(actionScrollBar), Mapped Array(Value In Array(Global Variable(Rules_Actions_Data), Global Variable(rulePage)), Custom String("{0} {1}", Value In Array(Value In Array(Player Variable(Host Player, _extendedPlayerCollection), 8), First Of(Current Array Element)), Value In Array(Current Array Element, 1))));
        Set Global Variable At Index(_objectVariable_2, Global Variable(actionScrollBar), Mapped Array(Value In Array(Global Variable(_objectVariable_3), Global Variable(actionScrollBar)), Color(White)));
        Set Global Variable At Index(_objectVariable_4, Global Variable(actionScrollBar), Mapped Array(Value In Array(Global Variable(_objectVariable_3), Global Variable(actionScrollBar)), -1));
        Set Global Variable At Index(_objectVariable_9, Global Variable(actionScrollBar), Array(14, Null));
        Set Global Variable At Index(_objectVariable_7, Global Variable(actionScrollBar), 6);
        Set Global Variable(input, Array(Custom String("↑"), Array(18, Global Variable(actionScrollBar), 1), Array(18, Global Variable(actionScrollBar), 6), -1.5, 0.5, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_5, Global Variable(actionScrollBar), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("↓"), Array(19, Global Variable(actionScrollBar), 1), Array(19, Global Variable(actionScrollBar), 6), -1.5, -0.725, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_6, Global Variable(actionScrollBar), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(UpdateStack, Global Variable(actionScrollBar));
        Call Subroutine(Update);
    }
}

// Rule Element Count: 219
rule("Subroutine: Update hero icon")
{
    event
    {
        Subroutine;
        updateHeroIcon;
    }

    // Element Count: 218, Action Count: 13
    // Largest Action Index: 8 using 37 Elements
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 12, Compare(First Of(Value In Array(Global Variable(Rules_EnabledHeroes), Global Variable(rulePage))), !=, Array Contains(Array Slice(Value In Array(Global Variable(Rules_EnabledHeroes), Global Variable(rulePage)), 1, 1000), Value In Array(All Heroes, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11)))));
        "Update button color"
        If(And(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11), >=, Value In Array(Global Variable(_objectVariable_8), Global Variable(heroScrollBar))), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11), <, Add(Value In Array(Global Variable(_objectVariable_8), Global Variable(heroScrollBar)), Value In Array(Global Variable(_objectVariable_7), Global Variable(heroScrollBar))))));
            Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(heroScrollBar)), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11))), If-Then-Else(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 12), Color(Green), Color(Red)));
        End;
        Set Global Variable(_arrayConstructor, Value In Array(Global Variable(_objectVariable_2), Global Variable(heroScrollBar)));
        Set Global Variable At Index(_arrayConstructor, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11), If-Then-Else(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 12), Color(Green), Color(Red)));
        Set Global Variable At Index(_objectVariable_2, Global Variable(heroScrollBar), Global Variable(_arrayConstructor));
        "Update button label"
        If(And(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11), >=, Value In Array(Global Variable(_objectVariable_8), Global Variable(heroScrollBar))), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11), <, Add(Value In Array(Global Variable(_objectVariable_8), Global Variable(heroScrollBar)), Value In Array(Global Variable(_objectVariable_7), Global Variable(heroScrollBar))))));
            Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(heroScrollBar)), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11))), Custom String("{0} {1}", Hero Icon String(Value In Array(All Heroes, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11))), If-Then-Else(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 12), Custom String("yes"), Custom String("no"))));
        End;
        Set Global Variable(_arrayConstructor, Value In Array(Global Variable(_objectVariable_3), Global Variable(heroScrollBar)));
        Set Global Variable At Index(_arrayConstructor, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11), Custom String("{0} {1}", Hero Icon String(Value In Array(All Heroes, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11))), If-Then-Else(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 12), Custom String("yes"), Custom String("no"))));
        Set Global Variable At Index(_objectVariable_3, Global Variable(heroScrollBar), Global Variable(_arrayConstructor));
    }
}

// Rule Element Count: 10
rule("CM: Update all hero icons")
{
    event
    {
        Subroutine;
        updateAllHeroIcons;
    }

    // Element Count: 9, Action Count: 4
    // Largest Action Index: 0 using 4 Elements
    actions
    {
        For Global Variable(waitlessI, 0, Count Of(All Heroes), 1);
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 11, Global Variable(waitlessI));
            Call Subroutine(updateHeroIcon);
        End;
    }
}

// Rule Element Count: 153
rule("CM: Update rule content")
{
    event
    {
        Subroutine;
        updateRuleContent;
    }

    // Element Count: 152, Action Count: 21
    // Largest Action Index: 4 using 23 Elements
    actions
    {
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 13)), Custom String("{0}{1}", Custom String(" rule "), Add(Global Variable(rulePage), 1)));
        Set Player Variable At Index(Event Player, cm_buttons_Interactable, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 14)), Compare(Global Variable(rulePage), !=, 0));
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 14)), If-Then-Else(Compare(Global Variable(rulePage), !=, 0), Color(White), Color(Gray)));
        Set Player Variable At Index(Event Player, cm_buttons_Interactable, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 15)), Compare(Global Variable(rulePage), <, Subtract(Count Of(Global Variable(Rules_Actions_Data)), 1)));
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 15)), If-Then-Else(Compare(Global Variable(rulePage), <, Subtract(Count Of(Global Variable(Rules_Actions_Data)), 1)), Color(White), Color(Gray)));
        If(Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 3));
            If(Global Variable(actionScrollBar));
                Set Global Variable(DisposeStack, Global Variable(actionScrollBar));
                Call Subroutine(Dispose);
                Set Global Variable(actionScrollBar, Null);
            End;
            Call Subroutine(loadActionScrollbar);
        End;
        If(Compare(Global Variable(ruleAttributeSelector), !=, Null));
            Set Global Variable At Index(_objectVariable_0, Global Variable(ruleAttributeSelector), Value In Array(Global Variable(Rules_ExecutesOnAttribute), Global Variable(rulePage)));
            Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_objectVariable_1), Global Variable(ruleAttributeSelector))), Custom String(" {0} ", Value In Array(Global Variable(_objectVariable_0), Global Variable(ruleAttributeSelector))));
            Modify Global Variable(lambdaParameter_0, Append To Array, Array(Value In Array(Global Variable(_objectVariable_0), Global Variable(ruleAttributeSelector))));
            Modify Global Variable(func_group, Append To Array, Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(ruleAttributeSelector))));
            Call Subroutine(func_group);
        End;
        Call Subroutine(updateAllHeroIcons);
    }
}

// Rule Element Count: 631
rule("CM: Initiate pager")
{
    event
    {
        Subroutine;
        initiatePager;
    }

    // Element Count: 630, Action Count: 69
    // Largest Action Index: 10 using 36 Elements
    actions
    {
        If(Value In Array(Global Variable(_extendedGlobalCollection), 21));
            Skip(67);
        End;
        Set Global Variable At Index(_extendedGlobalCollection, 21, True);
        Set Global Variable(input, Array(Custom String("←"), 15, 0, -0.35, 0.55, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 14, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("→"), 14, 0, 0.35, 0.55, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 15, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("add action..."), Array(35, Array(8, Null)), Array(36, Array(8, Null)), -1.5, 0.75, 1.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Global Variable(pagerButtons, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String(" attribute"), 0, 0, 0, 0.3, 0.2, 0.2, Color(White), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Global Variable(pagerButtons, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(ruleAttributeSelector, Index Of Array Value(Global Variable(_classIndexes), 0));
        Set Global Variable(ruleAttributeSelector, If-Then-Else(Compare(Global Variable(ruleAttributeSelector), ==, -1), Count Of(Global Variable(_classIndexes)), Global Variable(ruleAttributeSelector)));
        Set Global Variable At Index(_classIndexes, Global Variable(ruleAttributeSelector), 1);
        Set Global Variable At Index(_objectVariable_0, Global Variable(ruleAttributeSelector), Value In Array(Global Variable(Rules_ExecutesOnAttribute), Global Variable(rulePage)));
        Set Global Variable(input, Array(Custom String(" {0} ", Value In Array(Global Variable(Rules_ExecutesOnAttribute), Global Variable(rulePage))), 0, 0, 0, 0.1, 0.2, 0.2, Color(Yellow), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_1, Global Variable(ruleAttributeSelector), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("→"), Array(7, Global Variable(ruleAttributeSelector)), Array(8, Global Variable(ruleAttributeSelector)), 0.1775, 0.1, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_3, Global Variable(ruleAttributeSelector), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("←"), Array(9, Global Variable(ruleAttributeSelector)), Array(10, Global Variable(ruleAttributeSelector)), -0.1775, 0.1, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_2, Global Variable(ruleAttributeSelector), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable At Index(_objectVariable_4, Global Variable(ruleAttributeSelector), Array(9, Null));
        Set Global Variable(input, Array(Custom String("delete action"), 26, 0, 0, -0.5, 1.3, 0.2, Custom Color(252, 0, 0, 50.745), Color(Rose), False, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 16, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("↑"), Array(35, Array(10, Null)), Array(36, Array(10, Null)), -0.1, -0.7, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 17, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("↓"), Array(35, Array(11, Null)), Array(36, Array(11, Null)), 0.1, -0.7, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 18, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String(" rule 1"), 0, 0, 0, 0.55, 0.7, 0.2, Color(White), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 13, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(heroScrollBar, Index Of Array Value(Global Variable(_classIndexes), 0));
        Set Global Variable(heroScrollBar, If-Then-Else(Compare(Global Variable(heroScrollBar), ==, -1), Count Of(Global Variable(_classIndexes)), Global Variable(heroScrollBar)));
        Set Global Variable At Index(_classIndexes, Global Variable(heroScrollBar), 2);
        Set Global Variable At Index(_objectVariable_1, Global Variable(heroScrollBar), 1.75);
        Set Global Variable At Index(_objectVariable_0, Global Variable(heroScrollBar), 0.5);
        Set Global Variable At Index(_objectVariable_3, Global Variable(heroScrollBar), Mapped Array(All Heroes, Null));
        Set Global Variable At Index(_objectVariable_2, Global Variable(heroScrollBar), Mapped Array(Value In Array(Global Variable(_objectVariable_3), Global Variable(heroScrollBar)), Color(White)));
        Set Global Variable At Index(_objectVariable_4, Global Variable(heroScrollBar), Mapped Array(Value In Array(Global Variable(_objectVariable_3), Global Variable(heroScrollBar)), -1));
        Set Global Variable At Index(_objectVariable_9, Global Variable(heroScrollBar), Array(12, Null));
        Set Global Variable At Index(_objectVariable_7, Global Variable(heroScrollBar), 4);
        Set Global Variable(input, Array(Custom String("↑"), Array(18, Global Variable(heroScrollBar), 1), Array(18, Global Variable(heroScrollBar), 4), 1.75, 0.5, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_5, Global Variable(heroScrollBar), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("↓"), Array(19, Global Variable(heroScrollBar), 1), Array(19, Global Variable(heroScrollBar), 4), 1.75, -0.375, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_6, Global Variable(heroScrollBar), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(UpdateStack, Global Variable(heroScrollBar));
        Call Subroutine(Update);
        Set Global Variable(input, Array(Custom String("toggle all"), 29, 0, 1.75, 0.7, 0.8, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Global Variable(pagerButtons, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("delete rule"), Array(35, Array(13, Null)), Array(36, Array(13, Null)), 0, -1.1, 1.4, 0.2, Color(Red), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Global Variable(pagerButtons, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Modify Global Variable(pagerButtons, Append To Array, Array(Value In Array(Global Variable(_extendedGlobalCollection), 14), Value In Array(Global Variable(_extendedGlobalCollection), 15), Value In Array(Global Variable(_extendedGlobalCollection), 16), Value In Array(Global Variable(_extendedGlobalCollection), 17), Value In Array(Global Variable(_extendedGlobalCollection), 18), Value In Array(Global Variable(_extendedGlobalCollection), 13)));
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(pagerButtons));
        Call Subroutine(updateRuleContent);
    }
}

// Rule Element Count: 239
rule("Setup rule menu")
{
    event
    {
        Subroutine;
        SetupRuleMenu;
    }

    // Element Count: 238, Action Count: 11
    // Largest Action Index: 5 using 202 Elements
    actions
    {
        Set Global Variable(label, Custom String("main / rule editor"));
        Call Subroutine(setMainLabel);
        Set Global Variable(input, Array(Custom String("Add rule"), 16, 0, 0, 0.8, 0.6, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("〔?〕"), Array(35, Array(1, Null, Null, Array(1, 0, 0, 1, 0, 1, 0, 1, 0), Array(Array(Custom String("Rule Editor"), Color(Rose)), Array(Custom String("{0}{1}{2}", Custom String("Rules can be created which allows pathfinding bots to execute actions when they reach a path tagged\n"), Custom String("with a certain attribute. You can make bots jump over obstacles, melee fences, or even use hero abilities\n"), Custom String("to scale walls and cliffs.\n")), Color(White)), Array(Custom String("The rules created here can be compiled into workshop code in the export menu.\n"), Color(Lime Green)), Array(Custom String("Action list"), Color(Sky Blue)), Array(Custom String("The actions that are executed when the attribute is reached."), Color(White)), Array(Custom String("Attribute"), Color(Yellow)), Array(Custom String("When a bot begins walking on a path with this value, the rule is executed."), Color(White)), Array(Custom String("Hero list"), Color(Red)), Array(Custom String("The list of heroes that this rule will execute for."), Color(White))))), Array(36, Array(1, Null, Null, Array(1, 0, 0, 1, 0, 1, 0, 1, 0), Array(Array(Custom String("Rule Editor"), Color(Rose)), Array(Custom String("{0}{1}{2}", Custom String("Rules can be created which allows pathfinding bots to execute actions when they reach a path tagged\n"), Custom String("with a certain attribute. You can make bots jump over obstacles, melee fences, or even use hero abilities\n"), Custom String("to scale walls and cliffs.\n")), Color(White)), Array(Custom String("The rules created here can be compiled into workshop code in the export menu.\n"), Color(Lime Green)), Array(Custom String("Action list"), Color(Sky Blue)), Array(Custom String("The actions that are executed when the attribute is reached."), Color(White)), Array(Custom String("Attribute"), Color(Yellow)), Array(Custom String("When a bot begins walking on a path with this value, the rule is executed."), Color(White)), Array(Custom String("Hero list"), Color(Red)), Array(Custom String("The list of heroes that this rule will execute for."), Color(White))))), 0, 1, 0.2, 0.2, Color(Rose), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        If(Count Of(Global Variable(Rules_Actions_Data)));
            Call Subroutine(initiatePager);
        End;
    }
}

// Rule Element Count: 84
rule("Subroutine: Set Language Select Labels")
{
    event
    {
        Subroutine;
        SetLanguageSelectLabels;
    }

    // Element Count: 83, Action Count: 4
    // Largest Action Index: 3 using 26 Elements
    actions
    {
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 31)), If-Then-Else(Compare(Global Variable(outputLanguage), ==, 0), Custom String("【Workshop】"), Custom String("Workshop")));
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 32)), If-Then-Else(Compare(Global Variable(outputLanguage), ==, 1), Custom String("【Ostw】"), Custom String("Ostw")));
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 33)), If-Then-Else(Compare(Global Variable(outputLanguage), ==, 2), Custom String("【Overpy】"), Custom String("Overpy")));
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 34)), Custom String("{0}Generate code for {1}{0}", Ability Icon String(Hero(Torbjörn), Button(Ability 2)), Value In Array(Array(Custom String("the workshop"), Custom String("ostw"), Custom String("overpy")), Global Variable(outputLanguage))));
    }
}

// Rule Element Count: 1120
rule("EXPORT: create export menu")
{
    event
    {
        Subroutine;
        ExportMenu;
    }

    // Element Count: 1119, Action Count: 43
    // Largest Action Index: 20 using 196 Elements
    actions
    {
        Set Global Variable(label, Custom String("main / export"));
        Call Subroutine(setMainLabel);
        Set Global Variable(input, Array(Custom String("〔?〕"), Array(35, Array(1, Null, Custom String("Export settings"), Array(0, 1, 0, 1, 0, 1, 0), Array(Array(Custom String("{0}{1}", Custom String("These settings decide which pathfinding components will be exported.\n"), Custom String("The generated code exported should be copied into your gamemode.\n\n")), Color(White)), Array(Custom String("Export Map"), Color(Green)), Array(Custom String("If enabled, the nav mesh you created for {0} will be generated.\n\n", Current Map), Color(White)), Array(Custom String("Export Custom Rules"), Color(Green)), Array(Custom String("If enabled, the custom rules in the rule menu will be compiled into the specified workshop language.\n\n"), Color(White)), Array(Custom String("Core pathfinding code"), Color(Yellow)), Array(Custom String("{0}{1}", Custom String("If enabled, the core pathfinding algorithm will be generated.\n"), Custom String("This only needs to be added to your project once.")), Color(White))))), Array(36, Array(1, Null, Custom String("Export settings"), Array(0, 1, 0, 1, 0, 1, 0), Array(Array(Custom String("{0}{1}", Custom String("These settings decide which pathfinding components will be exported.\n"), Custom String("The generated code exported should be copied into your gamemode.\n\n")), Color(White)), Array(Custom String("Export Map"), Color(Green)), Array(Custom String("If enabled, the nav mesh you created for {0} will be generated.\n\n", Current Map), Color(White)), Array(Custom String("Export Custom Rules"), Color(Green)), Array(Custom String("If enabled, the custom rules in the rule menu will be compiled into the specified workshop language.\n\n"), Color(White)), Array(Custom String("Core pathfinding code"), Color(Yellow)), Array(Custom String("{0}{1}", Custom String("If enabled, the core pathfinding algorithm will be generated.\n"), Custom String("This only needs to be added to your project once.")), Color(White))))), -1.25, 0.8, 0.2, 0.2, Color(Rose), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("┏━ Export Settings ━┓"), 0, 0, -1.25, 0.6, 0.2, 0.2, Color(White), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("{0}: {1}", Custom String("Export Map"), If-Then-Else(First Of(Global Variable(buildToggles)), Custom String("on"), Custom String("off"))), Array(35, Array(15, Null, 0, Add(Value In Array(Global Variable(_extendedGlobalCollection), 24), 1), Custom String("Export Map"))), Array(36, Array(15, Null, 0, Add(Value In Array(Global Variable(_extendedGlobalCollection), 24), 1), Custom String("Export Map"))), -1.25, 0.3, 2, 0.2, If-Then-Else(First Of(Global Variable(buildToggles)), Color(Lime Green), Custom Color(182, 57, 57, 255)), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("{0}: {1}", Custom String("Export Custom Rules"), If-Then-Else(Value In Array(Global Variable(buildToggles), 1), Custom String("on"), Custom String("off"))), Array(35, Array(15, Null, 1, Add(Value In Array(Global Variable(_extendedGlobalCollection), 24), 1), Custom String("Export Custom Rules"))), Array(36, Array(15, Null, 1, Add(Value In Array(Global Variable(_extendedGlobalCollection), 24), 1), Custom String("Export Custom Rules"))), -1.25, 0.1, 2, 0.2, If-Then-Else(Value In Array(Global Variable(buildToggles), 1), Color(Lime Green), Custom Color(182, 57, 57, 255)), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("{0}: {1}", Custom String("Core Pathfinding Code"), If-Then-Else(Value In Array(Global Variable(buildToggles), 2), Custom String("on"), Custom String("off"))), Array(35, Array(15, Null, 2, Add(Value In Array(Global Variable(_extendedGlobalCollection), 24), 1), Custom String("Core Pathfinding Code"))), Array(36, Array(15, Null, 2, Add(Value In Array(Global Variable(_extendedGlobalCollection), 24), 1), Custom String("Core Pathfinding Code"))), -1.25, -0.1, 2, 0.2, If-Then-Else(Value In Array(Global Variable(buildToggles), 2), Color(Lime Green), Custom Color(182, 57, 57, 255)), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("{0}: {1}", Custom String("Compress map"), If-Then-Else(Value In Array(Global Variable(buildToggles), 3), Custom String("on"), Custom String("off"))), Array(35, Array(15, Null, 3, Add(Value In Array(Global Variable(_extendedGlobalCollection), 24), 1), Custom String("Compress map"))), Array(36, Array(15, Null, 3, Add(Value In Array(Global Variable(_extendedGlobalCollection), 24), 1), Custom String("Compress map"))), -1.25, -0.3, 2, 0.2, If-Then-Else(Value In Array(Global Variable(buildToggles), 3), Color(Lime Green), Custom Color(182, 57, 57, 255)), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("〔?〕"), Array(35, Array(1, Null, Custom String("Pathmaps can be compiled into several workshop languages.   "), Array(1, 0, 1, 0, 0, 1, 0, 0), Array(Array(Custom String("Workshop Code"), Color(Green)), Array(Custom String("Vanilla workshop syntax.\nThis can be pasted directly into the game.\n\n"), Color(White)), Array(Custom String("Ostw"), Color(Sky Blue)), Array(Custom String("{0}{1}", Custom String("An abstraction over the workshop allowing programming features such as collections in the form of
structs or classes, object "), Custom String("oriented programming, and lambdas.")), Color(White)), Array(Custom String("https://github.com/ItsDeltin/Overwatch-Script-To-Workshop\n\n"), Color(Blue)), Array(Custom String("Overpy"), Color(Yellow)), Array(Custom String("{0}{1}", Custom String("Code your gamemodes with modern development practices and break the limitations of the
workshop UI with features such as "), Custom String("multiple files, macros, switches, enums, optimizations,
string splitting, better syntax, etc.")), Color(White)), Array(Custom String("https://github.com/Zezombye/overpy"), Color(Blue))))), Array(36, Array(1, Null, Custom String("Pathmaps can be compiled into several workshop languages.   "), Array(1, 0, 1, 0, 0, 1, 0, 0), Array(Array(Custom String("Workshop Code"), Color(Green)), Array(Custom String("Vanilla workshop syntax.\nThis can be pasted directly into the game.\n\n"), Color(White)), Array(Custom String("Ostw"), Color(Sky Blue)), Array(Custom String("{0}{1}", Custom String("An abstraction over the workshop allowing programming features such as collections in the form of
structs or classes, object "), Custom String("oriented programming, and lambdas.")), Color(White)), Array(Custom String("https://github.com/ItsDeltin/Overwatch-Script-To-Workshop\n\n"), Color(Blue)), Array(Custom String("Overpy"), Color(Yellow)), Array(Custom String("{0}{1}", Custom String("Code your gamemodes with modern development practices and break the limitations of the
workshop UI with features such as "), Custom String("multiple files, macros, switches, enums, optimizations,
string splitting, better syntax, etc.")), Color(White)), Array(Custom String("https://github.com/Zezombye/overpy"), Color(Blue))))), 1.5, 0.8, 0.2, 0.2, Color(Rose), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("┏━ Language ━┓"), 0, 0, 1.5, 0.6, 0.2, 0.2, Color(White), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String(""), Array(35, Array(16, Null)), Array(36, Array(16, Null)), 1.5, 0.3, 1.2, 0.2, Color(Green), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 31, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String(""), Array(35, Array(17, Null)), Array(36, Array(17, Null)), 1.5, 0, 1.2, 0.2, Color(Sky Blue), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 32, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String(""), Array(35, Array(18, Null)), Array(36, Array(18, Null)), 1.5, -0.3, 1.2, 0.2, Color(Yellow), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 33, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("〔?〕"), Array(35, Array(1, Null, Null, Array(1, 0, 0, 0), Array(Array(Custom String("Code Generation"), Color(Green)), Array(Custom String("{0}{1}", Custom String("This button will generate the pathfinding code that you can copy into your gamemode.\n"), Custom String("The code can be copied from the inspector by clicking the \"Copy to clipboard all log\" button.\n")), Color(White)), Array(Custom String("{0}{1}", Custom String("Make sure the \"Enable Workshop Inspector Log File\" setting is enabled under Options >\n"), Custom String("Gameplay > General.\n\n")), Color(White)), Array(Custom String("{0}{1}", Custom String("Don't confuse this with saving your map in the editor, you won't be able to re-edit\n"), Custom String("your map with the code generated from this. To do that, see the guide in the main menu.")), Color(Yellow))))), Array(36, Array(1, Null, Null, Array(1, 0, 0, 0), Array(Array(Custom String("Code Generation"), Color(Green)), Array(Custom String("{0}{1}", Custom String("This button will generate the pathfinding code that you can copy into your gamemode.\n"), Custom String("The code can be copied from the inspector by clicking the \"Copy to clipboard all log\" button.\n")), Color(White)), Array(Custom String("{0}{1}", Custom String("Make sure the \"Enable Workshop Inspector Log File\" setting is enabled under Options >\n"), Custom String("Gameplay > General.\n\n")), Color(White)), Array(Custom String("{0}{1}", Custom String("Don't confuse this with saving your map in the editor, you won't be able to re-edit\n"), Custom String("your map with the code generated from this. To do that, see the guide in the main menu.")), Color(Yellow))))), 0, -0.7, 0.2, 0.2, Color(Rose), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String(""), Array(35, Array(19, Null)), Array(36, Array(19, Null)), 0, -0.9, 3, 0.2, Color(Green), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 34, Global Variable(returnValue___createButtonSubrou));
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Array(Value In Array(Global Variable(_extendedGlobalCollection), 31), Value In Array(Global Variable(_extendedGlobalCollection), 32), Value In Array(Global Variable(_extendedGlobalCollection), 33), Value In Array(Global Variable(_extendedGlobalCollection), 34)));
        Call Subroutine(SetLanguageSelectLabels);
    }
}

// Rule Element Count: 1268
rule("(Subroutine) CM: Update menu")
{
    event
    {
        Subroutine;
        SetMenuState;
    }

    // Element Count: 1267, Action Count: 147
    // Largest Action Index: 85 using 214 Elements
    actions
    {
        If(Compare(Global Variable(newState), ==, First Of(Player Variable(Event Player, _extendedPlayerCollection))));
            Skip(145);
        End;
        If(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4));
            Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_1), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)));
            Call Subroutine(DestroyButton);
            Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_3), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)));
            Call Subroutine(DestroyButton);
            Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)));
            Call Subroutine(DestroyButton);
            If(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4));
                Set Global Variable At Index(_classIndexes, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4), 0);
                Set Global Variable At Index(_objectVariable_0, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4), 0);
                Set Global Variable At Index(_objectVariable_1, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4), 0);
                Set Global Variable At Index(_objectVariable_2, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4), 0);
                Set Global Variable At Index(_objectVariable_3, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4), 0);
                Set Global Variable At Index(_objectVariable_4, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4), 0);
            Else;
                Log To Inspector(Custom String("[Error] Attempted to delete invalid reference in number selector.del at line 80"));
            End;
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 4, Null);
        End;
        While(Count Of(Player Variable(Event Player, buttonCollectionMain)));
            Set Global Variable(buttonID, First Of(Player Variable(Event Player, buttonCollectionMain)));
            Call Subroutine(DestroyButton);
            Modify Player Variable(Event Player, buttonCollectionMain, Remove From Array By Index, 0);
        End;
        If(Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 3));
            Set Global Variable(actionsSelected, Empty Array);
            While(Count Of(Global Variable(pagerButtons)));
                Set Global Variable(buttonID, First Of(Global Variable(pagerButtons)));
                Call Subroutine(DestroyButton);
                Modify Global Variable(pagerButtons, Remove From Array By Index, 0);
            End;
            Set Global Variable At Index(_extendedGlobalCollection, 21, False);
            If(Global Variable(actionScrollBar));
                Set Global Variable(DisposeStack, Global Variable(actionScrollBar));
                Call Subroutine(Dispose);
                Set Global Variable(actionScrollBar, Null);
            End;
            If(Compare(Global Variable(ruleAttributeSelector), !=, Null));
                Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_1), Global Variable(ruleAttributeSelector)));
                Call Subroutine(DestroyButton);
                Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_3), Global Variable(ruleAttributeSelector)));
                Call Subroutine(DestroyButton);
                Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_2), Global Variable(ruleAttributeSelector)));
                Call Subroutine(DestroyButton);
                If(Global Variable(ruleAttributeSelector));
                    Set Global Variable At Index(_classIndexes, Global Variable(ruleAttributeSelector), 0);
                    Set Global Variable At Index(_objectVariable_0, Global Variable(ruleAttributeSelector), 0);
                    Set Global Variable At Index(_objectVariable_1, Global Variable(ruleAttributeSelector), 0);
                    Set Global Variable At Index(_objectVariable_2, Global Variable(ruleAttributeSelector), 0);
                    Set Global Variable At Index(_objectVariable_3, Global Variable(ruleAttributeSelector), 0);
                    Set Global Variable At Index(_objectVariable_4, Global Variable(ruleAttributeSelector), 0);
                Else;
                    Log To Inspector(Custom String("[Error] Attempted to delete invalid reference in number selector.del at line 80"));
                End;
                Set Global Variable(ruleAttributeSelector, Null);
            End;
            If(Compare(Global Variable(heroScrollBar), !=, Null));
                Set Global Variable(DisposeStack, Global Variable(heroScrollBar));
                Call Subroutine(Dispose);
                Set Global Variable(heroScrollBar, Null);
            End;
        End;
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(newState));
        If(Or(Compare(Global Variable(newState), ==, 1), Compare(Global Variable(newState), ==, 3)));
            If(Compare(Value In Array(Global Variable(_extendedGlobalCollection), 1), ==, -1));
                Set Global Variable(input, Array(Custom String("← undo"), 4, 0, -2.1, -1, 0.4, 0.3, Color(Yellow), Color(Blue), True, True));
                Call Subroutine(__createButtonSubroutine);
                Set Global Variable At Index(_extendedGlobalCollection, 1, Global Variable(returnValue___createButtonSubrou));
                Set Global Variable(input, Array(Custom String("redo →"), 5, 0, -1.5, -1, 0.4, 0.3, Color(Aqua), Color(Blue), True, True));
                Call Subroutine(__createButtonSubroutine);
                Set Global Variable At Index(_extendedGlobalCollection, 2, Global Variable(returnValue___createButtonSubrou));
                Call Subroutine(UpdateUndoInteractability);
            End;
        Else If(Compare(Value In Array(Global Variable(_extendedGlobalCollection), 1), !=, -1));
            Set Global Variable(buttonID, Value In Array(Global Variable(_extendedGlobalCollection), 1));
            Call Subroutine(DestroyButton);
            Set Global Variable(buttonID, Value In Array(Global Variable(_extendedGlobalCollection), 2));
            Call Subroutine(DestroyButton);
            Set Global Variable At Index(_extendedGlobalCollection, 1, -1);
            Set Global Variable At Index(_extendedGlobalCollection, 2, -1);
        End;
        If(Compare(Global Variable(newState), ==, 1));
            Set Global Variable(input, Array(Custom String("〔?〕"), Array(35, Array(1, Null, Null, Array(1, 0, 1, 0, 1, 0, 1, 0), Array(Array(Custom String("{0} Rule Editor {0}", Ability Icon String(Hero(Torbjörn), Button(Ability 2))), Color(Rose)), Array(Custom String("Create workshop rules that will execute upon reaching a path tagged with an attribute."), Color(White)), Array(Custom String("{0} Export {0}", Ability Icon String(Hero(Bastion), Button(Ability 1))), Color(Lime Green)), Array(Custom String("Generates the pathfinding code that you can add to your workshop gamemode."), Color(White)), Array(Custom String("{0} Add Dummy Bot {0}", Ability Icon String(Hero(Echo), Button(Ultimate))), Color(Violet)), Array(Custom String("Spawn dummy bots that you can use to test your map."), Color(White)), Array(Custom String("{0} Pathfinder Settings {0}", Ability Icon String(Hero(Kiriko), Button(Ability 1))), Color(Yellow)), Array(Custom String("Set which attributes the dummy bots will use when testing your map."), Color(White))))), Array(36, Array(1, Null, Null, Array(1, 0, 1, 0, 1, 0, 1, 0), Array(Array(Custom String("{0} Rule Editor {0}", Ability Icon String(Hero(Torbjörn), Button(Ability 2))), Color(Rose)), Array(Custom String("Create workshop rules that will execute upon reaching a path tagged with an attribute."), Color(White)), Array(Custom String("{0} Export {0}", Ability Icon String(Hero(Bastion), Button(Ability 1))), Color(Lime Green)), Array(Custom String("Generates the pathfinding code that you can add to your workshop gamemode."), Color(White)), Array(Custom String("{0} Add Dummy Bot {0}", Ability Icon String(Hero(Echo), Button(Ultimate))), Color(Violet)), Array(Custom String("Spawn dummy bots that you can use to test your map."), Color(White)), Array(Custom String("{0} Pathfinder Settings {0}", Ability Icon String(Hero(Kiriko), Button(Ability 1))), Color(Yellow)), Array(Custom String("Set which attributes the dummy bots will use when testing your map."), Color(White))))), 1.85, 1, 0.2, 0.2, Color(Rose), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("            add dummy bot {0}", Ability Icon String(Hero(Echo), Button(Ultimate))), 11, 0, 1.5, 0.4, 1.7, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("Version history"), Array(35, Array(2, Null)), Array(36, Array(2, Null)), 1.6, -0.8, 1.5, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("credits"), Array(35, Array(3, Null)), Array(36, Array(3, Null)), 1.6, -1, 1.5, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("                      Rule editor {0}", Ability Icon String(Hero(Torbjörn), Button(Ability 2))), 13, 0, 1.5, 0.8, 1.7, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("pathfinder settings {0}", Ability Icon String(Hero(Kiriko), Button(Ability 1))), 27, 0, 1.5, 0.2, 1.7, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("Guide"), Array(35, Array(4, Null)), Array(36, Array(4, Null)), 1.6, -0.6, 1.5, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("                                Export {0}", Ability Icon String(Hero(Bastion), Button(Ability 1))), 31, 0, 1.5, 0.6, 1.7, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("noclip: off"), 2, 3, -1.7, 0.6, 1, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Null, Array(35, Array(5, Null)), Array(36, Array(5, Null)), -1.5, 0, 1.7, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 2, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String(" Attribute:"), 0, 0, -1.7, -0.2, 0.2, 0.2, Color(White), Color(Blue), False, True));
            Call Subroutine(__createButtonSubroutine);
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 3, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("Mirror map"), Array(35, Array(6, Null)), Array(36, Array(6, Null)), -1.7, 0.3, 1, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("〔?〕"), Array(35, Array(1, Null, Null, Array(1, 0, 1, 0), Array(Array(Custom String("Connect: Paths"), Color(Rose)), Array(Custom String("{0}{1}", Custom String("In path mode, you can select two nodes in order to create a path."), Custom String("\nThis will allow bots to walk between both nodes.")), Color(White)), Array(Custom String("Connect: Attributes"), Color(Orange)), Array(Custom String("{0}{1}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("You can tag a path with the current \"Attribute\" value. Tagging paths"), Custom String("\nmay have a few uses, for example:\n\n1. Creating one-ways, such as paths that drop from ledges."), Custom String("\n\n2: Creating paths that can utilize hero abilities to get across.")), Custom String("\n\n3: Only allowing the bots on the correct team to enter a spawn room."), Custom String("\n\n4: Doors which are only open depending on the objective progress.")), Custom String("\n\n5: Meleeing or jumping over fences that are in a path.")), Color(White))))), Array(36, Array(1, Null, Null, Array(1, 0, 1, 0), Array(Array(Custom String("Connect: Paths"), Color(Rose)), Array(Custom String("{0}{1}", Custom String("In path mode, you can select two nodes in order to create a path."), Custom String("\nThis will allow bots to walk between both nodes.")), Color(White)), Array(Custom String("Connect: Attributes"), Color(Orange)), Array(Custom String("{0}{1}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("You can tag a path with the current \"Attribute\" value. Tagging paths"), Custom String("\nmay have a few uses, for example:\n\n1. Creating one-ways, such as paths that drop from ledges."), Custom String("\n\n2: Creating paths that can utilize hero abilities to get across.")), Custom String("\n\n3: Only allowing the bots on the correct team to enter a spawn room."), Custom String("\n\n4: Doors which are only open depending on the objective progress.")), Custom String("\n\n5: Meleeing or jumping over fences that are in a path.")), Color(White))))), -2.3, -0.1, 0.2, 0.2, Color(Rose), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable At Index(_extendedGlobalCollection, 41, Index Of Array Value(Global Variable(_classIndexes), 0));
            Set Global Variable At Index(_extendedGlobalCollection, 41, If-Then-Else(Compare(Value In Array(Global Variable(_extendedGlobalCollection), 41), ==, -1), Count Of(Global Variable(_classIndexes)), Value In Array(Global Variable(_extendedGlobalCollection), 41)));
            Set Global Variable At Index(_classIndexes, Value In Array(Global Variable(_extendedGlobalCollection), 41), 1);
            Set Global Variable At Index(_objectVariable_0, Value In Array(Global Variable(_extendedGlobalCollection), 41), Value In Array(Global Variable(_extendedGlobalCollection), 5));
            Set Global Variable(input, Array(Custom String(" {0} ", Value In Array(Global Variable(_extendedGlobalCollection), 5)), 0, 0, -0.95, -0.2, 0.2, 0.2, Color(Yellow), Color(Blue), False, True));
            Call Subroutine(__createButtonSubroutine);
            Set Global Variable At Index(_objectVariable_1, Value In Array(Global Variable(_extendedGlobalCollection), 41), Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("→"), Array(7, Value In Array(Global Variable(_extendedGlobalCollection), 41)), Array(8, Value In Array(Global Variable(_extendedGlobalCollection), 41)), -0.7725, -0.2, 0.2, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Set Global Variable At Index(_objectVariable_3, Value In Array(Global Variable(_extendedGlobalCollection), 41), Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("←"), Array(9, Value In Array(Global Variable(_extendedGlobalCollection), 41)), Array(10, Value In Array(Global Variable(_extendedGlobalCollection), 41)), -1.1275, -0.2, 0.2, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Set Global Variable At Index(_objectVariable_2, Value In Array(Global Variable(_extendedGlobalCollection), 41), Global Variable(returnValue___createButtonSubrou));
            Set Global Variable At Index(_objectVariable_4, Value In Array(Global Variable(_extendedGlobalCollection), 41), Array(7, Null));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 4, Value In Array(Global Variable(_extendedGlobalCollection), 41));
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Array(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
            Call Subroutine(updateFreecamLabel);
            Call Subroutine(updateSegmentModeLabel);
        Else If(Compare(Global Variable(newState), ==, 3));
            Call Subroutine(SetupRuleMenu);
        Else If(Compare(Global Variable(newState), ==, 8));
            Call Subroutine(ExportMenu);
        End;
    }
}

// Rule Element Count: 232
rule("CM: Make buttons: Main")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 4, Condition Count: 1
    conditions
    {
        Host Player == Event Player;
    }

    // Element Count: 227, Action Count: 26
    // Largest Action Index: 6 using 33 Elements
    actions
    {
        For Player Variable(Event Player, b, 0, 2, 1);
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 10, Custom String(""));
            For Player Variable(Event Player, c, 0, 13, 1);
                Set Player Variable At Index(Event Player, _extendedPlayerCollection, 10, Custom String("{0}{1}", Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 10), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n")));
                Wait(0.016, Ignore Condition);
            End;
            Set Global Variable(input, Array(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 10), 0, 0, 0, Subtract(-0.9, Multiply(Player Variable(Event Player, b), 0.1)), 0.2, 0.2, Color(Black), Color(Blue), False, True));
            Call Subroutine(__createButtonSubroutine);
        End;
        Set Global Variable(newState, 1);
        Call Subroutine(SetMenuState);
        Set Global Variable(input, Array(Custom String("main"), 0, 0, 0, 1.15, 0.2, 0.2, Color(Gray), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 5, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("back"), 1, 0, -2, 1, 0.4, 0.2, Color(Red), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable(input, Array(Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"), 0, 0, 0, 1.375, 0.2, 0.2, Color(Black), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable(input, Array(Custom String("♡              ♡"), 0, 0, 0, 1.375, 0.2, 0.2, Color(Red), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable(input, Array(Custom String("ｈ  ｐ  ／  ｏ  ｉ  ｏ   ｄ  ｔ\n               "), 0, 0, 0.15, 1.205, 0.2, 0.2, Color(White), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable(input, Array(Custom String("ｔ  ｓ  ／  －   ．  ｍ  ｅ  ｉ\n               "), 0, 0, 0.23, 1.205, 0.2, 0.2, Color(White), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable(input, Array(Custom String("ｔ  ：  ｋ  ｆ ｃ    ／  ｌ  ｎ\n               "), 0, 0, 0.31, 1.205, 0.2, 0.2, Color(White), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
    }
}

// Rule Element Count: 12
rule("CM: Freecam increment")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 2;
    }

    // Element Count: 4, Action Count: 2
    // Largest Action Index: 0 using 3 Elements
    actions
    {
        Set Global Variable(IsNoclipping, Not(Global Variable(IsNoclipping)));
        Call Subroutine(updateFreecamLabel);
    }
}

// Rule Element Count: 32
rule("CM: Undo")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 4;
        Player Variable(Event Player, historyPage) > 0;
    }

    // Element Count: 17, Action Count: 5
    // Largest Action Index: 2 using 9 Elements
    actions
    {
        Modify Player Variable(Event Player, historyPage, Subtract, 1);
        Modify Global Variable(lambdaParameter_0, Append To Array, Array(0));
        Modify Global Variable(func_group, Append To Array, Array(Value In Array(Player Variable(Event Player, historyItems_Revert), Player Variable(Event Player, historyPage))));
        Call Subroutine(func_group);
        Call Subroutine(UpdateUndoInteractability);
    }
}

// Rule Element Count: 34
rule("CM: Redo")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 5;
        Player Variable(Event Player, historyPage) < Count Of(Player Variable(Event Player, historyItems_Set));
    }

    // Element Count: 17, Action Count: 5
    // Largest Action Index: 1 using 9 Elements
    actions
    {
        Modify Global Variable(lambdaParameter_0, Append To Array, Array(0));
        Modify Global Variable(func_group, Append To Array, Array(Value In Array(Player Variable(Event Player, historyItems_Set), Player Variable(Event Player, historyPage))));
        Call Subroutine(func_group);
        Modify Player Variable(Event Player, historyPage, Add, 1);
        Call Subroutine(UpdateUndoInteractability);
    }
}

// Rule Element Count: 11
rule("CM: Change link mode")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 6;
    }

    // Element Count: 3, Action Count: 1
    actions
    {
        Set Global Variable(attributeMode, Not(Global Variable(attributeMode)));
    }
}

// Rule Element Count: 71
rule("(Subroutine) CM: Choose hero")
{
    event
    {
        Subroutine;
        chooseHeroMenu;
    }

    // Element Count: 70, Action Count: 8
    // Largest Action Index: 3 using 55 Elements
    actions
    {
        Set Global Variable(newState, 2);
        Call Subroutine(SetMenuState);
        For Player Variable(Event Player, i, 0, Count Of(All Heroes), 1);
            Set Global Variable(input, Array(Hero Icon String(Value In Array(All Heroes, Player Variable(Event Player, i))), Array(12, Value In Array(All Heroes, Player Variable(Event Player, i))), 0, Add(-2, Divide(Modulo(Player Variable(Event Player, i), 13), 3)), Subtract(0.5, Divide(Round To Integer(Divide(Player Variable(Event Player, i), 13), Down), 2)), 0.2, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        End;
        Set Global Variable At Index(_extendedGlobalCollection, 4, Player Variable(Event Player, callback));
    }
}

// Rule Element Count: 14
rule("CM: Add dummy")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 11;
    }

    // Element Count: 6, Action Count: 2
    // Largest Action Index: 0 using 5 Elements
    actions
    {
        Set Player Variable(Event Player, callback, Array(20, Null));
        Call Subroutine(chooseHeroMenu);
    }
}

// Rule Element Count: 40
rule("CM: Hero ready")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        First Of(Player Variable(Event Player, cm_currActionID)) == 12;
        Value In Array(Global Variable(_extendedGlobalCollection), 4) == True;
    }

    // Element Count: 23, Action Count: 8
    // Largest Action Index: 0 using 8 Elements
    actions
    {
        Modify Global Variable(lambdaParameter_0, Append To Array, Array(Value In Array(Player Variable(Event Player, cm_currActionID), 1)));
        Modify Global Variable(func_group, Append To Array, Array(Value In Array(Global Variable(_extendedGlobalCollection), 4)));
        Call Subroutine(func_group);
        Set Global Variable(newState, 1);
        Call Subroutine(SetMenuState);
        Set Global Variable At Index(_extendedGlobalCollection, 4, Null);
        Set Player Variable(Event Player, cm_isInMenu, False);
        Set Player Variable(Event Player, releasePrimary, True);
    }
}

// Rule Element Count: 12
rule("Editor: node mode edit")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Global Variable(editorState) != 0;
    }

    // Element Count: 5, Action Count: 1
    actions
    {
        Destroy Effect(Value In Array(Global Variable(_extendedGlobalCollection), 9));
    }
}

// Rule Element Count: 17
rule("Editor: dummy mode exit")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Global Variable(editorState) != 1;
    }

    // Element Count: 10, Action Count: 2
    // Largest Action Index: 0 using 5 Elements
    actions
    {
        Destroy Effect(Value In Array(Global Variable(_extendedGlobalCollection), 9));
        Destroy In-World Text(Value In Array(Global Variable(_extendedGlobalCollection), 10));
    }
}

// Rule Element Count: 40
rule("Editor: node mode enter")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Global Variable(editorState) == 0;
    }

    // Element Count: 33, Action Count: 2
    // Largest Action Index: 0 using 31 Elements
    actions
    {
        Create Effect(Filtered Array(All Players(All Teams), And(Compare(Global Variable(SelectedNodeID), ==, -1), Not(Player Variable(Host Player, cm_isInMenu)))), Sphere, Color(Orange), Update Every Frame(Ray Cast Hit Position(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), Null, Null, False)), 0.2, Visible To Position Radius and Color);
        Set Global Variable At Index(_extendedGlobalCollection, 9, Last Created Entity);
    }
}

// Rule Element Count: 92
rule("Editor: dummy mode enter")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Global Variable(editorState) == 1;
    }

    // Element Count: 85, Action Count: 4
    // Largest Action Index: 2 using 43 Elements
    actions
    {
        Create Effect(If-Then-Else(And(And(Not(Player Variable(Host Player, cm_isInMenu)), Compare(Global Variable(SelectedPlayer), ==, Null)), Compare(Global Variable(SelectedNodeID), ==, -1)), All Players(All Teams), Null), Ring, Color(Sky Blue), Update Every Frame(Ray Cast Hit Position(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), Null, Null, False)), 0.5, Visible To Position Radius and Color);
        Set Global Variable At Index(_extendedGlobalCollection, 9, Last Created Entity);
        Create In-World Text(If-Then-Else(And(And(Not(Player Variable(Host Player, cm_isInMenu)), Compare(Global Variable(SelectedPlayer), ==, Null)), Compare(Global Variable(SelectedNodeID), ==, -1)), All Players(All Teams), Null), Hero Icon String(Value In Array(Global Variable(_extendedGlobalCollection), 11)), Update Every Frame(Ray Cast Hit Position(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), Null, Null, False)), 2, Do Not Clip, Visible To And Position, Color(White), Default Visibility);
        Set Global Variable At Index(_extendedGlobalCollection, 10, Last Text ID);
    }
}

// Rule Element Count: 23
rule("Editor: path mode exit")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 12, Condition Count: 1
    conditions
    {
        Or(Global Variable(attributeMode), Compare(Global Variable(editorState), !=, 0)) == True;
    }

    // Element Count: 10, Action Count: 2
    // Largest Action Index: 0 using 5 Elements
    actions
    {
        Destroy Effect(Value In Array(Global Variable(_extendedGlobalCollection), 6));
        Destroy Effect(Value In Array(Global Variable(_extendedGlobalCollection), 7));
    }
}

// Rule Element Count: 29
rule("Editor: attribute mode exit")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 13, Condition Count: 1
    conditions
    {
        Or(Not(Global Variable(attributeMode)), Compare(Global Variable(editorState), !=, 0)) == True;
    }

    // Element Count: 15, Action Count: 3
    // Largest Action Index: 0 using 5 Elements
    actions
    {
        Destroy Effect(Value In Array(Global Variable(_extendedGlobalCollection), 6));
        Destroy Effect(Value In Array(Global Variable(_extendedGlobalCollection), 7));
        Destroy In-World Text(Value In Array(Global Variable(_extendedGlobalCollection), 8));
    }
}

// Rule Element Count: 131
rule("Editor: path mode enter")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 12, Condition Count: 2
    conditions
    {
        Not(Global Variable(attributeMode)) == True;
        Global Variable(editorState) == 0;
    }

    // Element Count: 118, Action Count: 6
    // Largest Action Index: 4 using 53 Elements
    actions
    {
        Destroy Effect(Value In Array(Global Variable(_extendedGlobalCollection), 6));
        Destroy Effect(Value In Array(Global Variable(_extendedGlobalCollection), 7));
        Create Beam Effect(Update Every Frame(If-Then-Else(And(And(Compare(Global Variable(SelectedSegment), ==, -1), Compare(Global Variable(connectingFromNode), !=, -1)), Compare(Global Variable(SelectedNodeID), !=, -1)), All Players(All Teams), Null)), Torbjörn Turret Sight Beam, Add(Value In Array(Global Variable(Nodes_Node_Position), Global Variable(connectingFromNode)), Vector(0, 1.3, 0)), Add(Value In Array(Global Variable(Nodes_Node_Position), Global Variable(SelectedNodeIndex)), Vector(0, 1.3, 0)), Color(Team 1), Visible To Position Radius and Color);
        Set Global Variable At Index(_extendedGlobalCollection, 6, Last Created Entity);
        Create Beam Effect(Update Every Frame(If-Then-Else(And(And(Compare(Global Variable(SelectedSegment), ==, -1), Compare(Global Variable(connectingFromNode), !=, -1)), Compare(Global Variable(SelectedNodeID), ==, -1)), All Players(All Teams), Null)), Torbjörn Turret Sight Beam, Add(Value In Array(Global Variable(Nodes_Node_Position), Global Variable(connectingFromNode)), Vector(0, 1.3, 0)), Update Every Frame(Ray Cast Hit Position(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), Null, Null, False)), Color(Team 2), Visible To Position Radius and Color);
        Set Global Variable At Index(_extendedGlobalCollection, 7, Last Created Entity);
    }
}

// Rule Element Count: 227
rule("Editor: attribute mode enter")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 11, Condition Count: 2
    conditions
    {
        Global Variable(attributeMode) == True;
        Global Variable(editorState) == 0;
    }

    // Element Count: 215, Action Count: 8
    // Largest Action Index: 6 using 105 Elements
    actions
    {
        Destroy Effect(Value In Array(Global Variable(_extendedGlobalCollection), 6));
        Destroy Effect(Value In Array(Global Variable(_extendedGlobalCollection), 7));
        Create Beam Effect(Update Every Frame(If-Then-Else(And(And(True, Compare(Global Variable(connectingFromNode), !=, -1)), Compare(Global Variable(SelectedNodeID), !=, -1)), All Players(All Teams), Null)), Symmetra Turret Beam, Add(Value In Array(Global Variable(Nodes_Node_Position), Global Variable(connectingFromNode)), Vector(0, 1.3, 0)), Add(Value In Array(Global Variable(Nodes_Node_Position), Global Variable(SelectedNodeIndex)), Vector(0, 1.3, 0)), Color(Team 1), Visible To Position Radius and Color);
        Set Global Variable At Index(_extendedGlobalCollection, 6, Last Created Entity);
        Create Beam Effect(Update Every Frame(If-Then-Else(And(And(True, Compare(Global Variable(connectingFromNode), !=, -1)), Compare(Global Variable(SelectedNodeID), ==, -1)), All Players(All Teams), Null)), Symmetra Turret Beam, Add(Value In Array(Global Variable(Nodes_Node_Position), Global Variable(connectingFromNode)), Vector(0, 1.3, 0)), Update Every Frame(Ray Cast Hit Position(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), Null, Null, False)), Color(Team 2), Visible To Position Radius and Color);
        Set Global Variable At Index(_extendedGlobalCollection, 7, Last Created Entity);
        Create In-World Text(If-Then-Else(And(Compare(Global Variable(connectingFromNode), !=, -1), Compare(Global Variable(connectingFromNode), !=, Global Variable(SelectedNodeIndex))), All Players(All Teams), Null), Custom String(" \n{0}", Value In Array(Global Variable(_extendedGlobalCollection), 5)), Add(Subtract(Add(Value In Array(Global Variable(Nodes_Node_Position), Global Variable(connectingFromNode)), Vector(0, 1.3, 0)), Vector(Empty Array, 0.3, Empty Array)), Multiply(Subtract(If-Then-Else(Compare(Global Variable(SelectedNodeID), ==, -1), Ray Cast Hit Position(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), Null, Null, False), Add(Value In Array(Global Variable(Nodes_Node_Position), Global Variable(SelectedNodeIndex)), Vector(0, 1.3, 0))), Add(Value In Array(Global Variable(Nodes_Node_Position), Global Variable(connectingFromNode)), Vector(0, 1.3, 0))), 0.3)), 2.5, Do Not Clip, Visible To Position String and Color, If-Then-Else(Compare(Global Variable(SelectedNodeID), ==, -1), Color(Red), Color(Blue)), Default Visibility);
        Set Global Variable At Index(_extendedGlobalCollection, 8, Last Text ID);
    }
}

// Rule Element Count: 54
rule("(Subroutine) Doc Undoable Action")
{
    event
    {
        Subroutine;
        Docment;
    }

    // Element Count: 53, Action Count: 16
    // Largest Action Index: 0 using 9 Elements
    actions
    {
        While(Compare(Count Of(Player Variable(Event Player, historyItems_Set)), >, Player Variable(Event Player, historyPage)));
            Modify Player Variable(Event Player, historyItems_Set, Remove From Array By Index, Player Variable(Event Player, historyPage));
            Modify Player Variable(Event Player, historyItems_Revert, Remove From Array By Index, Player Variable(Event Player, historyPage));
        End;
        Modify Global Variable(lambdaParameter_0, Append To Array, Array(0));
        Modify Global Variable(func_group, Append To Array, Array(Player Variable(Event Player, catalogItem_Set)));
        Call Subroutine(func_group);
        Modify Player Variable(Event Player, historyItems_Set, Append To Array, Array(Player Variable(Event Player, catalogItem_Set)));
        Modify Player Variable(Event Player, historyItems_Revert, Append To Array, Array(Player Variable(Event Player, catalogItem_Revert)));
        If(Compare(Player Variable(Event Player, historyPage), ==, First Of(Global Variable(_extendedGlobalCollection))));
            Modify Player Variable(Event Player, historyItems_Set, Remove From Array By Index, 0);
            Modify Player Variable(Event Player, historyItems_Revert, Remove From Array By Index, 0);
        Else;
            Modify Player Variable(Event Player, historyPage, Add, 1);
        End;
        Call Subroutine(UpdateUndoInteractability);
    }
}

// Rule Element Count: 107
rule("Editor: Place node")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 51, Condition Count: 8
    conditions
    {
        Host Player == Event Player;
        Not(Value In Array(Global Variable(_extendedGlobalCollection), 3)) == True;
        Is Button Held(Host Player, Button(Primary Fire)) == True;
        Global Variable(editorState) == 0;
        Global Variable(SelectedNodeID) == -1;
        Global Variable(SelectedPlayer) == Null;
        Not(Player Variable(Host Player, releasePrimary)) == True;
        Not(Player Variable(Host Player, cm_isInMenu)) == True;
    }

    // Element Count: 55, Action Count: 9
    // Largest Action Index: 1 using 15 Elements
    actions
    {
        Set Player Variable(Event Player, pos, Ray Cast Hit Position(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), Null, Null, False));
        "Do not place the node if there are any other close nodes."
        If(Is True For Any(Global Variable(Nodes_Node_UniqueID), Compare(Distance Between(Value In Array(Global Variable(Nodes_Node_Position), Current Array Index), Player Variable(Event Player, pos)), <, 0.75)));
            Abort;
        End;
        Modify Global Variable(NodeUniqueID, Add, 1);
        Set Player Variable(Event Player, id, Global Variable(NodeUniqueID));
        Set Player Variable(Event Player, catalogItem_Set, Array(21, Null, Player Variable(Event Player, pos), Player Variable(Event Player, id)));
        Set Player Variable(Event Player, catalogItem_Revert, Array(22, Null, Player Variable(Event Player, id)));
        Call Subroutine(Docment);
    }
}

// Rule Element Count: 157
rule("Editor: Delete node")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 39, Condition Count: 6
    conditions
    {
        Host Player == Event Player;
        Not(Value In Array(Global Variable(_extendedGlobalCollection), 3)) == True;
        Is Button Held(Host Player, Button(Ultimate)) == True;
        Global Variable(editorState) == 0;
        Global Variable(SelectedNodeID) != -1;
        Not(Player Variable(Host Player, cm_isInMenu)) == True;
    }

    // Element Count: 117, Action Count: 7
    // Largest Action Index: 3 using 39 Elements
    actions
    {
        Set Player Variable(Event Player, deleteNode_UniqueID, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(SelectedNodeIndex)));
        Set Player Variable(Event Player, deleteNode_Position, Value In Array(Global Variable(Nodes_Node_Position), Global Variable(SelectedNodeIndex)));
        Set Player Variable(Event Player, deleteSegments, Filtered Array(Mapped Array(Global Variable(Segments_ID), Array(Current Array Index, Current Array Element, Value In Array(Global Variable(Segments_Node1), Current Array Index), Value In Array(Global Variable(Segments_Node2), Current Array Index))), Or(Compare(Value In Array(Global Variable(Segments_Node1), Current Array Index), ==, Player Variable(Event Player, deleteNode_UniqueID)), Compare(Value In Array(Global Variable(Segments_Node2), Current Array Index), ==, Player Variable(Event Player, deleteNode_UniqueID)))));
        Set Player Variable(Event Player, deleteAttributes, Filtered Array(Mapped Array(Global Variable(Attributes_ID), Array(Current Array Index, Current Array Element, Value In Array(Global Variable(Attributes_Node1), Current Array Index), Value In Array(Global Variable(Attributes_Node2), Current Array Index), Value In Array(Global Variable(Attributes_Value), Current Array Index))), Or(Compare(Value In Array(Current Array Element, 2), ==, Player Variable(Event Player, deleteNode_UniqueID)), Compare(Value In Array(Current Array Element, 3), ==, Player Variable(Event Player, deleteNode_UniqueID)))));
        Set Player Variable(Event Player, catalogItem_Set, Array(23, Null, Player Variable(Event Player, deleteSegments), Player Variable(Event Player, deleteAttributes), Global Variable(SelectedNodeIndex)));
        Set Player Variable(Event Player, catalogItem_Revert, Array(24, Null, Global Variable(SelectedNodeIndex), Player Variable(Event Player, deleteNode_UniqueID), Player Variable(Event Player, deleteNode_Position), Player Variable(Event Player, deleteSegments), Player Variable(Event Player, deleteAttributes)));
        Call Subroutine(Docment);
    }
}

// Rule Element Count: 43
rule("Editor: Select node")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 35, Condition Count: 5
    conditions
    {
        Not(Value In Array(Global Variable(_extendedGlobalCollection), 3)) == True;
        Is Button Held(Host Player, Button(Secondary Fire)) == True;
        Global Variable(editorState) == 0;
        Global Variable(SelectedNodeID) != -1;
        Not(Player Variable(Host Player, cm_isInMenu)) == True;
    }

    // Element Count: 7, Action Count: 1
    actions
    {
        Set Global Variable At Index(Nodes_Selected, Global Variable(SelectedNodeIndex), Not(Value In Array(Global Variable(Nodes_Selected), Global Variable(SelectedNodeIndex))));
    }
}

// Rule Element Count: 333
rule("Editor: Connect node")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 39, Condition Count: 6
    conditions
    {
        Host Player == Event Player;
        Not(Value In Array(Global Variable(_extendedGlobalCollection), 3)) == True;
        Is Button Held(Host Player, Button(Primary Fire)) == True;
        Global Variable(editorState) == 0;
        Global Variable(SelectedNodeID) != -1;
        Not(Player Variable(Host Player, cm_isInMenu)) == True;
    }

    // Element Count: 293, Action Count: 41
    // Largest Action Index: 24 using 42 Elements
    actions
    {
        If(Compare(Global Variable(connectingFromNode), ==, Global Variable(SelectedNodeIndex)));
            Set Global Variable(connectingFromNode, -1);
            Abort;
        Else If(Compare(Global Variable(connectingFromNode), !=, -1));
            If(Not(Global Variable(attributeMode)));
                If(Compare(Global Variable(SelectedSegment), !=, -1));
                    Set Player Variable(Event Player, segment_ID, Value In Array(Global Variable(Segments_ID), Global Variable(SelectedSegment)));
                    Set Player Variable(Event Player, segment_Node1, Value In Array(Global Variable(Segments_Node1), Global Variable(SelectedSegment)));
                    Set Player Variable(Event Player, segment_Node2, Value In Array(Global Variable(Segments_Node2), Global Variable(SelectedSegment)));
                    Set Player Variable(Event Player, catalogItem_Set, Array(25, Null, Player Variable(Event Player, segment_ID), Player Variable(Event Player, segment_Node1), Player Variable(Event Player, segment_Node2)));
                    Set Player Variable(Event Player, catalogItem_Revert, Array(26, Null, Global Variable(SelectedSegment), Player Variable(Event Player, segment_ID), Player Variable(Event Player, segment_Node1), Player Variable(Event Player, segment_Node2)));
                    Call Subroutine(Docment);
                Else;
                    Modify Global Variable(SegmentUniqueID, Add, 1);
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 13, Global Variable(SegmentUniqueID));
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 14, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(connectingFromNode)));
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 15, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(SelectedNodeIndex)));
                    Set Player Variable(Event Player, catalogItem_Set, Array(27, Null, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 13), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 14), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 15)));
                    Set Player Variable(Event Player, catalogItem_Revert, Array(28, Null, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 13)));
                    Call Subroutine(Docment);
                End;
            Else;
                Set Player Variable At Index(Event Player, _extendedPlayerCollection, 16, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(connectingFromNode)));
                Set Player Variable At Index(Event Player, _extendedPlayerCollection, 17, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(SelectedNodeIndex)));
                Set Player Variable(Event Player, existingAttributeIndex, Filtered Array(Mapped Array(Global Variable(Attributes_Value), Current Array Index), And(And(Compare(Value In Array(Global Variable(Attributes_Value), Current Array Element), ==, Value In Array(Global Variable(_extendedGlobalCollection), 5)), Compare(Value In Array(Global Variable(Attributes_Node1), Current Array Element), ==, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 16))), Compare(Value In Array(Global Variable(Attributes_Node2), Current Array Element), ==, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 17)))));
                If(Count Of(Player Variable(Event Player, existingAttributeIndex)));
                    Set Player Variable(Event Player, deleting, Array(Value In Array(Global Variable(Attributes_Value), First Of(Player Variable(Event Player, existingAttributeIndex))), Value In Array(Global Variable(Attributes_ID), First Of(Player Variable(Event Player, existingAttributeIndex))), Value In Array(Global Variable(Attributes_Node1), First Of(Player Variable(Event Player, existingAttributeIndex))), Value In Array(Global Variable(Attributes_Node2), First Of(Player Variable(Event Player, existingAttributeIndex)))));
                    Set Player Variable(Event Player, catalogItem_Set, Array(29, Null, First Of(Player Variable(Event Player, existingAttributeIndex))));
                    Set Player Variable(Event Player, catalogItem_Revert, Array(30, Null, First Of(Player Variable(Event Player, existingAttributeIndex)), Player Variable(Event Player, deleting)));
                    Call Subroutine(Docment);
                Else;
                    Modify Global Variable(AttributeUniqueID, Add, 1);
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 18, Value In Array(Global Variable(_extendedGlobalCollection), 5));
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 19, Global Variable(AttributeUniqueID));
                    Set Player Variable(Event Player, catalogItem_Set, Array(31, Null, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 18), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 19), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 16), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 17)));
                    Set Player Variable(Event Player, catalogItem_Revert, Array(32, Null, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 19)));
                    Call Subroutine(Docment);
                End;
            End;
        End;
        Set Global Variable(connectingFromNode, Global Variable(SelectedNodeIndex));
    }
}

// Rule Element Count: 35
rule("Editor: Cancel link")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 32, Condition Count: 5
    conditions
    {
        Is Button Held(Host Player, Button(Secondary Fire)) == True;
        Global Variable(editorState) == 0;
        Global Variable(SelectedNodeID) == -1;
        Global Variable(connectingFromNode) != -1;
        Not(Player Variable(Host Player, cm_isInMenu)) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Set Global Variable(connectingFromNode, -1);
    }
}

// Rule Element Count: 77
rule("Editor: Move node")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 36, Condition Count: 6
    conditions
    {
        Is Button Held(Host Player, Button(Reload)) == True;
        Host Player == Event Player;
        Global Variable(editorState) == 0;
        Global Variable(connectingFromNode) != -1;
        Global Variable(SelectedNodeID) == -1;
        Not(Player Variable(Host Player, cm_isInMenu)) == True;
    }

    // Element Count: 40, Action Count: 3
    // Largest Action Index: 0 using 24 Elements
    actions
    {
        Set Player Variable(Event Player, catalogItem_Set, Array(33, Null, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(connectingFromNode)), Ray Cast Hit Position(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), Null, Null, False)));
        Set Player Variable(Event Player, catalogItem_Revert, Array(34, Null, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(connectingFromNode)), Value In Array(Global Variable(Nodes_Node_Position), Global Variable(connectingFromNode))));
        Call Subroutine(Docment);
    }
}

// Rule Element Count: 61
rule("Editor: Place dummy")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 38, Condition Count: 6
    conditions
    {
        Is Button Held(Host Player, Button(Primary Fire)) == True;
        Global Variable(editorState) == 1;
        Not(Player Variable(Host Player, cm_isInMenu)) == True;
        Not(Player Variable(Host Player, releasePrimary)) == True;
        Global Variable(SelectedPlayer) == Null;
        Global Variable(SelectedNodeID) == -1;
    }

    // Element Count: 22, Action Count: 2
    // Largest Action Index: 1 using 21 Elements
    actions
    {
        Destroy All Dummy Bots;
        Create Dummy Bot(Value In Array(Global Variable(_extendedGlobalCollection), 11), Team 1, -1, Ray Cast Hit Position(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), Null, Null, False), Facing Direction Of(Host Player));
    }
}

// Rule Element Count: 23
rule("Editor: Exit dummy mode")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 20, Condition Count: 3
    conditions
    {
        Is Button Held(Host Player, Button(Secondary Fire)) == True;
        Global Variable(editorState) == 1;
        Not(Player Variable(Host Player, cm_isInMenu)) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Set Global Variable(editorState, 0);
    }
}

// Rule Element Count: 26
rule("Editor: Select dummy")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 19, Condition Count: 3
    conditions
    {
        Is Button Held(Host Player, Button(Primary Fire)) == True;
        Global Variable(SelectedPlayer) != Null;
        Not(Player Variable(Host Player, cm_isInMenu)) == True;
    }

    // Element Count: 6, Action Count: 1
    actions
    {
        Set Player Variable(Global Variable(SelectedPlayer), dummySelected, Not(Player Variable(Global Variable(SelectedPlayer), dummySelected)));
    }
}

// Rule Element Count: 20
rule("Start noclipping")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 2
    conditions
    {
        Host Player == Event Player;
        Global Variable(IsNoclipping) == True;
    }

    // Element Count: 10, Action Count: 6
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Set Gravity(Event Player, 0);
        Disable Movement Collision With Environment(Event Player, True);
        Disable Movement Collision With Players(Event Player);
        Set Move Speed(Event Player, 0);
        Disallow Button(Event Player, Button(Jump));
        Disallow Button(Event Player, Button(Crouch));
    }
}

// Rule Element Count: 20
rule("Stop noclipping")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 2
    conditions
    {
        Host Player == Event Player;
        Global Variable(IsNoclipping) == False;
    }

    // Element Count: 10, Action Count: 6
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Set Gravity(Event Player, 100);
        Enable Movement Collision With Environment(Event Player);
        Enable Movement Collision With Players(Event Player);
        Set Move Speed(Event Player, 100);
        Allow Button(Event Player, Button(Jump));
        Allow Button(Event Player, Button(Crouch));
    }
}

// Rule Element Count: 85
rule("Noclip propulsion")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 29, Condition Count: 3
    conditions
    {
        Host Player == Event Player;
        Global Variable(IsNoclipping) == True;
        Or(Or(Is Button Held(Event Player, Button(Crouch)), Is Button Held(Event Player, Button(Jump))), Compare(Throttle Of(Event Player), !=, Subtract(Left, Left))) == True;
    }

    // Element Count: 55, Action Count: 4
    // Largest Action Index: 1 using 43 Elements
    actions
    {
        Apply Impulse(Event Player, Multiply(Velocity Of(Event Player), -1), Multiply(Speed Of(Event Player), 0.03), To World, Incorporate Contrary Motion);
        Apply Impulse(Event Player, Normalize(Add(Add(Multiply(Facing Direction Of(Event Player), Z Component Of(Throttle Of(Event Player))), Multiply(World Vector Of(Left, Event Player, Rotation), X Component Of(Throttle Of(Event Player)))), Multiply(Up, Subtract(Is Button Held(Event Player, Button(Jump)), Is Button Held(Event Player, Button(Crouch)))))), Divide(Subtract(Add(60, Multiply(400, Is Button Held(Event Player, Button(Ability 1)))), Speed Of(Event Player)), 62.5), To World, Incorporate Contrary Motion);
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 48
rule("Noclip air resistance")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 35, Condition Count: 4
    conditions
    {
        Host Player == Event Player;
        Global Variable(IsNoclipping) == True;
        Or(Or(Is Button Held(Event Player, Button(Crouch)), Is Button Held(Event Player, Button(Jump))), Compare(Throttle Of(Event Player), !=, Subtract(Left, Left))) == False;
        Speed Of(Event Player) > 0.01;
    }

    // Element Count: 12, Action Count: 3
    // Largest Action Index: 0 using 9 Elements
    actions
    {
        Apply Impulse(Event Player, Multiply(Velocity Of(Event Player), -1), Multiply(Speed Of(Event Player), 0.06), To World, Incorporate Contrary Motion);
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 62
rule("Dummy: new state")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 15, Condition Count: 1
    conditions
    {
        Add(Player Variable(Event Player, dummyHighlighted), Multiply(Player Variable(Event Player, dummySelected), 2)) != Player Variable(Event Player, dummySavedOutlineState);
    }

    // Element Count: 46, Action Count: 10
    // Largest Action Index: 0 using 10 Elements
    actions
    {
        Set Player Variable(Event Player, dummySavedOutlineState, Add(Player Variable(Event Player, dummyHighlighted), Multiply(Player Variable(Event Player, dummySelected), 2)));
        If(Compare(Player Variable(Event Player, dummySavedOutlineState), ==, 0));
            Stop Forcing Player Outlines(Event Player, Host Player);
        Else If(Compare(Player Variable(Event Player, dummySavedOutlineState), ==, 1));
            Start Forcing Player Outlines(Event Player, Host Player, True, Color(Sky Blue), Always);
        Else If(Compare(Player Variable(Event Player, dummySavedOutlineState), ==, 2));
            Start Forcing Player Outlines(Event Player, Host Player, True, Color(Green), Always);
        Else If(Compare(Player Variable(Event Player, dummySavedOutlineState), ==, 3));
            Start Forcing Player Outlines(Event Player, Host Player, True, Color(Turquoise), Always);
        End;
    }
}

// Rule Element Count: 41
rule("Dummy: destroy")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 13, Condition Count: 2
    conditions
    {
        Is Button Held(Host Player, Button(Ultimate)) == True;
        Global Variable(SelectedNodeID) == -1;
    }

    // Element Count: 27, Action Count: 4
    // Largest Action Index: 2 using 11 Elements
    actions
    {
        Set Global Variable(destroy_0, Filtered Array(All Players(All Teams), And(Is Dummy Bot(Current Array Element), Player Variable(Current Array Element, dummySelected))));
        For Global Variable(waitlessI, 0, Count Of(Global Variable(destroy_0)), 1);
            Destroy Dummy Bot(Team Of(Value In Array(Global Variable(destroy_0), Global Variable(waitlessI))), Slot Of(Value In Array(Global Variable(destroy_0), Global Variable(waitlessI))));
        End;
    }
}

// Rule Element Count: 31
rule("Dummy: select/deselect all")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Is Button Held(Host Player, Button(Ability 1)) == True;
    }

    // Element Count: 23, Action Count: 2
    // Largest Action Index: 0 using 13 Elements
    actions
    {
        Set Global Variable At Index(_extendedGlobalCollection, 46, Not(Count Of(Filtered Array(All Players(All Teams), And(Is Dummy Bot(Current Array Element), Player Variable(Current Array Element, dummySelected))))));
        Set Player Variable(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element)), dummySelected, Value In Array(Global Variable(_extendedGlobalCollection), 46));
    }
}

// Rule Element Count: 31
rule("Dummy: teleport to cursor")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Is Button Held(Host Player, Button(Melee)) == True;
    }

    // Element Count: 23, Action Count: 1
    actions
    {
        Teleport(Filtered Array(All Players(All Teams), And(Is Dummy Bot(Current Array Element), Player Variable(Current Array Element, dummySelected))), Ray Cast Hit Position(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), Null, Null, False));
    }
}

// Rule Element Count: 300
rule("Subroutine: Dijkstra")
{
    event
    {
        Subroutine;
        Dijkstra;
    }

    // Element Count: 299, Action Count: 34
    // Largest Action Index: 16 using 52 Elements
    actions
    {
        If(Value In Array(Global Variable(_extendedGlobalCollection), 12));
            Log To Inspector(Custom String("Error: Attempted to pathfind while already active"));
            Set Player Variable(Event Player, returnValue_Dijkstra_Parents, Null);
            Skip(30);
        End;
        Set Global Variable At Index(_extendedGlobalCollection, 12, True);
        Set Global Variable(dijkstraProgressReport, 0);
        Set Player Variable(Event Player, unvisited, Mapped Array(Global Variable(Nodes_Node_UniqueID), Current Array Index));
        Set Player Variable(Event Player, distances, Mapped Array(Player Variable(Event Player, unvisited), 9999));
        Set Player Variable(Event Player, parents, Mapped Array(Player Variable(Event Player, unvisited), -1));
        Set Player Variable At Index(Event Player, distances, Player Variable(Event Player, source_0), 0);
        While(True);
            Skip If(Not(And(Count Of(Player Variable(Event Player, unvisited)), Or(Compare(Player Variable(Event Player, targets), ==, Null), Is True For Any(Player Variable(Event Player, targets), Array Contains(Player Variable(Event Player, unvisited), Current Array Element))))), 19);
            Set Player Variable(Event Player, current, First Of(Sorted Array(Player Variable(Event Player, unvisited), Value In Array(Player Variable(Event Player, distances), Current Array Element))));
            Set Player Variable(Event Player, currentID, Value In Array(Global Variable(Nodes_Node_UniqueID), Player Variable(Event Player, current)));
            Modify Player Variable(Event Player, unvisited, Remove From Array By Value, Player Variable(Event Player, current));
            Set Player Variable(Event Player, neighbors, Filtered Array(Mapped Array(Filtered Array(Mapped Array(Global Variable(Segments_ID), Current Array Index), Or(Compare(Value In Array(Global Variable(Segments_Node1), Current Array Element), ==, Player Variable(Event Player, currentID)), Compare(Value In Array(Global Variable(Segments_Node2), Current Array Element), ==, Player Variable(Event Player, currentID)))), Index Of Array Value(Global Variable(Nodes_Node_UniqueID), If-Then-Else(Compare(Value In Array(Global Variable(Segments_Node1), Current Array Element), ==, Player Variable(Event Player, currentID)), Value In Array(Global Variable(Segments_Node2), Current Array Element), Value In Array(Global Variable(Segments_Node1), Current Array Element)))), Array Contains(Player Variable(Event Player, unvisited), Current Array Element)));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 20, 0);
            While(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 20), <, Count Of(Player Variable(Event Player, neighbors))));
                Set Player Variable At Index(Event Player, _extendedPlayerCollection, 21, Value In Array(Player Variable(Event Player, neighbors), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 20)));
                Set Player Variable At Index(Event Player, _extendedPlayerCollection, 22, Value In Array(Global Variable(Nodes_Node_UniqueID), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 21)));
                Set Player Variable At Index(Event Player, _extendedPlayerCollection, 23, Mapped Array(Filtered Array(Mapped Array(Global Variable(Attributes_Value), Current Array Index), And(Compare(Value In Array(Global Variable(Attributes_Node1), Current Array Element), ==, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 22)), Compare(Value In Array(Global Variable(Attributes_Node2), Current Array Element), ==, Player Variable(Event Player, currentID)))), Value In Array(Global Variable(Attributes_Value), Current Array Element)));
                Set Player Variable At Index(Event Player, _extendedPlayerCollection, 24, Add(Value In Array(Player Variable(Event Player, distances), Player Variable(Event Player, current)), Distance Between(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, current)), Value In Array(Global Variable(Nodes_Node_Position), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 21)))));
                If(And(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 24), <, Value In Array(Player Variable(Event Player, distances), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 21))), Or(Compare(Count Of(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 23)), ==, 0), Is True For Any(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 23), Array Contains(Player Variable(Event Player, attributes), Current Array Element)))));
                    Set Player Variable At Index(Event Player, distances, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 21), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 24));
                    Set Player Variable At Index(Event Player, parents, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 21), Player Variable(Event Player, current));
                End;
                Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 20, Add, 1);
            End;
            Modify Global Variable(dijkstraProgressReport, Add, 1);
            Wait(0.016, Ignore Condition);
        End;
        Set Global Variable At Index(_extendedGlobalCollection, 12, False);
        Set Player Variable(Event Player, returnValue_Dijkstra_Parents, Player Variable(Event Player, parents));
    }
}

// Rule Element Count: 164
rule("Pathfind: Pathfind selected dummies")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 47, Condition Count: 6
    conditions
    {
        Host Player == Event Player;
        Global Variable(connectingFromNode) == -1;
        Is Button Held(Host Player, Button(Reload)) == True;
        Count Of(Filtered Array(All Players(All Teams), And(Is Dummy Bot(Current Array Element), Player Variable(Current Array Element, dummySelected)))) == True;
        Not(Value In Array(Global Variable(_extendedGlobalCollection), 12)) == True;
        Not(Player Variable(Host Player, releaseReload)) == True;
    }

    // Element Count: 116, Action Count: 20
    // Largest Action Index: 7 using 19 Elements
    actions
    {
        Set Player Variable(Host Player, releaseReload, True);
        Set Player Variable(Event Player, destination, Ray Cast Hit Position(Eye Position(Host Player), Add(Eye Position(Host Player), Multiply(Facing Direction Of(Host Player), 100)), Null, Null, False));
        Set Player Variable(Event Player, players, Filtered Array(All Players(All Teams), And(Is Dummy Bot(Current Array Element), Player Variable(Current Array Element, dummySelected))));
        Set Player Variable(Event Player, targetNodes, Empty Array);
        Set Player Variable(Event Player, source, First Of(Sorted Array(Mapped Array(Global Variable(Nodes_Node_UniqueID), Current Array Index), Distance Between(Value In Array(Global Variable(Nodes_Node_Position), Current Array Element), Player Variable(Event Player, destination)))));
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Player Variable(Event Player, destination), 2);
        For Global Variable(waitlessI, 0, Count Of(Player Variable(Event Player, players)), 1);
            Set Player Variable At Index(Event Player, targetNodes, Global Variable(waitlessI), First Of(Sorted Array(Mapped Array(Global Variable(Nodes_Node_UniqueID), Current Array Index), Distance Between(Value In Array(Global Variable(Nodes_Node_Position), Current Array Element), Position Of(Value In Array(Player Variable(Event Player, players), Global Variable(waitlessI)))))));
        End;
        Set Player Variable(Event Player, source_0, Player Variable(Event Player, source));
        Set Player Variable(Event Player, targets, Player Variable(Event Player, targetNodes));
        Set Player Variable(Event Player, attributes, Global Variable(pathfinderAttributes));
        Call Subroutine(Dijkstra);
        Set Player Variable(Event Player, dijkstra_Parents, Player Variable(Event Player, returnValue_Dijkstra_Parents));
        Set Player Variable(Player Variable(Event Player, players), travelPath, Player Variable(Event Player, dijkstra_Parents));
        Set Player Variable(Player Variable(Event Player, players), isPathfinding, True);
        Set Player Variable(Player Variable(Event Player, players), pathfindDestination, Player Variable(Event Player, destination));
        For Global Variable(waitlessI, 0, Count Of(Player Variable(Event Player, players)), 1);
            Set Player Variable(Value In Array(Player Variable(Event Player, players), Global Variable(waitlessI)), currentPathNode, Value In Array(Player Variable(Event Player, targetNodes), Global Variable(waitlessI)));
        End;
    }
}

// Rule Element Count: 28
rule("Pathfind: Begin")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, isPathfinding) == True;
    }

    // Element Count: 21, Action Count: 1
    actions
    {
        Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), If-Then-Else(Compare(Player Variable(Event Player, currentPathNode), ==, -1), Player Variable(Event Player, pathfindDestination), Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, currentPathNode)))), 1, To World, Replace Existing Throttle, Direction And Magnitude);
    }
}

// Rule Element Count: 399
rule("Pathfind: Next node")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 19, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, isPathfinding) == True;
        Distance Between(Position Of(Event Player), Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, currentPathNode))) < 0.4;
    }

    // Element Count: 379, Action Count: 55
    // Largest Action Index: 10 using 38 Elements
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 25, Player Variable(Event Player, currentPathNode));
        Set Player Variable(Event Player, currentPathNode, Value In Array(Player Variable(Event Player, travelPath), Player Variable(Event Player, currentPathNode)));
        If(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 6));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 6, False);
            Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), If-Then-Else(Compare(Player Variable(Event Player, currentPathNode), ==, -1), Player Variable(Event Player, pathfindDestination), Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, currentPathNode)))), 1, To World, Replace Existing Throttle, Direction And Magnitude);
        End;
        If(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 7));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 7, False);
            Stop Holding Button(Event Player, Button(Jump));
        End;
        Set Player Variable(Event Player, attributes_0, Mapped Array(Filtered Array(Mapped Array(Global Variable(Attributes_Value), Current Array Index), And(Compare(Value In Array(Global Variable(Attributes_Node1), Current Array Element), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 25))), Compare(Value In Array(Global Variable(Attributes_Node2), Current Array Element), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Player Variable(Event Player, currentPathNode))))), Value In Array(Global Variable(Attributes_Value), Current Array Element)));
        Set Player Variable(Event Player, executeRules, Filtered Array(Mapped Array(Global Variable(Rules_Actions_Data), Current Array Index), And(Compare(First Of(Value In Array(Global Variable(Rules_EnabledHeroes), Current Array Element)), !=, Array Contains(Array Slice(Value In Array(Global Variable(Rules_EnabledHeroes), Current Array Element), 1, 1000), Hero Of(Event Player))), Array Contains(Player Variable(Event Player, attributes_0), Value In Array(Global Variable(Rules_ExecutesOnAttribute), Current Array Element)))));
        If(Count Of(Player Variable(Event Player, executeRules)));
            For Player Variable(Event Player, a, 0, Count Of(Value In Array(Global Variable(Rules_Actions_Data), First Of(Player Variable(Event Player, executeRules)))), 1);
                Set Player Variable(Event Player, ruleAction_Data, Value In Array(Value In Array(Global Variable(Rules_Actions_Data), First Of(Player Variable(Event Player, executeRules))), Player Variable(Event Player, a)));
                "Wait"
                If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 0));
                    Wait(Value In Array(Player Variable(Event Player, ruleAction_Data), 1), Ignore Condition);
                End;
                "Jump"
                If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 1));
                    Press Button(Event Player, Button(Jump));
                "Start holding jump"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 2));
                    Start Holding Button(Event Player, Button(Jump));
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 7, True);
                "Stop holding jump"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 3));
                    Stop Holding Button(Event Player, Button(Jump));
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 7, False);
                "Ability 1"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 4));
                    Press Button(Event Player, Button(Ability 1));
                "Ability 2"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 5));
                    Press Button(Event Player, Button(Ability 2));
                "Melee"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 6));
                    Press Button(Event Player, Button(Melee));
                "Primary fire"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 7));
                    Press Button(Event Player, Button(Primary Fire));
                "Secondary fire"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 8));
                    Press Button(Event Player, Button(Secondary Fire));
                "Stop walking"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 9));
                    Stop Throttle In Direction(Event Player);
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 6, True);
                "Walk to destination"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 10));
                    Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), If-Then-Else(Compare(Player Variable(Event Player, currentPathNode), ==, -1), Player Variable(Event Player, pathfindDestination), Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, currentPathNode)))), 1, To World, Replace Existing Throttle, Direction And Magnitude);
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 6, False);
                "Look at floor"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 11));
                    Start Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 89), 1000, To World, None);
                "Look at destination"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 12));
                    Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Add(If-Then-Else(Compare(Player Variable(Event Player, currentPathNode), ==, -1), Player Variable(Event Player, pathfindDestination), Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, currentPathNode))), Vector(0, 1.75, 0))), 1000, To World, Direction And Turn Rate);
                "Wait for ability 1"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 13));
                    Wait(Ability Cooldown(Event Player, Button(Ability 1)), Ignore Condition);
                "Wait for ability 2"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 14));
                    Wait(Ability Cooldown(Event Player, Button(Ability 2)), Ignore Condition);
                "Wait for secondary fire"
                Else If(Compare(First Of(Player Variable(Event Player, ruleAction_Data)), ==, 15));
                    Wait(Ability Cooldown(Event Player, Button(Secondary Fire)), Ignore Condition);
                End;
            End;
        End;
    }
}

// Rule Element Count: 19
rule("Pathfind: Destination reached")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, isPathfinding) == True;
        Distance Between(Position Of(Event Player), Player Variable(Event Player, pathfindDestination)) < 0.4;
    }

    // Element Count: 2, Action Count: 2
    // Largest Action Index: 0 using 1 Elements
    actions
    {
        Set Player Variable(Event Player, isPathfinding, False);
        Stop Throttle In Direction(Event Player);
    }
}

// Rule Element Count: 11
rule("CM: Enter rule menu")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 13;
    }

    // Element Count: 3, Action Count: 2
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Set Global Variable(newState, 3);
        Call Subroutine(SetMenuState);
    }
}

// Rule Element Count: 81
rule("CM: Delete action")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 26;
    }

    // Element Count: 73, Action Count: 13
    // Largest Action Index: 10 using 20 Elements
    actions
    {
        Set Player Variable(Event Player, deleting_Data, Empty Array);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 26, Empty Array);
        For Global Variable(waitlessI, 0, Count Of(Global Variable(actionsSelected)), 1);
            If(Value In Array(Global Variable(actionsSelected), Global Variable(waitlessI)));
                Modify Player Variable(Event Player, deleting_Data, Append To Array, Array(Value In Array(Value In Array(Global Variable(Rules_Actions_Data), Global Variable(rulePage)), Global Variable(waitlessI))));
                Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 26, Append To Array, Global Variable(waitlessI));
            End;
        End;
        Set Global Variable(actionsSelected, Empty Array);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 27, Global Variable(rulePage));
        Set Player Variable(Event Player, catalogItem_Set, Array(35, Null, Player Variable(Event Player, deleting_Data), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 27), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 26)));
        Set Player Variable(Event Player, catalogItem_Revert, Array(36, Null, Player Variable(Event Player, deleting_Data), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 27), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 26)));
        Call Subroutine(Docment);
    }
}

// Rule Element Count: 12
rule("CM: Next rule")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 14;
    }

    // Element Count: 4, Action Count: 3
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Modify Global Variable(rulePage, Add, 1);
        Set Global Variable(actionsSelected, Empty Array);
        Call Subroutine(updateRuleContent);
    }
}

// Rule Element Count: 12
rule("CM: Previous rule")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 15;
    }

    // Element Count: 4, Action Count: 3
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Modify Global Variable(rulePage, Subtract, 1);
        Set Global Variable(actionsSelected, Empty Array);
        Call Subroutine(updateRuleContent);
    }
}

// Rule Element Count: 22
rule("CM: Create rule")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 16;
    }

    // Element Count: 14, Action Count: 4
    // Largest Action Index: 1 using 5 Elements
    actions
    {
        Set Global Variable(rulePage, Count Of(Global Variable(Rules_Actions_Data)));
        Set Player Variable(Event Player, catalogItem_Set, Array(37, Null));
        Set Player Variable(Event Player, catalogItem_Revert, Array(38, Null));
        Call Subroutine(Docment);
    }
}

// Rule Element Count: 98
rule("CM: Wait time")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 34, Condition Count: 1
    conditions
    {
        Or(Or(Or(Compare(Player Variable(Event Player, cm_currActionID), ==, 22), Compare(Player Variable(Event Player, cm_currActionID), ==, 21)), Compare(Player Variable(Event Player, cm_currActionID), ==, 24)), Compare(Player Variable(Event Player, cm_currActionID), ==, 23)) == True;
    }

    // Element Count: 63, Action Count: 11
    // Largest Action Index: 10 using 19 Elements
    actions
    {
        If(Compare(Player Variable(Event Player, cm_currActionID), ==, 22));
            Modify Global Variable At Index(_extendedGlobalCollection, 19, Subtract, 0.02);
        Else If(Compare(Player Variable(Event Player, cm_currActionID), ==, 21));
            Modify Global Variable At Index(_extendedGlobalCollection, 19, Add, 0.02);
        Else If(Compare(Player Variable(Event Player, cm_currActionID), ==, 24));
            Modify Global Variable At Index(_extendedGlobalCollection, 19, Subtract, 0.1);
        Else If(Compare(Player Variable(Event Player, cm_currActionID), ==, 23));
            Modify Global Variable At Index(_extendedGlobalCollection, 19, Add, 0.1);
        End;
        Modify Global Variable At Index(_extendedGlobalCollection, 19, Max, 0.02);
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 20)), Custom String("{0}{1}{2}", Custom String("wait time: "), Value In Array(Global Variable(_extendedGlobalCollection), 19), Custom String(" seconds")));
    }
}

// Rule Element Count: 46
rule("CM: Wait confirm")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 25;
    }

    // Element Count: 38, Action Count: 6
    // Largest Action Index: 1 using 20 Elements
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 28, Global Variable(rulePage));
        Set Player Variable(Event Player, catalogItem_Set, Array(39, Null, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 28), Array(0, Value In Array(Global Variable(_extendedGlobalCollection), 19))));
        Set Player Variable(Event Player, catalogItem_Revert, Array(40, Null, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 28)));
        Call Subroutine(Docment);
        Set Global Variable(newState, 3);
        Call Subroutine(SetMenuState);
    }
}

// Rule Element Count: 30
rule("CM: Toggle all")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 29;
    }

    // Element Count: 22, Action Count: 2
    // Largest Action Index: 0 using 21 Elements
    actions
    {
        "If there are any disabled heroes, then turn the switch on.
Otherwise, turn it off."
        Set Global Variable At Index(Rules_EnabledHeroes, Global Variable(rulePage), Array(Or(Not(First Of(Value In Array(Global Variable(Rules_EnabledHeroes), Global Variable(rulePage)))), Compare(Count Of(Value In Array(Global Variable(Rules_EnabledHeroes), Global Variable(rulePage))), >, 1))));
        Call Subroutine(updateAllHeroIcons);
    }
}

// Rule Element Count: 49
rule("CM: Exit rule menu")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 45, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 1;
        Or(Or(Or(Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 3), Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 7)), Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 8)), Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 2)) == True;
    }

    // Element Count: 3, Action Count: 2
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Set Global Variable(newState, 1);
        Call Subroutine(SetMenuState);
    }
}

// Rule Element Count: 26
rule("CM: Exit action menu")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 15, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 1;
        First Of(Player Variable(Event Player, _extendedPlayerCollection)) == 4;
    }

    // Element Count: 10, Action Count: 7
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        If(Global Variable(actionScrollBar));
            Set Global Variable(DisposeStack, Global Variable(actionScrollBar));
            Call Subroutine(Dispose);
            Set Global Variable(actionScrollBar, Null);
        End;
        Set Global Variable(newState, 3);
        Call Subroutine(SetMenuState);
    }
}

// Rule Element Count: 143
rule("Subroutine: Open Add Action menu")
{
    event
    {
        Subroutine;
        OpenActionSelectMenu;
    }

    // Element Count: 142, Action Count: 20
    // Largest Action Index: 12 using 34 Elements
    actions
    {
        Set Global Variable(newState, 4);
        Call Subroutine(SetMenuState);
        Set Global Variable(actionScrollBar, Index Of Array Value(Global Variable(_classIndexes), 0));
        Set Global Variable(actionScrollBar, If-Then-Else(Compare(Global Variable(actionScrollBar), ==, -1), Count Of(Global Variable(_classIndexes)), Global Variable(actionScrollBar)));
        Set Global Variable At Index(_classIndexes, Global Variable(actionScrollBar), 2);
        Set Global Variable At Index(_objectVariable_1, Global Variable(actionScrollBar), 0);
        Set Global Variable At Index(_objectVariable_0, Global Variable(actionScrollBar), 0.75);
        Set Global Variable At Index(_objectVariable_3, Global Variable(actionScrollBar), Value In Array(Player Variable(Host Player, _extendedPlayerCollection), 8));
        Set Global Variable At Index(_objectVariable_2, Global Variable(actionScrollBar), Mapped Array(Value In Array(Global Variable(_objectVariable_3), Global Variable(actionScrollBar)), Color(White)));
        Set Global Variable At Index(_objectVariable_4, Global Variable(actionScrollBar), Mapped Array(Value In Array(Global Variable(_objectVariable_3), Global Variable(actionScrollBar)), -1));
        Set Global Variable At Index(_objectVariable_9, Global Variable(actionScrollBar), Array(41, Null));
        Set Global Variable At Index(_objectVariable_7, Global Variable(actionScrollBar), 8);
        Set Global Variable(input, Array(Custom String("↑"), Array(18, Global Variable(actionScrollBar), 1), Array(18, Global Variable(actionScrollBar), 8), 0, 0.75, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_5, Global Variable(actionScrollBar), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("↓"), Array(19, Global Variable(actionScrollBar), 1), Array(19, Global Variable(actionScrollBar), 8), 0, -0.825, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_6, Global Variable(actionScrollBar), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(UpdateStack, Global Variable(actionScrollBar));
        Call Subroutine(Update);
    }
}

// Rule Element Count: 17
rule("CM: Exit wait selection")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 15, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 1;
        First Of(Player Variable(Event Player, _extendedPlayerCollection)) == 5;
    }

    // Element Count: 1, Action Count: 1
    actions
    {
        Call Subroutine(OpenActionSelectMenu);
    }
}

// Rule Element Count: 41
rule("Store action labels")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 5, Condition Count: 1
    conditions
    {
        Has Spawned(Host Player) == True;
    }

    // Element Count: 35, Action Count: 1
    actions
    {
        Set Player Variable At Index(Host Player, _extendedPlayerCollection, 8, Array(Custom String("wait"), Custom String("jump"), Custom String("start holding jump"), Custom String("stop holding jump"), Custom String("ability 1"), Custom String("ability 2"), Custom String("melee"), Custom String("primary fire"), Custom String("secondary fire"), Custom String("stop walking"), Custom String("walk to destination"), Custom String("look at floor"), Custom String("look at destination"), Custom String("wait for ability 1"), Custom String("wait for ability 2"), Custom String("wait for secondary fire")));
    }
}

// Rule Element Count: 40
rule("CM: Scroll up")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        First Of(Player Variable(Event Player, cm_currActionID)) == 18;
    }

    // Element Count: 31, Action Count: 3
    // Largest Action Index: 0 using 24 Elements
    actions
    {
        Set Global Variable At Index(_objectVariable_8, Value In Array(Player Variable(Event Player, cm_currActionID), 1), Max(Subtract(Value In Array(Global Variable(_objectVariable_8), Value In Array(Player Variable(Event Player, cm_currActionID), 1)), Value In Array(Player Variable(Event Player, cm_currActionID), 2)), 0));
        Set Global Variable(UpdateStack, Value In Array(Player Variable(Event Player, cm_currActionID), 1));
        Call Subroutine(Update);
    }
}

// Rule Element Count: 58
rule("CM: Scroll down")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        First Of(Player Variable(Event Player, cm_currActionID)) == 19;
    }

    // Element Count: 49, Action Count: 3
    // Largest Action Index: 0 using 42 Elements
    actions
    {
        Set Global Variable At Index(_objectVariable_8, Value In Array(Player Variable(Event Player, cm_currActionID), 1), Min(Add(Value In Array(Global Variable(_objectVariable_8), Value In Array(Player Variable(Event Player, cm_currActionID), 1)), Value In Array(Player Variable(Event Player, cm_currActionID), 2)), Subtract(Count Of(Value In Array(Global Variable(_objectVariable_3), Value In Array(Player Variable(Event Player, cm_currActionID), 1))), Value In Array(Global Variable(_objectVariable_7), Value In Array(Player Variable(Event Player, cm_currActionID), 1)))));
        Set Global Variable(UpdateStack, Value In Array(Player Variable(Event Player, cm_currActionID), 1));
        Call Subroutine(Update);
    }
}

// Rule Element Count: 39
rule("CM: Scroll item")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        First Of(Player Variable(Event Player, cm_currActionID)) == 20;
    }

    // Element Count: 30, Action Count: 3
    // Largest Action Index: 0 using 18 Elements
    actions
    {
        Modify Global Variable(lambdaParameter_0, Append To Array, Array(Index Of Array Value(Value In Array(Global Variable(_objectVariable_4), Value In Array(Player Variable(Event Player, cm_currActionID), 1)), Value In Array(Player Variable(Event Player, cm_currActionID), 2))));
        Modify Global Variable(func_group, Append To Array, Array(Value In Array(Global Variable(_objectVariable_9), Value In Array(Player Variable(Event Player, cm_currActionID), 1))));
        Call Subroutine(func_group);
    }
}

// Rule Element Count: 96
rule("CM: Number selector: Update")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 18, Condition Count: 1
    conditions
    {
        Array Contains(Array(7, 8, 9, 10), First Of(Player Variable(Event Player, cm_currActionID))) == True;
    }

    // Element Count: 77, Action Count: 5
    // Largest Action Index: 0 using 31 Elements
    actions
    {
        Modify Global Variable At Index(_objectVariable_0, Value In Array(Player Variable(Event Player, cm_currActionID), 1), Add, Value In Array(Array(1, 5, -1, -5), Index Of Array Value(Array(7, 8, 9, 10), First Of(Player Variable(Event Player, cm_currActionID)))));
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_objectVariable_1), Value In Array(Player Variable(Event Player, cm_currActionID), 1))), Custom String(" {0} ", Value In Array(Global Variable(_objectVariable_0), Value In Array(Player Variable(Event Player, cm_currActionID), 1))));
        Modify Global Variable(lambdaParameter_0, Append To Array, Array(Value In Array(Global Variable(_objectVariable_0), Value In Array(Player Variable(Event Player, cm_currActionID), 1))));
        Modify Global Variable(func_group, Append To Array, Array(Value In Array(Global Variable(_objectVariable_4), Value In Array(Player Variable(Event Player, cm_currActionID), 1))));
        Call Subroutine(func_group);
    }
}

// Rule Element Count: 37
rule("(Subroutine) CM: Update pathfinder attributes list")
{
    event
    {
        Subroutine;
        UpdatePathfinderAttributesList;
    }

    // Element Count: 36, Action Count: 8
    // Largest Action Index: 7 using 10 Elements
    actions
    {
        Set Global Variable(result, Custom String(""));
        If(Count Of(Global Variable(pathfinderAttributes)));
            Set Global Variable(result, Custom String("{0}", First Of(Global Variable(pathfinderAttributes))));
            For Global Variable(waitlessI, 1, Count Of(Global Variable(pathfinderAttributes)), 1);
                Set Global Variable(result, Custom String("{0}, {1}", Global Variable(result), Value In Array(Global Variable(pathfinderAttributes), Global Variable(waitlessI))));
            End;
        End;
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 22)), Global Variable(result));
    }
}

// Rule Element Count: 51
rule("(Subroutine) CM: Update pathfinder attribute selector")
{
    event
    {
        Subroutine;
        UpdatePathfinderAttributeSelecto;
    }

    // Element Count: 50, Action Count: 7
    // Largest Action Index: 1 using 10 Elements
    actions
    {
        If(Array Contains(Global Variable(pathfinderAttributes), Value In Array(Global Variable(_objectVariable_0), Global Variable(pathfinderAttributeSelector))));
            Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 23)), Custom String("remove"));
            Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 23)), Color(Red));
        Else;
            Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 23)), Custom String("add"));
            Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 23)), Color(Green));
        End;
    }
}

// Rule Element Count: 200
rule("CM: Pathfinder settings")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 27;
    }

    // Element Count: 192, Action Count: 25
    // Largest Action Index: 17 using 30 Elements
    actions
    {
        Set Global Variable(newState, 6);
        Call Subroutine(SetMenuState);
        Set Global Variable(input, Array(Null, 0, 0, 0, 0.2, 0.2, 0.2, Color(Yellow), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 22, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Null, 28, 0, 0, -0.2, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_extendedGlobalCollection, 23, Global Variable(returnValue___createButtonSubrou));
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Array(Value In Array(Global Variable(_extendedGlobalCollection), 22), Value In Array(Global Variable(_extendedGlobalCollection), 23)));
        Call Subroutine(UpdatePathfinderAttributesList);
        Set Global Variable(pathfinderAttributeSelector, Index Of Array Value(Global Variable(_classIndexes), 0));
        Set Global Variable(pathfinderAttributeSelector, If-Then-Else(Compare(Global Variable(pathfinderAttributeSelector), ==, -1), Count Of(Global Variable(_classIndexes)), Global Variable(pathfinderAttributeSelector)));
        Set Global Variable At Index(_classIndexes, Global Variable(pathfinderAttributeSelector), 1);
        Set Global Variable At Index(_objectVariable_0, Global Variable(pathfinderAttributeSelector), 0);
        Set Global Variable(input, Array(Custom String(" {0} ", 0), 0, 0, 0, 0, 0.2, 0.2, Color(Yellow), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_1, Global Variable(pathfinderAttributeSelector), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("→"), Array(7, Global Variable(pathfinderAttributeSelector)), Array(8, Global Variable(pathfinderAttributeSelector)), 0.1775, 0, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_3, Global Variable(pathfinderAttributeSelector), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("←"), Array(9, Global Variable(pathfinderAttributeSelector)), Array(10, Global Variable(pathfinderAttributeSelector)), -0.1775, 0, 0.2, 0.2, Color(White), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Set Global Variable At Index(_objectVariable_2, Global Variable(pathfinderAttributeSelector), Global Variable(returnValue___createButtonSubrou));
        Set Global Variable At Index(_objectVariable_4, Global Variable(pathfinderAttributeSelector), Array(42, Null));
        Call Subroutine(UpdatePathfinderAttributeSelecto);
    }
}

// Rule Element Count: 61
rule("CM: Pathfinder settings back")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 15, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 1;
        First Of(Player Variable(Event Player, _extendedPlayerCollection)) == 6;
    }

    // Element Count: 45, Action Count: 18
    // Largest Action Index: 2 using 5 Elements
    actions
    {
        Set Global Variable(newState, 1);
        Call Subroutine(SetMenuState);
        Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_1), Global Variable(pathfinderAttributeSelector)));
        Call Subroutine(DestroyButton);
        Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_3), Global Variable(pathfinderAttributeSelector)));
        Call Subroutine(DestroyButton);
        Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_2), Global Variable(pathfinderAttributeSelector)));
        Call Subroutine(DestroyButton);
        If(Global Variable(pathfinderAttributeSelector));
            Set Global Variable At Index(_classIndexes, Global Variable(pathfinderAttributeSelector), 0);
            Set Global Variable At Index(_objectVariable_0, Global Variable(pathfinderAttributeSelector), 0);
            Set Global Variable At Index(_objectVariable_1, Global Variable(pathfinderAttributeSelector), 0);
            Set Global Variable At Index(_objectVariable_2, Global Variable(pathfinderAttributeSelector), 0);
            Set Global Variable At Index(_objectVariable_3, Global Variable(pathfinderAttributeSelector), 0);
            Set Global Variable At Index(_objectVariable_4, Global Variable(pathfinderAttributeSelector), 0);
        Else;
            Log To Inspector(Custom String("[Error] Attempted to delete invalid reference in number selector.del at line 80"));
        End;
    }
}

// Rule Element Count: 35
rule("CM: Add or remove pathfinding attribute")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 28;
    }

    // Element Count: 27, Action Count: 8
    // Largest Action Index: 0 using 8 Elements
    actions
    {
        Set Player Variable(Event Player, index, Index Of Array Value(Global Variable(pathfinderAttributes), Value In Array(Global Variable(_objectVariable_0), Global Variable(pathfinderAttributeSelector))));
        If(Compare(Player Variable(Event Player, index), ==, -1));
            Modify Global Variable(pathfinderAttributes, Append To Array, Value In Array(Global Variable(_objectVariable_0), Global Variable(pathfinderAttributeSelector)));
        Else;
            Modify Global Variable(pathfinderAttributes, Remove From Array By Index, Player Variable(Event Player, index));
        End;
        Call Subroutine(UpdatePathfinderAttributeSelecto);
        Call Subroutine(UpdatePathfinderAttributesList);
    }
}

// Rule Element Count: 1
rule("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒【Josbird's Cursor Menu】▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒")
{
    event
    {
        Ongoing - Global;
    }
}

// Rule Element Count: 79
rule("Global init")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 78, Action Count: 6
    // Largest Action Index: 5 using 29 Elements
    actions
    {
        Set Global Variable At Index(_extendedGlobalCollection, 25, Workshop Setting Real(Custom String("Josbird's Cursor Menu"), Custom String("Menu Width"), 5, 0, 10, 1));
        Set Global Variable At Index(_extendedGlobalCollection, 26, Workshop Setting Real(Custom String("Josbird's Cursor Menu"), Custom String("Menu Height"), 2.5, 0, 5, 2));
        Set Global Variable At Index(_extendedGlobalCollection, 27, Workshop Setting Toggle(Custom String("Josbird's Cursor Menu"), Custom String("Button click sounds"), True, 3));
        Set Global Variable At Index(_extendedGlobalCollection, 28, Workshop Setting Toggle(Custom String("Josbird's Cursor Menu"), Custom String("Debug mode (show button click areas)"), False, 4));
        Set Global Variable At Index(_extendedGlobalCollection, 29, Workshop Setting Toggle(Custom String("Josbird's Cursor Menu"), Custom String("Menu disables game hud"), True, 7));
        Set Global Variable At Index(_extendedGlobalCollection, 30, Array(Custom String("exit menu"), Subtract(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 25), 2), 0.15), Subtract(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 26), 2), 0.15), 0.35));
    }
}

// Rule Element Count: 151
rule("Create menu cursor")
{
    event
    {
        Subroutine;
        createCursor;
    }

    // Element Count: 150, Action Count: 4
    // Largest Action Index: 0 using 74 Elements
    actions
    {
        Create In-World Text(Filtered Array(Event Player, And(Player Variable(Event Player, cm_isInMenu), Compare(Modulo(Total Time Elapsed, 0.032), <, 0.016))), Custom String("▲"), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Angle Difference(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Horizontal Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Angle Difference(Vertical Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 3, Do Not Clip, Visible To Position String and Color, Color(White), Default Visibility);
        Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
        Create In-World Text(Filtered Array(Event Player, And(Player Variable(Event Player, cm_isInMenu), Compare(Modulo(Total Time Elapsed, 0.032), >=, 0.016))), Custom String("▲"), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Angle Difference(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Horizontal Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Angle Difference(Vertical Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 3, Do Not Clip, Visible To Position String and Color, Color(White), Default Visibility);
        Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
    }
}

// Rule Element Count: 281
rule("Create menu border corners")
{
    event
    {
        Subroutine;
        createBorderCorners;
    }

    // Element Count: 280, Action Count: 8
    // Largest Action Index: 4 using 72 Elements
    actions
    {
        Create In-World Text(If-Then-Else(Player Variable(Event Player, cm_isInMenu), Event Player, Null), Custom String("┌"), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Divide(Multiply(Value In Array(Global Variable(_extendedGlobalCollection), 25), -1), 2), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 26), 2), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 4, Do Not Clip, Visible To And Position, Color(White), Default Visibility);
        Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
        Create In-World Text(If-Then-Else(Player Variable(Event Player, cm_isInMenu), Event Player, Null), Custom String("┐"), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 25), 2), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 26), 2), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 4, Do Not Clip, Visible To And Position, Color(White), Default Visibility);
        Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
        Create In-World Text(If-Then-Else(Player Variable(Event Player, cm_isInMenu), Event Player, Null), Custom String("└"), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Divide(Multiply(Value In Array(Global Variable(_extendedGlobalCollection), 25), -1), 2), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Divide(Multiply(Value In Array(Global Variable(_extendedGlobalCollection), 26), -1), 2), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 4, Do Not Clip, Visible To And Position, Color(White), Default Visibility);
        Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
        Create In-World Text(If-Then-Else(Player Variable(Event Player, cm_isInMenu), Event Player, Null), Custom String("┘"), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 25), 2), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Divide(Multiply(Value In Array(Global Variable(_extendedGlobalCollection), 26), -1), 2), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 4, Do Not Clip, Visible To And Position, Color(White), Default Visibility);
        Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
    }
}

// Rule Element Count: 277
rule("Create menu border edges")
{
    event
    {
        Subroutine;
        createBorderEdges;
    }

    // Element Count: 276, Action Count: 16
    // Largest Action Index: 14 using 74 Elements
    actions
    {
        Set Global Variable(stringBuilder, Custom String(""));
        For Player Variable(Event Player, cm_i, 0, Subtract(Multiply(4.6, Value In Array(Global Variable(_extendedGlobalCollection), 25)), 1), 1);
            Set Global Variable(stringBuilder, Custom String("{0}{1}", Global Variable(stringBuilder), Custom String("━")));
        End;
        Create In-World Text(If-Then-Else(Player Variable(Event Player, cm_isInMenu), Event Player, Null), Global Variable(stringBuilder), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Multiply(Subtract(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 26), 2), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90))), Multiply(3, Facing Direction Of(Event Player)))))), 4, Do Not Clip, Visible To And Position, Color(White), Default Visibility);
        Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
        Create In-World Text(If-Then-Else(Player Variable(Event Player, cm_isInMenu), Event Player, Null), Global Variable(stringBuilder), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Multiply(Subtract(Divide(Multiply(Value In Array(Global Variable(_extendedGlobalCollection), 26), -1), 2), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90))), Multiply(3, Facing Direction Of(Event Player)))))), 4, Do Not Clip, Visible To And Position, Color(White), Default Visibility);
        Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
        Set Global Variable(stringBuilder, Custom String(""));
        For Player Variable(Event Player, cm_i, 0.3, Value In Array(Global Variable(_extendedGlobalCollection), 26), 0.3);
            Set Global Variable(stringBuilder, Custom String("{0}{1}", Global Variable(stringBuilder), Custom String("┃\n")));
        End;
        Create In-World Text(If-Then-Else(Player Variable(Event Player, cm_isInMenu), Event Player, Null), Global Variable(stringBuilder), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 25), 2), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Multiply(-0.095, Round To Integer(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 26), 0.3), Down)), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 4, Do Not Clip, Visible To And Position, Color(White), Default Visibility);
        Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
        Create In-World Text(If-Then-Else(Player Variable(Event Player, cm_isInMenu), Event Player, Null), Global Variable(stringBuilder), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Divide(Multiply(Value In Array(Global Variable(_extendedGlobalCollection), 25), -1), 2), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Multiply(-0.095, Round To Integer(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 26), 0.3), Down)), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 4, Do Not Clip, Visible To And Position, Color(White), Default Visibility);
        Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
    }
}

// Rule Element Count: 246
rule("CM: Host Just-In-Time Preload Optimization")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 4, Condition Count: 1
    conditions
    {
        Event Player == Host Player;
    }

    // Element Count: 241, Action Count: 11
    // Largest Action Index: 2 using 216 Elements
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 29, 0);
        While(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29), <, 50));
            Create In-World Text(Update Every Frame(If-Then-Else(And(Player Variable(Event Player, cm_isInMenu), Compare(Evaluate Once(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29)), <, Count Of(Player Variable(Event Player, cm_buttons_Label)))), Event Player, Null)), Update Every Frame(Value In Array(Player Variable(Event Player, cm_buttons_Label), Evaluate Once(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29)))), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Value In Array(Player Variable(Event Player, cm_buttons_PosX), Evaluate Once(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29))), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Value In Array(Player Variable(Event Player, cm_buttons_PosY), Evaluate Once(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29))), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 2.8, Do Not Clip, Visible To Position String and Color, If-Then-Else(And(And(Value In Array(Player Variable(Event Player, cm_buttons_Interactable), Evaluate Once(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29))), Compare(Absolute Value(Subtract(Angle Difference(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Horizontal Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), Value In Array(Player Variable(Event Player, cm_buttons_PosX), Evaluate Once(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29))))), <=, Divide(Value In Array(Player Variable(Event Player, cm_buttons_ClickWidth), Evaluate Once(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29))), 2))), Compare(Absolute Value(Subtract(Angle Difference(Vertical Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), Value In Array(Player Variable(Event Player, cm_buttons_PosY), Evaluate Once(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29))))), <=, Divide(Value In Array(Player Variable(Event Player, cm_buttons_ClickHeight), Evaluate Once(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29))), 2))), Value In Array(Player Variable(Event Player, cm_buttons_HoverColor), Evaluate Once(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29))), Value In Array(Player Variable(Event Player, cm_buttons_DefaultColor), Evaluate Once(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 29)))), Default Visibility);
            Wait(0.016, Ignore Condition);
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 29, Add, 1);
        End;
        Set Player Variable(Event Player, cm_menuFrame, Empty Array);
        Call Subroutine(createCursor);
        Wait(0.016, Ignore Condition);
        Call Subroutine(createBorderCorners);
        Call Subroutine(createBorderEdges);
    }
}

// Rule Element Count: 47
rule("Toggle menu")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 42, Condition Count: 6
    conditions
    {
        Not(Is Dummy Bot(Event Player)) == True;
        Is Button Held(Event Player, Button(Interact)) == True;
        Not(Is Communicating Any Emote(Event Player)) == True;
        Not(Player Variable(Event Player, popupWindowVisible)) == True;
        Not(Player Variable(Event Player, releaseInteract)) == True;
        Not(Value In Array(Global Variable(_extendedGlobalCollection), 3)) == True;
    }

    // Element Count: 4, Action Count: 1
    actions
    {
        Set Player Variable(Event Player, cm_isInMenu, Not(Player Variable(Event Player, cm_isInMenu)));
    }
}

// Rule Element Count: 136
rule("Create exit button")
{
    event
    {
        Subroutine;
        createExitButton;
    }

    // Element Count: 135, Action Count: 2
    // Largest Action Index: 0 using 133 Elements
    actions
    {
        Create Icon(If-Then-Else(Not(Value In Array(Global Variable(_extendedGlobalCollection), 3)), Event Player, Null), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Value In Array(Value In Array(Global Variable(_extendedGlobalCollection), 30), 1), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Value In Array(Value In Array(Global Variable(_extendedGlobalCollection), 30), 2), 0.25), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), X, Visible To Position and Color, If-Then-Else(And(Compare(Absolute Value(Subtract(Angle Difference(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Horizontal Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), Value In Array(Value In Array(Global Variable(_extendedGlobalCollection), 30), 1))), <=, Divide(Value In Array(Value In Array(Global Variable(_extendedGlobalCollection), 30), 3), 2)), Compare(Absolute Value(Subtract(Angle Difference(Vertical Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), Value In Array(Value In Array(Global Variable(_extendedGlobalCollection), 30), 2))), <=, Divide(Value In Array(Value In Array(Global Variable(_extendedGlobalCollection), 30), 3), 2))), Color(Yellow), Color(Red)), False);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 9, Last Created Entity);
    }
}

// Rule Element Count: 252
rule("Create click areas")
{
    event
    {
        Subroutine;
        createClickAreas;
    }

    // Element Count: 251, Action Count: 6
    // Largest Action Index: 1 using 121 Elements
    actions
    {
        For Player Variable(Event Player, cm_i, 0, Count Of(Player Variable(Event Player, cm_buttons_Label)), 1);
            Create In-World Text(Event Player, Custom String("┌"), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Subtract(Value In Array(Player Variable(Event Player, cm_buttons_PosX), Evaluate Once(Player Variable(Event Player, cm_i))), Divide(Value In Array(Player Variable(Event Player, cm_buttons_ClickWidth), Evaluate Once(Player Variable(Event Player, cm_i))), 2)), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Add(Value In Array(Player Variable(Event Player, cm_buttons_PosY), Evaluate Once(Player Variable(Event Player, cm_i))), Divide(Value In Array(Player Variable(Event Player, cm_buttons_ClickHeight), Evaluate Once(Player Variable(Event Player, cm_i))), 2)), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 2, Do Not Clip, Visible To And Position, If-Then-Else(Not(Value In Array(Player Variable(Event Player, cm_buttons_Visible), Evaluate Once(Player Variable(Event Player, cm_i)))), Custom Color(0, 0, 0, 0), If-Then-Else(Value In Array(Player Variable(Event Player, cm_buttons_Interactable), Evaluate Once(Player Variable(Event Player, cm_i))), Color(Yellow), Color(White))), Default Visibility);
            Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
            Create In-World Text(Event Player, Custom String("┘"), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(Add(Value In Array(Player Variable(Event Player, cm_buttons_PosX), Evaluate Once(Player Variable(Event Player, cm_i))), Divide(Value In Array(Player Variable(Event Player, cm_buttons_ClickWidth), Evaluate Once(Player Variable(Event Player, cm_i))), 2)), Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(Subtract(Subtract(Value In Array(Player Variable(Event Player, cm_buttons_PosY), Evaluate Once(Player Variable(Event Player, cm_i))), Divide(Value In Array(Player Variable(Event Player, cm_buttons_ClickHeight), Evaluate Once(Player Variable(Event Player, cm_i))), 2)), 0.2), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 2, Do Not Clip, Visible To And Position, If-Then-Else(Not(Value In Array(Player Variable(Event Player, cm_buttons_Visible), Evaluate Once(Player Variable(Event Player, cm_i)))), Custom Color(0, 0, 0, 0), If-Then-Else(Value In Array(Player Variable(Event Player, cm_buttons_Interactable), Evaluate Once(Player Variable(Event Player, cm_i))), Color(Yellow), Color(White))), Default Visibility);
            Modify Player Variable(Event Player, cm_menuFrame, Append To Array, Last Text ID);
        End;
    }
}

// Rule Element Count: 37
rule("Open menu")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 12, Condition Count: 2
    conditions
    {
        Not(Is Dummy Bot(Event Player)) == True;
        Player Variable(Event Player, cm_isInMenu) == True;
    }

    // Element Count: 24, Action Count: 13
    // Largest Action Index: 4 using 5 Elements
    actions
    {
        Set Aim Speed(Event Player, 15);
        Set Player Variable(Event Player, cm_menuOriginalFacing, Facing Direction Of(Event Player));
        Set Primary Fire Enabled(Event Player, False);
        Set Secondary Fire Enabled(Event Player, False);
        If(Value In Array(Global Variable(_extendedGlobalCollection), 29));
            Disable Hero HUD(Event Player);
            Disable Game Mode HUD(Event Player);
        End;
        Call Subroutine(createExitButton);
        Wait(0.016, Ignore Condition);
        If(Value In Array(Global Variable(_extendedGlobalCollection), 28));
            Call Subroutine(createClickAreas);
        End;
    }
}

// Rule Element Count: 24
rule("Close menu")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 2
    conditions
    {
        Not(Is Dummy Bot(Event Player)) == True;
        Not(Player Variable(Event Player, cm_isInMenu)) == True;
    }

    // Element Count: 10, Action Count: 4
    // Largest Action Index: 3 using 6 Elements
    actions
    {
        Set Aim Speed(Event Player, 100);
        Set Primary Fire Enabled(Event Player, True);
        Set Secondary Fire Enabled(Event Player, True);
        Destroy Icon(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 9));
    }
}

// Rule Element Count: 16
rule("Game mode hud")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Not(Player Variable(Event Player, cm_isInMenu)) == True;
        Not(Player Variable(Event Player, popupWindowVisible)) == True;
    }

    // Element Count: 1, Action Count: 1
    actions
    {
        Enable Hero HUD(Event Player);
    }
}

// Rule Element Count: 207
rule("Detect button press")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 18, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, cm_isInMenu) == True;
        Or(Is Button Held(Event Player, Button(Primary Fire)), Is Button Held(Event Player, Button(Secondary Fire))) == True;
    }

    // Element Count: 188, Action Count: 17
    // Largest Action Index: 5 using 67 Elements
    actions
    {
        Set Player Variable(Event Player, primary, Is Button Held(Event Player, Button(Primary Fire)));
        If(And(Compare(Absolute Value(Subtract(Angle Difference(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Horizontal Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), Value In Array(Value In Array(Global Variable(_extendedGlobalCollection), 30), 1))), <=, Divide(Value In Array(Value In Array(Global Variable(_extendedGlobalCollection), 30), 3), 2)), Compare(Absolute Value(Subtract(Angle Difference(Vertical Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), Value In Array(Value In Array(Global Variable(_extendedGlobalCollection), 30), 2))), <=, Divide(Value In Array(Value In Array(Global Variable(_extendedGlobalCollection), 30), 3), 2))));
            Set Player Variable(Event Player, cm_currActionID, First Of(Value In Array(Global Variable(_extendedGlobalCollection), 30)));
        End;
        For Player Variable(Event Player, i_0, 0, Count Of(Player Variable(Event Player, cm_buttons_Label)), 1);
            If(And(And(Value In Array(Player Variable(Event Player, cm_buttons_Interactable), Player Variable(Event Player, i_0)), Compare(Absolute Value(Subtract(Angle Difference(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Horizontal Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), Value In Array(Player Variable(Event Player, cm_buttons_PosX), Player Variable(Event Player, i_0)))), <=, Divide(Value In Array(Player Variable(Event Player, cm_buttons_ClickWidth), Player Variable(Event Player, i_0)), 2))), Compare(Absolute Value(Subtract(Angle Difference(Vertical Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing))), Value In Array(Player Variable(Event Player, cm_buttons_PosY), Player Variable(Event Player, i_0)))), <=, Divide(Value In Array(Player Variable(Event Player, cm_buttons_ClickHeight), Player Variable(Event Player, i_0)), 2))));
                Set Player Variable(Event Player, cm_currActionID, If-Then-Else(Player Variable(Event Player, primary), Value In Array(Player Variable(Event Player, cm_buttons_PrimaryAction), Player Variable(Event Player, i_0)), Value In Array(Player Variable(Event Player, cm_buttons_SecondaryAction), Player Variable(Event Player, i_0))));
            End;
        End;
        If(And(Player Variable(Event Player, cm_currActionID), Value In Array(Global Variable(_extendedGlobalCollection), 27)));
            If(Player Variable(Event Player, primary));
                Set Player Variable(Event Player, releasePrimary, True);
            End;
            Play Effect(Event Player, Explosion Sound, Color(White), Event Player, 30);
        End;
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, cm_currActionID, Null);
    }
}

// Rule Element Count: 18
rule("Action ID: Exit menu")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Not(Value In Array(Global Variable(_extendedGlobalCollection), 3)) == True;
        Player Variable(Event Player, cm_currActionID) == Custom String("exit menu");
    }

    // Element Count: 1, Action Count: 1
    actions
    {
        Set Player Variable(Event Player, cm_isInMenu, False);
    }
}

// Rule Element Count: 141
rule("Cursor bounds")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 54, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, cm_isInMenu) == True;
        Or(Compare(Absolute Value(Angle Difference(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Horizontal Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing)))), >, Add(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 25), 2), 0.05)), Compare(Absolute Value(Angle Difference(Vertical Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing)))), >, Add(Divide(Value In Array(Global Variable(_extendedGlobalCollection), 26), 2), 0.05))) == True;
    }

    // Element Count: 86, Action Count: 3
    // Largest Action Index: 0 using 83 Elements
    actions
    {
        Set Facing(Event Player, Direction From Angles(Min(Max(Subtract(Horizontal Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing)), Angle Difference(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Horizontal Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing)))), Subtract(Horizontal Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing)), Divide(Value In Array(Global Variable(_extendedGlobalCollection), 25), 2))), Add(Horizontal Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing)), Divide(Value In Array(Global Variable(_extendedGlobalCollection), 25), 2))), Min(Max(Subtract(Vertical Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing)), Angle Difference(Vertical Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing)))), Subtract(Vertical Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing)), Divide(Value In Array(Global Variable(_extendedGlobalCollection), 26), 2))), Add(Vertical Angle From Direction(Player Variable(Event Player, cm_menuOriginalFacing)), Divide(Value In Array(Global Variable(_extendedGlobalCollection), 26), 2)))), To World);
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 21
rule("CM: Func Primary")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        First Of(Player Variable(Event Player, cm_currActionID)) == 35;
    }

    // Element Count: 12, Action Count: 3
    // Largest Action Index: 1 using 8 Elements
    actions
    {
        Modify Global Variable(lambdaParameter_0, Append To Array, Array(True));
        Modify Global Variable(func_group, Append To Array, Array(Value In Array(Player Variable(Event Player, cm_currActionID), 1)));
        Call Subroutine(func_group);
    }
}

// Rule Element Count: 21
rule("CM: Func Secondary")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        First Of(Player Variable(Event Player, cm_currActionID)) == 36;
    }

    // Element Count: 12, Action Count: 3
    // Largest Action Index: 1 using 8 Elements
    actions
    {
        Modify Global Variable(lambdaParameter_0, Append To Array, Array(False));
        Modify Global Variable(func_group, Append To Array, Array(Value In Array(Player Variable(Event Player, cm_currActionID), 1)));
        Call Subroutine(func_group);
    }
}

// Rule Element Count: 11
rule("EXPORT: open export menu")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Player Variable(Event Player, cm_currActionID) == 31;
    }

    // Element Count: 3, Action Count: 2
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Set Global Variable(newState, 8);
        Call Subroutine(SetMenuState);
    }
}

// Rule Element Count: 432
rule("Setup language maps")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 5, Condition Count: 1
    conditions
    {
        Has Spawned(Host Player) == True;
    }

    // Element Count: 426, Action Count: 3
    // Largest Action Index: 0 using 142 Elements
    actions
    {
        Set Player Variable(Host Player, langMaps_map, Array(Map(Ayutthaya), Map(Black Forest), Map(Black Forest Winter), Map(Blizzard World), Map(Blizzard World Winter), Map(Busan), Map(Busan Downtown Lunar New Year), Map(Busan Sanctuary Lunar New Year), Map(Castillo), Map(Château Guillard), Map(Château Guillard Halloween), Map(Circuit Royal), Map(Colosseo), Map(Dorado), Map(Ecopoint: Antarctica), Map(Ecopoint: Antarctica Winter), Map(Eichenwalde), Map(Eichenwalde Halloween), Map(Esperança), Map(Hanamura), Map(Hanamura Winter), Map(Havana), Map(Hollywood), Map(Hollywood Halloween), Map(Horizon Lunar Colony), Map(Ilios), Map(Ilios Lighthouse), Map(Ilios Ruins), Map(Ilios Well), Map(Junkenstein's Revenge), Map(Junkertown), Map(Kanezaka), Map(King's Row), Map(King's Row Winter), Map(Lijiang Control Center), Map(Lijiang Control Center Lunar New Year), Map(Lijiang Garden), Map(Lijiang Control Center Lunar New Year), Map(Lijiang Night Market), Map(Lijiang Night Market Lunar New Year), Map(Lijiang Tower), Map(Lijiang Tower Lunar New Year), Map(Malevento), Map(Midtown), Map(Necropolis), Map(Nepal), Map(Nepal Sanctum), Map(Nepal Shrine), Map(Nepal Village), Map(New Queen Street), Map(Numbani), Map(Oasis), Map(Oasis City Center), Map(Oasis Gardens), Map(Oasis University), Map(Paris), Map(Petra), Map(Practice Range), Map(Rialto), Map(Route 66), Map(Shambali Monastery), Map(Temple of Anubis), Map(Volskaya Industries), Map(Watchpoint: Gibraltar), Map(Workshop Chamber), Map(Workshop Expanse), Map(Workshop Expanse Night), Map(Workshop Green Screen), Map(Workshop Island), Map(Workshop Island Night)));
        Set Player Variable(Host Player, langMaps_ostwName, Array(Custom String("Ayutthaya"), Custom String("Black_Forest"), Custom String("Black_Forest_Winter"), Custom String("Blizzard_World"), Custom String("Blizzard_World_Winter"), Custom String("Busan"), Custom String("Busan_Downtown_Lunar"), Custom String("Busan_Sanctuary_Lunar"), Custom String("Castillo"), Custom String("Chateau_Guillard"), Custom String("Chateau_Guillard_Halloween"), Custom String("Circuit_Royal"), Custom String("Colosseo"), Custom String("Dorado"), Custom String("Ecopoint_Antarctica"), Custom String("Ecopoint_Antarctica_Winter"), Custom String("Eichenwalde"), Custom String("Eichenwalde_Halloween"), Custom String("Esperanca"), Custom String("Hanamura"), Custom String("Hanamura_Winter"), Custom String("Havana"), Custom String("Hollywood"), Custom String("Hollywood_Halloween"), Custom String("Horizon_Lunar_Colony"), Custom String("Ilios"), Custom String("Ilios_Lighthouse"), Custom String("Ilios_Ruins"), Custom String("Ilios_Well"), Custom String("Junkensteins_Revenge"), Custom String("Junkertown"), Custom String("Kanezaka"), Custom String("Kings_Row"), Custom String("Kings_Row_Winter"), Custom String("Lijiang_Control_Center"), Custom String("Lijiang_Control_Center_Lunar"), Custom String("Lijiang_Garden"), Custom String("Lijiang_Control_Center_Lunar"), Custom String("Lijiang_Night_Market"), Custom String("Lijiang_Night_Market_Lunar"), Custom String("Lijiang_Tower"), Custom String("Lijiang_Tower_Lunar"), Custom String("Malevento"), Custom String("Midtown"), Custom String("Necropolis"), Custom String("Nepal"), Custom String("Nepal_Sanctum"), Custom String("Nepal_Shrine"), Custom String("Nepal_Village"), Custom String("New_Queen_Street"), Custom String("Numbani"), Custom String("Oasis"), Custom String("Oasis_City_Center"), Custom String("Oasis_Gardens"), Custom String("Oasis_University"), Custom String("Paris"), Custom String("Petra"), Custom String("PracticeRange"), Custom String("Rialto"), Custom String("Route_66"), Custom String("Shambali_Monastery"), Custom String("Temple_of_Anubis"), Custom String("Volskaya_Industries"), Custom String("Watchpoint_Gibraltar"), Custom String("Workshop_Chamber"), Custom String("Workshop_Expanse"), Custom String("Workshop_Expanse_Night"), Custom String("Workshop_Green_Screen"), Custom String("Workshop_Island"), Custom String("Workshop_Island_Night")));
        Set Player Variable(Host Player, langMaps_overpyName, Array(Custom String("AYUTTHAYA"), Custom String("BLACK_FOREST"), Custom String("BLACK_FOREST_WINTER"), Custom String("BLIZZ_WORLD"), Custom String("BLIZZ_WORLD_WINTER"), Custom String("BUSAN"), Custom String("BUSAN_DOWNTOWN_LNY"), Custom String("BUSAN_SANCTUARY_LNY"), Custom String("CASTILLO"), Custom String("CHATEAU_GUILLARD"), Custom String("CHATEAU_GUILLARD_HALLOWEEN"), Custom String("CIRCUIT_ROYAL"), Custom String("COLOSSEO"), Custom String("DORADO"), Custom String("ECOPOINT_ANTARCTICA"), Custom String("ECOPOINT_ANTARCTICA_WINTER"), Custom String("EICHENWALDE"), Custom String("EICHENWALDE_HALLOWEEN"), Custom String("ESPERANCA"), Custom String("HANAMURA"), Custom String("HANAMURA_WINTER"), Custom String("HAVANA"), Custom String("HOLLYWOOD"), Custom String("HOLLYWOOD_HALLOWEEN"), Custom String("HORIZON_LUNAR_COLONY"), Custom String("ILIOS"), Custom String("ILIOS_LIGHTHOUSE"), Custom String("ILIOS_RUINS"), Custom String("ILIOS_WELL"), Custom String("JUNKENSTEIN"), Custom String("JUNKERTOWN"), Custom String("KANEZAKA"), Custom String("KINGS_ROW"), Custom String("KINGS_ROW_WINTER"), Custom String("LIJIANG_CONTROL_CENTER"), Custom String("LIJIANG_CONTROL_CENTER_LNY"), Custom String("LIJIANG_GARDEN"), Custom String("LIJIANG_GARDEN_LNY"), Custom String("LIJIANG_NIGHT_MARKET"), Custom String("LIJIANG_NIGHT_MARKET_LNY"), Custom String("LIJIANG_TOWER"), Custom String("LIJIANG_TOWER_LNY"), Custom String("MALEVENTO"), Custom String("MIDTOWN"), Custom String("NECROPOLIS"), Custom String("NEPAL"), Custom String("NEPAL_SANCTUM"), Custom String("NEPAL_SHRINE"), Custom String("NEPAL_VILLAGE"), Custom String("NEW_QUEEN_STREET"), Custom String("NUMBANI"), Custom String("OASIS"), Custom String("OASIS_CITY_CENTER"), Custom String("OASIS_GARDENS"), Custom String("OASIS_UNIVERSITY"), Custom String("PARIS"), Custom String("PETRA"), Custom String("PRACTICE_RANGE"), Custom String("RIALTO"), Custom String("ROUTE_66"), Custom String("SHAMBALI_MONASTERY"), Custom String("TEMPLE_OF_ANUBIS"), Custom String("VOLSKAYA"), Custom String("WATCHPOINT_GIBRALTAR"), Custom String("WORKSHOP_CHAMBER"), Custom String("WORKSHOP_EXPANSE"), Custom String("WORKSHOP_EXPANSE_NIGHT"), Custom String("WORKSHOP_GREEN_SCREEN"), Custom String("WORKSHOP_ISLAND"), Custom String("WORKSHOP_ISLAND_NIGHT")));
    }
}

// Rule Element Count: 43
rule("Close Popup Window")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 2
    conditions
    {
        Player Variable(Event Player, popupWindowVisible) == True;
        Is Button Held(Event Player, Button(Interact)) == True;
    }

    // Element Count: 29, Action Count: 14
    // Largest Action Index: 6 using 4 Elements
    actions
    {
        Set Player Variable(Event Player, releaseInteract, True);
        Set Player Variable(Event Player, popupWindowVisible, False);
        Disable Game Mode HUD(Event Player);
        Set Player Variable(Event Player, cm_isInMenu, True);
        Set Player Variable(Event Player, msgPages, Empty Array);
        Set Player Variable(Event Player, msgCurrentPage, 0);
        "Destroy hud texts."
        While(Count Of(Player Variable(Event Player, msgHudTexts)));
            Destroy HUD Text(First Of(Player Variable(Event Player, msgHudTexts)));
            Modify Player Variable(Event Player, msgHudTexts, Remove From Array By Index, 0);
        End;
        "Destroy progress texts."
        While(Count Of(Player Variable(Event Player, msgProgressTexts)));
            Destroy Progress Bar HUD Text(First Of(Player Variable(Event Player, msgProgressTexts)));
            Modify Player Variable(Event Player, msgProgressTexts, Remove From Array By Index, 0);
        End;
    }
}

// Rule Element Count: 271
rule("Subroutine: Display message")
{
    event
    {
        Subroutine;
        showMessage;
    }

    // Element Count: 270, Action Count: 40
    // Largest Action Index: 20 using 43 Elements
    actions
    {
        Set Player Variable(Host Player, cm_isInMenu, False);
        Set Player Variable(Host Player, popupWindowVisible, True);
        If(Compare(Global Variable(objectiveDescription), !=, Null));
            Set Objective Description(Host Player, Global Variable(objectiveDescription), Visible To And String);
            Enable Game Mode HUD(Host Player);
        End;
        "Destroy hud texts."
        While(Count Of(Player Variable(Event Player, msgHudTexts)));
            Destroy HUD Text(First Of(Player Variable(Event Player, msgHudTexts)));
            Modify Player Variable(Event Player, msgHudTexts, Remove From Array By Index, 0);
        End;
        "Destroy progress texts."
        While(Count Of(Player Variable(Event Player, msgProgressTexts)));
            Destroy Progress Bar HUD Text(First Of(Player Variable(Event Player, msgProgressTexts)));
            Modify Player Variable(Event Player, msgProgressTexts, Remove From Array By Index, 0);
        End;
        "Centers the black background to the center of the screen."
        Create HUD Text(Host Player, Null, Null, Custom String("{0}{0}{0}", Custom String("                                          ")), Left, -2, Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        "Centers the black background to the center of the screen."
        Modify Player Variable(Event Player, msgHudTexts, Append To Array, Last Text ID);
        Create HUD Text(Host Player, Custom String("{0}{1}", Custom String("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{0}\n{1}\n                           ", Custom String("                       Press   to close"), Custom String("")), Custom String("                           ")), Null, Null, Left, -1, Custom Color(255, 0, 255, 255), Color(White), Color(White), Visible To And String, Default Visibility);
        "The black background."
        Modify Player Variable(Event Player, msgHudTexts, Append To Array, Last Text ID);
        Create HUD Text(Host Player, Null, Null, Custom String("{0}{0}{0}", Custom String("                                          ")), Right, -2, Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        "Centers the black background to the center of the screen."
        Modify Player Variable(Event Player, msgHudTexts, Append To Array, Last Text ID);
        Create HUD Text(Host Player, Custom String("{0}{1}", Custom String("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{0}\n{1}\n                           ", Custom String("                      〔     F        〕"), If-Then-Else(Count Of(Player Variable(Event Player, msgPages)), Custom String("{0}{1}", Custom String("                         ← {0} 〔{1}/{2}", Input Binding String(Button(Ultimate)), Add(Player Variable(Event Player, msgCurrentPage), 1), Count Of(Player Variable(Event Player, msgPages))), Custom String("〕 {0} →", Input Binding String(Button(Ability 2)))), Custom String(""))), Custom String("                           ")), Null, Null, Right, -1, Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        "The black background."
        Modify Player Variable(Event Player, msgHudTexts, Append To Array, Last Text ID);
        Create HUD Text(Host Player, Null, Null, Custom String("\n "), Top, -1, Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        "Aligns the messages into the box."
        Modify Player Variable(Event Player, msgHudTexts, Append To Array, Last Text ID);
        Set Global Variable(i_1, 0);
        For Global Variable(i_1, 0, Count Of(Global Variable(lines_Type)), 1);
            "Text"
            If(Compare(Value In Array(Global Variable(lines_Type), Global Variable(i_1)), ==, 0));
                Create HUD Text(Host Player, Null, Null, First Of(Value In Array(Global Variable(lines_Content), Global Variable(i_1))), Top, Add(Global Variable(i_1), 1), Color(White), Color(White), Value In Array(Value In Array(Global Variable(lines_Content), Global Variable(i_1)), 1), Visible To, Default Visibility);
                Modify Player Variable(Event Player, msgHudTexts, Append To Array, Last Text ID);
            "Text with subheader"
            Else If(Compare(Value In Array(Global Variable(lines_Type), Global Variable(i_1)), ==, 3));
                Create HUD Text(Host Player, Null, Value In Array(Value In Array(Global Variable(lines_Content), Global Variable(i_1)), 2), First Of(Value In Array(Global Variable(lines_Content), Global Variable(i_1))), Top, Add(Global Variable(i_1), 1), Color(White), Value In Array(Value In Array(Global Variable(lines_Content), Global Variable(i_1)), 3), Value In Array(Value In Array(Global Variable(lines_Content), Global Variable(i_1)), 1), Visible To, Default Visibility);
                Modify Player Variable(Event Player, msgHudTexts, Append To Array, Last Text ID);
            "Header"
            Else If(Compare(Value In Array(Global Variable(lines_Type), Global Variable(i_1)), ==, 2));
                Create HUD Text(Host Player, First Of(Value In Array(Global Variable(lines_Content), Global Variable(i_1))), Null, Null, Top, Add(Global Variable(i_1), 1), Value In Array(Value In Array(Global Variable(lines_Content), Global Variable(i_1)), 1), Color(White), Color(White), Visible To, Default Visibility);
                Modify Player Variable(Event Player, msgHudTexts, Append To Array, Last Text ID);
            "Separator"
            Else If(Compare(Value In Array(Global Variable(lines_Type), Global Variable(i_1)), ==, 1));
                Create Progress Bar HUD Text(Host Player, 100, First Of(Value In Array(Global Variable(lines_Content), Global Variable(i_1))), Top, Add(Global Variable(i_1), 1), Custom Color(195, 14, 150, 100), Value In Array(Value In Array(Global Variable(lines_Content), Global Variable(i_1)), 1), Visible To, Default Visibility);
                Modify Player Variable(Event Player, msgProgressTexts, Append To Array, Last Text ID);
            End;
        End;
    }
}

// Rule Element Count: 48
rule("Message Box: Next page")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 25, Condition Count: 3
    conditions
    {
        Player Variable(Event Player, popupWindowVisible) == True;
        Is Button Held(Event Player, Button(Ability 2)) == True;
        Player Variable(Event Player, msgCurrentPage) < Subtract(Count Of(Player Variable(Event Player, msgPages)), 1);
    }

    // Element Count: 22, Action Count: 8
    // Largest Action Index: 2 using 9 Elements
    actions
    {
        Modify Player Variable(Event Player, msgCurrentPage, Add, 1);
        Modify Global Variable(lambdaParameter_0, Append To Array, Array(0));
        Modify Global Variable(func_group, Append To Array, Array(Value In Array(Player Variable(Event Player, msgPages), Player Variable(Event Player, msgCurrentPage))));
        Call Subroutine(func_group);
        Set Global Variable(objectiveDescription, Null);
        Set Global Variable(lines_Type, Global Variable(lambdaValue_0));
        Set Global Variable(lines_Content, Global Variable(lambdaValue_1));
        Call Subroutine(showMessage);
    }
}

// Rule Element Count: 43
rule("Message Box: Previous page")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 20, Condition Count: 3
    conditions
    {
        Player Variable(Event Player, popupWindowVisible) == True;
        Is Button Held(Event Player, Button(Ultimate)) == True;
        Player Variable(Event Player, msgCurrentPage) > 0;
    }

    // Element Count: 22, Action Count: 8
    // Largest Action Index: 2 using 9 Elements
    actions
    {
        Modify Player Variable(Event Player, msgCurrentPage, Subtract, 1);
        Modify Global Variable(lambdaParameter_0, Append To Array, Array(0));
        Modify Global Variable(func_group, Append To Array, Array(Value In Array(Player Variable(Event Player, msgPages), Player Variable(Event Player, msgCurrentPage))));
        Call Subroutine(func_group);
        Set Global Variable(objectiveDescription, Null);
        Set Global Variable(lines_Type, Global Variable(lambdaValue_0));
        Set Global Variable(lines_Content, Global Variable(lambdaValue_1));
        Call Subroutine(showMessage);
    }
}

// Rule Element Count: 7
rule("Subroutine: Remove node")
{
    event
    {
        Subroutine;
        RemoveNodeByIndex;
    }

    // Element Count: 6, Action Count: 3
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Modify Global Variable(Nodes_Node_UniqueID, Remove From Array By Index, Global Variable(index));
        Modify Global Variable(Nodes_Node_Position, Remove From Array By Index, Global Variable(index));
        Modify Global Variable(Nodes_Selected, Remove From Array By Index, Global Variable(index));
    }
}

// Rule Element Count: 7
rule("Subroutine: Remove segment")
{
    event
    {
        Subroutine;
        RemoveSegmentByIndex;
    }

    // Element Count: 6, Action Count: 3
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Modify Global Variable(Segments_ID, Remove From Array By Index, Global Variable(index_0));
        Modify Global Variable(Segments_Node1, Remove From Array By Index, Global Variable(index_0));
        Modify Global Variable(Segments_Node2, Remove From Array By Index, Global Variable(index_0));
    }
}

// Rule Element Count: 9
rule("Subroutine: Remove attribute")
{
    event
    {
        Subroutine;
        RemoveAttributeByIndex;
    }

    // Element Count: 8, Action Count: 4
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Modify Global Variable(Attributes_Value, Remove From Array By Index, Global Variable(index_1));
        Modify Global Variable(Attributes_ID, Remove From Array By Index, Global Variable(index_1));
        Modify Global Variable(Attributes_Node1, Remove From Array By Index, Global Variable(index_1));
        Modify Global Variable(Attributes_Node2, Remove From Array By Index, Global Variable(index_1));
    }
}

// Rule Element Count: 11
rule("Disable inspector")
{
    event
    {
        Subroutine;
        DisableInspector;
    }

    // Element Count: 10, Action Count: 4
    // Largest Action Index: 1 using 6 Elements
    actions
    {
        Modify Global Variable(inspector, Subtract, 1);
        If(Compare(Global Variable(inspector), ==, 0));
            Disable Inspector Recording;
        End;
    }
}

// Rule Element Count: 33
rule("Subroutine: Start Long Running Task")
{
    event
    {
        Subroutine;
        StartLongRunningTask;
    }

    // Element Count: 32, Action Count: 7
    // Largest Action Index: 4 using 22 Elements
    actions
    {
        Modify Global Variable At Index(_extendedGlobalCollection, 3, Add, 1);
        Set Player Variable(Event Player, cm_isInMenu, True);
        Set Global Variable(newState, 10);
        Call Subroutine(SetMenuState);
        Set Global Variable(input, Array(Global Variable(message), 0, 0, 0, 0, 0.2, 0.2, Color(White), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
    }
}

// Rule Element Count: 61
rule("Subroutine: Docment action move")
{
    event
    {
        Subroutine;
        MoveSelectedActions;
    }

    // Element Count: 60, Action Count: 6
    // Largest Action Index: 0 using 29 Elements
    actions
    {
        If(Or(And(Value In Array(Global Variable(_extendedGlobalCollection), 47), First Of(Global Variable(actionsSelected))), And(Not(Value In Array(Global Variable(_extendedGlobalCollection), 47)), Value In Array(Global Variable(actionsSelected), Subtract(Count Of(Value In Array(Global Variable(Rules_Actions_Data), Global Variable(rulePage))), 1)))));
            Skip(4);
        End;
        Set Player Variable(Event Player, catalogItem_Set, Array(43, Null, Global Variable(actionsSelected), Value In Array(Global Variable(_extendedGlobalCollection), 47), Global Variable(rulePage)));
        Set Player Variable(Event Player, catalogItem_Revert, Array(44, Null, Global Variable(actionsSelected), Value In Array(Global Variable(_extendedGlobalCollection), 47), Global Variable(rulePage)));
        Call Subroutine(Docment);
    }
}

// Rule Element Count: 481
rule("Subroutine: Execute action move")
{
    event
    {
        Subroutine;
        DoMove;
    }

    // Element Count: 480, Action Count: 37
    // Largest Action Index: 21 using 54 Elements
    actions
    {
        If(And(And(And(Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 3), Value In Array(Global Variable(_extendedGlobalCollection), 21)), Global Variable(actionScrollBar)), Compare(Value In Array(Global Variable(_extendedGlobalCollection), 50), ==, Global Variable(rulePage))));
            Set Global Variable(actionsSelected, Empty Array);
        End;
        Set Global Variable(direction, If-Then-Else(Value In Array(Global Variable(_extendedGlobalCollection), 49), -1, 1));
        Set Global Variable(step, If-Then-Else(Global Variable(isUndo), Multiply(Global Variable(direction), -1), 0));
        Set Global Variable(i_2, If-Then-Else(Value In Array(Global Variable(_extendedGlobalCollection), 49), 0, Subtract(Count Of(Value In Array(Global Variable(_extendedGlobalCollection), 48)), 1)));
        While(If-Then-Else(Value In Array(Global Variable(_extendedGlobalCollection), 49), Compare(Global Variable(i_2), <, Count Of(Value In Array(Global Variable(_extendedGlobalCollection), 48))), Compare(Global Variable(i_2), >=, 0)));
            If(Value In Array(Value In Array(Global Variable(_extendedGlobalCollection), 48), Global Variable(i_2)));
                Set Global Variable(action_Data, Value In Array(Value In Array(Global Variable(Rules_Actions_Data), Global Variable(rulePage)), Add(Global Variable(i_2), Global Variable(step))));
                Modify Global Variable At Index(Rules_Actions_Data, Global Variable(rulePage), Remove From Array By Index, Add(Global Variable(i_2), Global Variable(step)));
                Set Global Variable At Index(Rules_Actions_Data, Global Variable(rulePage), Append To Array(Append To Array(Array Slice(Value In Array(Global Variable(Rules_Actions_Data), Global Variable(rulePage)), 0, Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction))), Array(Global Variable(action_Data))), Array Slice(Value In Array(Global Variable(Rules_Actions_Data), Global Variable(rulePage)), Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction)), 999)));
                If(And(And(And(Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 3), Value In Array(Global Variable(_extendedGlobalCollection), 21)), Global Variable(actionScrollBar)), Compare(Value In Array(Global Variable(_extendedGlobalCollection), 50), ==, Global Variable(rulePage))));
                    Modify Global Variable At Index(_objectVariable_3, Global Variable(actionScrollBar), Remove From Array By Index, Add(Global Variable(i_2), Global Variable(step)));
                    If(Compare(Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), Add(Global Variable(i_2), Global Variable(step))), !=, -1));
                        Set Global Variable(buttonID, Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), Add(Global Variable(i_2), Global Variable(step))));
                        Call Subroutine(DestroyButton);
                    End;
                    Modify Global Variable At Index(_objectVariable_4, Global Variable(actionScrollBar), Remove From Array By Index, Add(Global Variable(i_2), Global Variable(step)));
                    Modify Global Variable At Index(_objectVariable_2, Global Variable(actionScrollBar), Remove From Array By Index, Add(Global Variable(i_2), Global Variable(step)));
                    Set Global Variable(UpdateStack, Global Variable(actionScrollBar));
                    Call Subroutine(Update);
                    Set Global Variable At Index(_objectVariable_3, Global Variable(actionScrollBar), Append To Array(Append To Array(Array Slice(Value In Array(Global Variable(_objectVariable_3), Global Variable(actionScrollBar)), 0, Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction))), Array(Custom String("{0} {1}", Value In Array(Value In Array(Player Variable(Host Player, _extendedPlayerCollection), 8), First Of(Global Variable(action_Data))), Value In Array(Global Variable(action_Data), 1)))), Array Slice(Value In Array(Global Variable(_objectVariable_3), Global Variable(actionScrollBar)), Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction)), 999)));
                    Set Global Variable At Index(_objectVariable_2, Global Variable(actionScrollBar), Append To Array(Append To Array(Array Slice(Value In Array(Global Variable(_objectVariable_2), Global Variable(actionScrollBar)), 0, Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction))), Array(Color(White))), Array Slice(Value In Array(Global Variable(_objectVariable_2), Global Variable(actionScrollBar)), Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction)), 999)));
                    Set Global Variable At Index(_objectVariable_4, Global Variable(actionScrollBar), Append To Array(Append To Array(Array Slice(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), 0, Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction))), Array(-1)), Array Slice(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction)), 999)));
                    Set Global Variable(UpdateStack, Global Variable(actionScrollBar));
                    Call Subroutine(Update);
                    Set Global Variable At Index(actionsSelected, Add(Add(Global Variable(i_2), Global Variable(direction)), Global Variable(step)), Not(Global Variable(isUndo)));
                    If(And(Compare(Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction)), >=, Value In Array(Global Variable(_objectVariable_8), Global Variable(actionScrollBar))), Compare(Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction)), <, Add(Value In Array(Global Variable(_objectVariable_8), Global Variable(actionScrollBar)), Value In Array(Global Variable(_objectVariable_7), Global Variable(actionScrollBar))))));
                        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction)))), If-Then-Else(Value In Array(Global Variable(actionsSelected), Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction))), Color(Green), Color(White)));
                    End;
                    Set Global Variable(_arrayConstructor, Value In Array(Global Variable(_objectVariable_2), Global Variable(actionScrollBar)));
                    Set Global Variable At Index(_arrayConstructor, Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction)), If-Then-Else(Value In Array(Global Variable(actionsSelected), Add(Add(Global Variable(i_2), Global Variable(step)), Global Variable(direction))), Color(Green), Color(White)));
                    Set Global Variable At Index(_objectVariable_2, Global Variable(actionScrollBar), Global Variable(_arrayConstructor));
                End;
            End;
            Modify Global Variable(i_2, Subtract, Global Variable(direction));
        End;
    }
}

// Rule Element Count: 31
rule("Subroutine: Delete rule")
{
    event
    {
        Subroutine;
        DeleteRule;
    }

    // Element Count: 30, Action Count: 3
    // Largest Action Index: 1 using 22 Elements
    actions
    {
        Set Player Variable(Event Player, catalogItem_Set, Array(45, Null, Global Variable(rulePage)));
        Set Player Variable(Event Player, catalogItem_Revert, Array(46, Null, Global Variable(rulePage), Value In Array(Global Variable(Rules_Actions_Data), Global Variable(rulePage)), Value In Array(Global Variable(Rules_ExecutesOnAttribute), Global Variable(rulePage)), Value In Array(Global Variable(Rules_EnabledHeroes), Global Variable(rulePage))));
        Call Subroutine(Docment);
    }
}

// Rule Element Count: 12
rule("Subroutine: On Rule Added")
{
    event
    {
        Subroutine;
        OnRuleAdded;
    }

    // Element Count: 11, Action Count: 4
    // Largest Action Index: 0 using 8 Elements
    actions
    {
        "Update the visible rule content if the rule menu is opened."
        If(Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 3));
            Call Subroutine(initiatePager);
            Call Subroutine(updateRuleContent);
        End;
    }
}

// Rule Element Count: 111
rule("Subroutine: On Rule Removed")
{
    event
    {
        Subroutine;
        OnRuleRemoved;
    }

    // Element Count: 110, Action Count: 43
    // Largest Action Index: 0 using 14 Elements
    actions
    {
        "Update UI after removing rule if the rule menu is opened."
        If(And(Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 3), Value In Array(Global Variable(_extendedGlobalCollection), 21)));
            "No more rules, remove the pager."
            If(Compare(Count Of(Global Variable(Rules_Actions_Data)), ==, 0));
                Set Global Variable(actionsSelected, Empty Array);
                While(Count Of(Global Variable(pagerButtons)));
                    Set Global Variable(buttonID, First Of(Global Variable(pagerButtons)));
                    Call Subroutine(DestroyButton);
                    Modify Global Variable(pagerButtons, Remove From Array By Index, 0);
                End;
                Set Global Variable At Index(_extendedGlobalCollection, 21, False);
                If(Global Variable(actionScrollBar));
                    Set Global Variable(DisposeStack, Global Variable(actionScrollBar));
                    Call Subroutine(Dispose);
                    Set Global Variable(actionScrollBar, Null);
                End;
                If(Compare(Global Variable(ruleAttributeSelector), !=, Null));
                    Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_1), Global Variable(ruleAttributeSelector)));
                    Call Subroutine(DestroyButton);
                    Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_3), Global Variable(ruleAttributeSelector)));
                    Call Subroutine(DestroyButton);
                    Set Global Variable(buttonID, Value In Array(Global Variable(_objectVariable_2), Global Variable(ruleAttributeSelector)));
                    Call Subroutine(DestroyButton);
                    If(Global Variable(ruleAttributeSelector));
                        Set Global Variable At Index(_classIndexes, Global Variable(ruleAttributeSelector), 0);
                        Set Global Variable At Index(_objectVariable_0, Global Variable(ruleAttributeSelector), 0);
                        Set Global Variable At Index(_objectVariable_1, Global Variable(ruleAttributeSelector), 0);
                        Set Global Variable At Index(_objectVariable_2, Global Variable(ruleAttributeSelector), 0);
                        Set Global Variable At Index(_objectVariable_3, Global Variable(ruleAttributeSelector), 0);
                        Set Global Variable At Index(_objectVariable_4, Global Variable(ruleAttributeSelector), 0);
                    Else;
                        Log To Inspector(Custom String("[Error] Attempted to delete invalid reference in number selector.del at line 80"));
                    End;
                    Set Global Variable(ruleAttributeSelector, Null);
                End;
                If(Compare(Global Variable(heroScrollBar), !=, Null));
                    Set Global Variable(DisposeStack, Global Variable(heroScrollBar));
                    Call Subroutine(Dispose);
                    Set Global Variable(heroScrollBar, Null);
                End;
            "Switch the currently visible rule to the next visible rule."
            Else;
                "Ensure that the rule page is in range."
                Modify Global Variable(rulePage, Min, Subtract(Count Of(Global Variable(Rules_Actions_Data)), 1));
                "Update the visible rule content."
                Call Subroutine(updateRuleContent);
            End;
        End;
    }
}

// Rule Element Count: 958
rule("Subroutine: Export: Core")
{
    event
    {
        Subroutine;
        ExportCore;
    }

    // Element Count: 957, Action Count: 120
    // Largest Action Index: 11 using 13 Elements
    actions
    {
        "Export core code to workshop."
        If(Compare(Global Variable(outputLanguage), ==, 0));
            Log To Inspector(Custom String("*/variables
{
    global:
        0: pfLoadedMap_nodes
        1: pfLoadedMap_neighbors
        2: {0}", Custom String("pfIterationsThisTick
        3: pfExecOwner
        4: i
    player:
        0: pfWait
        1: {0}", Custom String("pfDestination
        2: pfPlayerAttributes
        3: pfAttributes
        4: pfSavedTarget
        5: {0}", Custom String("pfIsPathfinding
        6: pfCurrentNodeIndex
        7: pfWalkingToPosition
        8: pfPath
        9: /*")))));
            Log To Inspector(Custom String("*/pfStartTime
        10: pfWalkingFromPosition
        11: pfActiveNode
        12: pfStuckOnNode
        13: {0}", Custom String("pfWasBroadcasted
        14: pfIsStuck
        15: goal
        16: scores_gScore
        17: scores_fScore
  {0}", Custom String("      18: scores_parent
        19: scores_nodeIndex
        20: open
        21: checkedNode
        22: iter{0}", Custom String("
        23: current
        24: currentInExistingPath
        25: broadcastTo
        26: neighbor
        27: /*")))));
            Log To Inspector(Custom String("*/neighborI
        28: scoreIndex
        29: score
}

subroutines
{
    0: pfTick
    1: {0}", Custom String("pfUpdateNodeMeta
    2: pfWalkToDestination
    3: pfProgressEventPlayer
    4: pfRecalibrate
    5: {0}", Custom String("pfLookAtDestination
}

rule(\"【PF Core】Prepare loaded map\")
{
    event
    {
        Ongoing - {0}", Custom String("Global;
    }

    conditions
    {
        Global.pfLoadedMap_nodes == True;
        /*")))));
            Log To Inspector(Custom String("*/Global.pfIterationsThisTick != -99;
    }

    actions
    {
        For Global Variable(i, 0, Count {0}", Custom String("Of(Global.pfLoadedMap_nodes), 1);
            Global.pfLoadedMap_nodes[Global.i] = Vector(X Component {0}", Custom String("Of(Global.pfLoadedMap_nodes[Global.i]), Round To Integer(Y Component Of(Global.pfLoadedMap_nodes[Global.i]), Down) + Global.i{0}", Custom String(" / 1000 * (Y Component Of(Global.pfLoadedMap_nodes[Global.i]) < 0 ? -1 : 1), Z Component /*")))));
            Log To Inspector(Custom String("*/Of(Global.pfLoadedMap_nodes[Global.i]));
        End;
    }
}

rule(\"【PF Core】Select next pathfinder\"){0}", Custom String("
{
    event
    {
        Ongoing - Global;
    }

    conditions
    {
        (!Entity {0}", Custom String("Exists(Global.pfExecOwner) || Global.pfExecOwner == Null) == True;
        Is True For Any(All Players(All Teams), Current{0}", Custom String(" Array Element.pfWait) == True;
    }

    actions
    {
        Global.pfExecOwner = First Of(Sorted /*")))));
            Log To Inspector(Custom String("*/Array(Filtered Array(All Players(All Teams), Current Array Element.pfWait), Current Array Element.pfWait));
        {0}", Custom String("Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule({0}", Custom String("\"【PF Core Subroutine】☞ Tick\")
{
    event
    {
        Subroutine;
        pfTick;
    }

  {0}", Custom String("  actions
    {
        Global.pfIterationsThisTick -= 1;
        If(Global.pfIterationsThisTick <= 0);
          /*")))));
            Log To Inspector(Custom String("*/  Wait(0.016, Ignore Condition);
            Wait Until(Max(Server Load Average, Server Load) < 255, 0.25);
         {0}", Custom String("   \"This determines the pathfinding budget for the current tick.\"
            Global.pfIterationsThisTick = (Max(Server {0}", Custom String("Load Average, Server Load) < 230) + (Max(Server Load Average, Server Load) < 180) * 2 + 1;
        End;
    }
}
{0}", Custom String("
rule(\"【PF Core Subroutine】☞ Update node meta\")
{
    event
    {
        Subroutine;
        /*")))));
            Log To Inspector(Custom String("*/pfUpdateNodeMeta;
    }

    actions
    {
        If(Event Player.pfCurrentNodeIndex != -1);
           {0}", Custom String(" Event Player.pfActiveNode = Event Player.pfCurrentNodeIndex;
        End;
        If(Event Player.pfStuckOnNode == 1);{0}", Custom String("
            Event Player.pfStuckOnNode = 0;
        End;
        \"Update the pathfinding start time.\"
        {0}", Custom String("Event Player.pfStartTime = Total Time Elapsed;
        Event Player.pfWalkingFromPosition = Position Of(Event Player);
 /*")))));
            Log To Inspector(Custom String("*/   }
}

rule(\"☆【PF Core Subroutine】☞ Walk to destination\")
{
    event
    {
        {0}", Custom String("Subroutine;
        pfWalkToDestination;
    }

    actions
    {
        Start Throttle In Direction(Event{0}", Custom String(" Player, Direction Towards(Position Of(Event Player), Event Player.pfWalkingToPosition), Event Player.pfWalkingToPosition && {0}", Custom String("(Event Player.pfCurrentNodeIndex != -1 || Distance Between(Position Of(Event Player), Event Player.pfWalkingToPosition) > /*")))));
            Log To Inspector(Custom String("*/0.4), To World, Replace Existing Throttle, Direction And Magnitude);
    }
}

rule({0}", Custom String("\"【PF Core】Update & Execute\")
{
    event
    {
        Ongoing - Each Player;
        All;
        {0}", Custom String("All;
    }

    conditions
    {
        Event Player.pfDestination == True;
        Distance Between(Event{0}", Custom String(" Player, Event Player.pfDestination) > 4;
        (!Event Player.pfSavedTarget || Distance Between(Event /*")))));
            Log To Inspector(String Replace(Custom String("*/Player.pfDestination, Event Player.pfSavedTarget) > 5) == True;
    }

    actions
    {
        {0}", Custom String("\"Ensure that a map is loaded.\"
        If(!Global.pfLoadedMap_nodes);
            Log To Inspector(Custom String({0}", Custom String("\"Error: Attempted to pathfind player ⨁0} without a loaded map.\", Event Player));
            Abort;
        End;{0}", Custom String("
        Event Player.pfWait = Total Time Elapsed;
        Event Player.pfWasBroadcasted = False;
        Wait /*")))), Custom String("⨁"), Custom String("{")));
            Log To Inspector(Custom String("*/Until(Global.pfExecOwner == Event Player || Event Player.pfWasBroadcasted, 9999);
        \"Update saved destination\"{0}", Custom String("
        Event Player.pfSavedTarget = Event Player.pfDestination;
        If(!Event Player.pfWasBroadcasted);
        {0}", Custom String("    Event Player.goal = Round To Integer(Absolute Value(Y Component Of(First Of(Sorted Array(Array Slice(Sorted {0}", Custom String("Array(Global.pfLoadedMap_nodes, Distance Between(Current Array Element, Event Player.pfSavedTarget)), 0, 5), !Is In Line Of /*")))));
            Log To Inspector(Custom String("*/Sight(Current Array Element + Vector(0, 2, 0), Event Player.pfSavedTarget + Vector(0, 2, 0), Barriers Do Not Block LOS))))){0}", Custom String(" * 1000 % 1000, Down);
            Call Subroutine(pfTick);
            If(Event Player.pfIsPathfinding && Event {0}", Custom String("Player.pfCurrentNodeIndex != -1);
                Event Player.pfActiveNode = Event Player.pfCurrentNodeIndex;
        {0}", Custom String("    Else;
                Event Player.pfActiveNode = Round To Integer(Absolute Value(Y Component Of(First Of(Sorted /*")))));
            Log To Inspector(Custom String("*/Array(Array Slice(Sorted Array(Global.pfLoadedMap_nodes, Distance Between(Current Array Element, Position Of(Event {0}", Custom String("Player))), 0, 5), !Is In Line Of Sight(Current Array Element + Vector(0, 2, 0), Position Of(Event Player) + Vector(0, 2, 0), {0}", Custom String("Barriers Do Not Block LOS))))) * 1000 % 1000, Down);
                Call Subroutine(pfTick);
            End;
     {0}", Custom String("       Event Player.scores_gScore = Array(0);
            Event Player.scores_fScore = Array(0);
            Event /*")))));
            Log To Inspector(Custom String("*/Player.scores_parent = Array(-1);
            Event Player.scores_nodeIndex = Array(Event Player.goal);
            {0}", Custom String("Event Player.open = Array(0);
            Event Player.checkedNode = Event Player.pfActiveNode;
            Event {0}", Custom String("Player.iter = 0;
            While(Count Of(Event Player.open) || Event Player.iter > 30);
                {0}", Custom String("\"The index of the current node in `scores`.\"
                Event Player.current = First Of(Sorted Array(Event /*")))));
            Log To Inspector(Custom String("*/Player.open, Event Player.scores_fScore[Current Array Element]));
                If(Event Player.checkedNode != Event {0}", Custom String("Player.pfActiveNode);
                    Event Player.checkedNode = Index Of Array Value(Event Player.scores_nodeIndex, {0}", Custom String("Event Player.pfActiveNode);
                    If(Event Player.checkedNode != -1);
                        Event {0}", Custom String("Player.current = Event Player.checkedNode;
                        Event Player.checkedNode = -2;
                    /*")))));
            Log To Inspector(Custom String("*/Else;
                        Event Player.checkedNode = Event Player.pfActiveNode;
                    End;
     {0}", Custom String("           End;
                Event Player.currentInExistingPath = Index Of Array Value(Event Player.pfPath, Event {0}", Custom String("Player.scores_nodeIndex[Event Player.current]);
                \"If the goal was found, reconstruct the path.\"
      {0}", Custom String("          If(Event Player.scores_nodeIndex[Event Player.current] == Event Player.pfActiveNode || Event Player.checkedNode == /*")))));
            Log To Inspector(Custom String("*/-2 || Event Player.currentInExistingPath != -1);
                    If(Event Player.currentInExistingPath == -1);
  {0}", Custom String("                      Event Player.pfPath = Empty Array;
                    Else;
                        Event {0}", Custom String("Player.pfPath = Array Slice(Event Player.pfPath, 0, Event Player.currentInExistingPath);
                    End;
     {0}", Custom String("               While(Event Player.current != -1);
                        Modify Player Variable(Event Player, pfPath, /*")))));
            Log To Inspector(Custom String("*/Append To Array, Event Player.scores_nodeIndex[Event Player.current]);
                        Event Player.current = {0}", Custom String("Event Player.scores_parent[Event Player.current];
                    End;
                    Modify Player {0}", Custom String("Variable(Event Player, pfPath, Append To Array, Array(-1));
                    Event Player.broadcastTo = Filtered {0}", Custom String("Array(Players Within Radius(Position Of(Event Player) + Up, 4, All Teams, Off), Current Array Element != Event Player && /*")))));
            Log To Inspector(Custom String("*/Current Array Element.pfWait && Distance Between(Current Array Element.pfDestination, Event Player.pfDestination) < 4 && {0}", Custom String("Current Array Element.pfPlayerAttributes == Event Player.pfPlayerAttributes);
                    Event {0}", Custom String("Player.broadcastTo.pfPath = Event Player.pfPath;
                    Event Player.broadcastTo.pfWasBroadcasted = True;
{0}", Custom String("                    Skip(27);
                End;
                Modify Player Variable(Event Player, open, Remove /*")))));
            Log To Inspector(Custom String("*/From Array By Value, Event Player.current);
                \"Check each neighbor to the current node.\"
            {0}", Custom String("    For Player Variable(Event Player, neighbor, 0, Count Of(Global.pfLoadedMap_neighbors[Event Player.scores_nodeIndex[Event {0}", Custom String("Player.current]]), 1);
                    \"The neighbor index to be used like `pfLoadedMap.nodes[neighborI]`.\"
     {0}", Custom String("               Event Player.neighborI = First Of(Global.pfLoadedMap_neighbors[Event Player.scores_nodeIndex[Event /*")))));
            Log To Inspector(Custom String("*/Player.current]][Event Player.neighbor]);
                    Event Player.scoreIndex = Index Of Array Value(Event {0}", Custom String("Player.scores_nodeIndex, Event Player.neighborI);
                    \"Ensure that the path to the neighbor is enabled.\"{0}", Custom String("
                    If(Count Of(Global.pfLoadedMap_neighbors[Event Player.scores_nodeIndex[Event Player.current]][Event {0}", Custom String("Player.neighbor][1]) == 0 || Is True For Any(Global.pfLoadedMap_neighbors[Event Player.scores_nodeIndex[Event /*")))));
            Log To Inspector(Custom String("*/Player.current]][Event Player.neighbor][1], Array Contains(Event Player.pfPlayerAttributes, Current Array Element)));
  {0}", Custom String("                      Event Player.score = Event Player.scores_gScore[Event Player.current] + Distance {0}", Custom String("Between(Global.pfLoadedMap_nodes[Event Player.scores_nodeIndex[Event Player.current]], Global.pfLoadedMap_nodes[Event {0}", Custom String("Player.neighborI]);
                        /*")))));
            Log To Inspector(Custom String("*/\"Get neighbor index in scores.
If -1, the neighbor was not added to the score list yet.\"
                        {0}", Custom String("If(Event Player.scoreIndex == -1);
                            Modify Player Variable(Event Player, open, Append To Array,{0}", Custom String(" Count Of(Event Player.scores_gScore));
                            Modify Player Variable(Event Player, scores_gScore, {0}", Custom String("Append To Array, Event Player.score);
                            Modify Player Variable(Event Player, scores_fScore, /*")))));
            Log To Inspector(Custom String("*/Append To Array, Event Player.score + Distance Between(Global.pfLoadedMap_nodes[Event Player.neighborI], {0}", Custom String("Global.pfLoadedMap_nodes[Event Player.pfActiveNode]) * 20);
                            Modify Player Variable(Event {0}", Custom String("Player, scores_parent, Append To Array, Event Player.current);
                            Modify Player Variable(Event {0}", Custom String("Player, scores_nodeIndex, Append To Array, Event Player.neighborI);
                        Else If(Event Player.score < /*")))));
            Log To Inspector(Custom String("*/Event Player.scores_gScore[Event Player.scoreIndex]);
                            Event Player.scores_gScore[Event {0}", Custom String("Player.scoreIndex] = Event Player.score;
                            Event Player.scores_fScore[Event Player.scoreIndex] ={0}", Custom String(" Event Player.score + Distance Between(Global.pfLoadedMap_nodes[Event Player.neighborI], Global.pfLoadedMap_nodes[Event {0}", Custom String("Player.pfActiveNode]) * 20;
                            Event Player.scores_parent[Event Player.scoreIndex] = Event /*")))));
            Log To Inspector(Custom String("*/Player.current;
                            Event Player.scores_nodeIndex[Event Player.scoreIndex] = Event {0}", Custom String("Player.neighborI;
                            If(!Array Contains(Event Player.open, Event Player.scoreIndex));
        {0}", Custom String("                        Modify Player Variable(Event Player, open, Append To Array, Event Player.scoreIndex);
            {0}", Custom String("                End;
                        End;
                    End;
                    Call /*")))));
            Log To Inspector(Custom String("*/Subroutine(pfTick);
                End;
                Event Player.iter += 1;
            End;
            {0}", Custom String("Global.pfExecOwner = Null;
        End;
        If(Count Of(Event Player.pfPath));
            Event {0}", Custom String("Player.pfIsPathfinding = True;
            Event Player.pfCurrentNodeIndex = First Of(Event Player.pfPath);
           {0}", Custom String(" Event Player.pfWalkingToPosition = Global.pfLoadedMap_nodes[Event Player.pfCurrentNodeIndex];
            Call /*")))));
            Log To Inspector(Custom String("*/Subroutine(pfUpdateNodeMeta);
            Call Subroutine(pfWalkToDestination);
        End;
        Event {0}", Custom String("Player.pfWait = Null;
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule({0}", Custom String("\"【PF Core Subroutine】☞ Progress event player\")
{
    event
    {
        Subroutine;
        {0}", Custom String("pfProgressEventPlayer;
    }

    actions
    {
        If(Count Of(Event Player.pfPath) == 0);
            /*")))));
            Log To Inspector(Custom String("*/Skip(10);
        End;
        \"Pop the current path.\"
        Modify Player Variable(Event Player, pfPath, {0}", Custom String("Remove From Array By Index, 0);
        \"Update the current pathfind attributes.\"
        If(Count Of(Event {0}", Custom String("Player.pfPath) && First Of(Event Player.pfPath) != -1);
            {0}", Custom String("\"Any rules watching these with the matching condition will activate.\"
            Event Player.pfAttributes = First /*")))));
            Log To Inspector(Custom String("*/Of(Filtered Array(Global.pfLoadedMap_neighbors[First Of(Event Player.pfPath)], First Of(Current Array Element) == Event {0}", Custom String("Player.pfCurrentNodeIndex))[1];
        Else;
            Event Player.pfAttributes = Empty Array;
        End;
 {0}", Custom String("       \"Go to the next node in the path.\"
        Event Player.pfCurrentNodeIndex = First Of(Event Player.pfPath);
  {0}", Custom String("      \"Set the position that the player is currently walking towards.\"
        Event Player.pfWalkingToPosition = Event /*")))));
            Log To Inspector(Custom String("*/Player.pfCurrentNodeIndex == -1 ? (Distance Between(Event Player.pfDestination, Event Player.pfSavedTarget) <= 4 ? Event {0}", Custom String("Player.pfDestination : Position Of(Event Player)) : Global.pfLoadedMap_nodes[Event Player.pfCurrentNodeIndex];
        {0}", Custom String("Call Subroutine(pfUpdateNodeMeta);
    }
}

rule(\"【PF Core】Node reached\")
{
    event
    {
   {0}", Custom String("     Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Event /*")))));
            Log To Inspector(Custom String("*/Player.pfIsPathfinding == True;
        Event Player.pfWalkingToPosition == True;
        {0}", Custom String("\"Horizontal distance to current position is less than 0.4.\"

        Distance Between(Position Of(Event Player) * {0}", Custom String("Vector(1, Empty Array, 1), Event Player.pfWalkingToPosition * Vector(1, Empty Array, 1)) <= 0.4;
        {0}", Custom String("\"Vertical distance to current position is less than 1.5.\"

        Absolute Value(Y Component Of(Position Of(Event /*")))));
            Log To Inspector(Custom String("*/Player)) - Y Component Of(Event Player.pfWalkingToPosition)) <= 1.5;
        Count Of(Event Player.pfPath) > 0;
     {0}", Custom String("   Event Player.pfCurrentNodeIndex != -1;
    }

    actions
    {
        Call {0}", Custom String("Subroutine(pfProgressEventPlayer);
        Wait(0.2, Ignore Condition);
        Loop If Condition Is True;
    }
{0}", Custom String("}

rule(\"【PF Core】Stop throttle when pfDestination is reset\")
{
    event
    {
        Ongoing - Each/*")))));
            Log To Inspector(Custom String("*/ Player;
        All;
        All;
    }

    conditions
    {
        Event Player.pfIsPathfinding =={0}", Custom String(" True;
        Event Player.pfDestination == Null;
    }

    actions
    {
        Stop Throttle In {0}", Custom String("Direction(Event Player);
        Event Player.pfIsPathfinding = False;
        Event Player.pfSavedTarget = Null;
  {0}", Custom String("  }
}

rule(\"【PF Core Subroutine】☞ Recalibrate\")
{
    event
    {
        Subroutine;
       /*")))));
            Log To Inspector(Custom String("*/ pfRecalibrate;
    }

    actions
    {
        Stop Throttle In Direction(Event Player);
        Event {0}", Custom String("Player.pfCurrentNodeIndex = -1;
        Event Player.pfSavedTarget = Null;
        Event Player.pfIsPathfinding = {0}", Custom String("False;
        Event Player.pfWalkingToPosition = Position Of(Event Player);
    }
}

rule({0}", Custom String("\"【PF Core】Insurance\")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
  /*")))));
            Log To Inspector(Custom String("*/  }

    conditions
    {
        Event Player.pfIsPathfinding == True;
        Event {0}", Custom String("Player.pfWalkingToPosition == True;
    }

    actions
    {
        \"Recalibrate\"
        If(Distance {0}", Custom String("Between((Event Player.pfWalkingFromPosition + Event Player.pfWalkingToPosition) / 2, Event Player) > (Distance Between(Event {0}", Custom String("Player.pfWalkingFromPosition, Event Player.pfWalkingToPosition) + 2) * 1.2);
            Call Subroutine(pfRecalibrate);/*")))));
            Log To Inspector(Custom String("*/
        \"Smooth step\"
        Else If(Count Of(Event Player.pfPath) == 2 && Distance Between(Event Player, Event {0}", Custom String("Player.pfSavedTarget) < Distance Between(Event Player.pfWalkingToPosition, Event Player.pfSavedTarget) && Is In Line Of {0}", Custom String("Sight(Position Of(Event Player) + Vector(0, 0.25, 0), Event Player.pfSavedTarget + Vector(0, 0.25, 0), Barriers Do Not Block {0}", Custom String("LOS));
            Call Subroutine(pfProgressEventPlayer);
        \"Recovery\"
        Else If(Distance /*")))));
            Log To Inspector(Custom String("*/Between(Event Player, Event Player.pfWalkingToPosition) > 0.25 && Event Player.pfIsStuck || Distance Between(Event {0}", Custom String("Player.pfWalkingFromPosition, Event Player.pfWalkingToPosition) - 4.95 * (Total Time Elapsed - Event Player.pfStartTime) < 0 {0}", Custom String("&& !Has Status(Event Player, Rooted) && !Has Status(Event Player, Frozen) && !Has Status(Event Player, Asleep) && !Has {0}", Custom String("Status(Event Player, Knocked Down) && !Has Status(Event Player, Stunned));
            If(Event Player.pfCurrentNodeIndex /*")))));
            Log To Inspector(String Replace(Custom String("*/== -1);
                Event Player.pfWalkingToPosition = Null;
            Else If(Event Player.pfStuckOnNode - 2 {0}", Custom String("== Event Player.pfCurrentNodeIndex);
                Log To Inspector(Custom String({0}", Custom String("\"Pathfinder ⨁0} struggled to reach node ⨁1} at ⨁2}. Try adjusting your map in the editor.\", Event Player, Event {0}", Custom String("Player.pfCurrentNodeIndex, Global.pfLoadedMap_nodes[Event Player.pfCurrentNodeIndex]));
                Teleport(Event /*")))), Custom String("⨁"), Custom String("{")));
            Log To Inspector(Custom String("*/Player, Event Player.pfWalkingToPosition);
            Else;
                Event Player.pfStuckOnNode = Event {0}", Custom String("Player.pfCurrentNodeIndex + 2;
                Call Subroutine(pfRecalibrate);
            End;
        {0}", Custom String("\"Shift destination\"
        Else If(Event Player.pfWalkingToPosition != Event Player.pfDestination && Event {0}", Custom String("Player.pfCurrentNodeIndex == -1 && Distance Between(Event Player.pfSavedTarget, Event Player.pfDestination) < 5 && Is In Line /*")))));
            Log To Inspector(Custom String("*/Of Sight(Event Player.pfSavedTarget + Up, Event Player.pfDestination + Up, Barriers Do Not Block LOS));
            {0}", Custom String("Event Player.pfWalkingToPosition = Event Player.pfDestination;
        End;
        Wait(2, Ignore Condition);
     {0}", Custom String("   Loop If Condition Is True;
    }
}

rule(\"【PF Core】Check throttle\")
{
    event
    {
      {0}", Custom String("  Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Event /*")))));
            Log To Inspector(Custom String("*/Player.pfIsPathfinding == True;
        Magnitude Of(Velocity Of(Event Player)) < 3;
    }

    actions
    {0}", Custom String("{
        Wait(2.1, Abort When False);
        Event Player.pfIsStuck = True;
        Wait Until(!Event {0}", Custom String("Player.pfWalkingToPosition || !Event Player.pfIsPathfinding || Magnitude Of(Velocity Of(Event Player)) >= 3, 9999);
      {0}", Custom String("  Event Player.pfIsStuck = False;
    }
}

rule(\"☆【PF Core Subroutine】☞ Look at destination\")
{
  /*")))));
            Log To Inspector(Custom String("*/  event
    {
        Subroutine;
        pfLookAtDestination;
    }

    actions
    {
        {0}", Custom String("\"Calling this subroutine will make the player look to the point they are walking towards.\"
        Start Facing(Event {0}", Custom String("Player, Direction Towards(Eye Position(Event Player) * (Distance Between(Position Of(Event Player), Event {0}", Custom String("Player.pfWalkingToPosition) < 3 ? Vector(1, Empty Array, 1) : Vector(1, 1, 1)), (Event Player.pfWalkingToPosition + Vector(0, /*")))));
            Log To Inspector(Custom String("*/1.5, 0)) * (Distance Between(Position Of(Event Player), Event Player.pfWalkingToPosition) < 3 ? Vector(1, Empty Array, 1) :{0}", Custom String(" Vector(1, 1, 1))), 500, To World, Direction And Turn Rate);
    }
}
/*")));
        "Export core code to ostw."
        Else If(Compare(Global Variable(outputLanguage), ==, 1));
            Log To Inspector(Custom String("*/struct PfMap {
    # The points in the map.
    public Vector[] nodes;
    {0}", Custom String("# `[node][i]`: neighbors `i` to `node`.
    public PfPath[][] neighbors;
}

single struct PfPath {
    public {0}", Custom String("Number neighbor;
    public Number[] attributes;
}

struct PfNode {
    public Number gScore;
    public {0}", Custom String("Number fScore;
    public Number parent;
    public Number nodeIndex;
}

# The currently loaded map
/*")))));
            Log To Inspector(Custom String("*/globalvar PfMap pfLoadedMap;
globalvar Number pfIterationsThisTick;
# Current pathfinder execution owner.
{0}", Custom String("globalvar Player pfExecOwner;

# The timestamp where a player requests a pathfind.
playervar Number pfWait;
{0}", Custom String("# The final pathfinding target.
playervar Vector pfDestination;
# The attributes assigned to the player.
playervar {0}", Custom String("Number[] pfPlayerAttributes;
# The attributes of a player's current pathfinding edge.
playervar Number[] pfAttributes;/*")))));
            Log To Inspector(Custom String("*/

# The saved target. If the distance between this and pfDestination becomes
{0}", Custom String("# too large, the pathfinding path will be updated.
playervar Vector pfSavedTarget;
{0}", Custom String("# Determines if the player is pathfinding.
playervar Boolean pfIsPathfinding;
{0}", Custom String("# The current node that the player is walking to.
# If this is -1 but `pfIsPathfinding` is true, then the player
/*")))));
            Log To Inspector(Custom String("*/# is walking to `pfDestination`.
playervar Number pfCurrentNodeIndex;
{0}", Custom String("# The position that the player is actively walking towards.
playervar Vector pfWalkingToPosition;
{0}", Custom String("# The path that the player will walk along. These are indexes in
{0}", Custom String("# `pfLoadedMap.nodes`. A value of `-1` will point to `pfDestination`.
playervar Number[] pfPath;
/*")))));
            Log To Inspector(Custom String("*/# The timestamp when the player reaches a node.
playervar Number pfStartTime;
{0}", Custom String("# The position the player was at when they started walking to `pfWalkingToPosition`.
playervar Vector {0}", Custom String("pfWalkingFromPosition;
# The node closest to the player.
playervar Number pfActiveNode;
{0}", Custom String("# This variable is set when a player fails to reaches a node.
playervar Number pfStuckOnNode;
/*")))));
            Log To Inspector(Custom String("*/# Player received path from another pathfinder.
playervar Boolean pfWasBroadcasted;
{0}", Custom String("# Is the player failing to walk?
playervar Boolean pfIsStuck;

rule: '【PF Core】Prepare loaded map'
if {0}", Custom String("(pfLoadedMap.nodes)
if (pfIterationsThisTick != -99)
{
    for (Number i = 0; pfLoadedMap.nodes.Length; 1) {
    {0}", Custom String("    pfLoadedMap.nodes[i] = Vector(
            pfLoadedMap.nodes[i].X,
            pfLoadedMap.nodes[i].Y.Floor() + (i //*")))));
            Log To Inspector(Custom String("*/ 1000) * (pfLoadedMap.nodes[i].Y < 0 ? -1 : 1),
            pfLoadedMap.nodes[i].Z
        );
    }
}

{0}", Custom String("void pfEvent(in String text) {
    // dbgEvents += {
    //     name: text,
    {0}", Custom String("//     timeStamp: TotalTimeElapsed()
    // };
    // while (dbgEvents.Length > 10) {
    {0}", Custom String("//     dbgEvents.ModRemoveByIndex(0);
    // }
}

void pfTick() '【PF Core Subroutine】☞ Tick'
{
    /*")))));
            Log To Inspector(Custom String("*/pfIterationsThisTick--;
    if (pfIterationsThisTick <= 0) {
        MinWait();
        {0}", Custom String("WaitUntil(Max(ServerLoadAverage(), ServerLoad()) < 255, 0.25);
        {0}", Custom String("# This determines the pathfinding budget for the current tick.
        pfIterationsThisTick = (Max(ServerLoadAverage(), {0}", Custom String("ServerLoad()) < 230) + (Max(ServerLoadAverage(), ServerLoad()) < 180) * 2 + 1;
    }
}

rule: /*")))));
            Log To Inspector(Custom String("*/'【PF Core】Select next pathfinder'
if (!EntityExists(pfExecOwner) || pfExecOwner == null)
if {0}", Custom String("(AllPlayers().IsTrueForAny(p => p.pfWait))
{
    pfExecOwner = AllPlayers().FilteredArray(p => p.pfWait).SortedArray(p {0}", Custom String("=> p.pfWait).First;
    MinWait();
    LoopIfConditionIsTrue();
}

rule: '【PF Core】Update & Execute'
{0}", Custom String("Event.OngoingPlayer
if (pfDestination)
if (EventPlayer().DistanceTo(pfDestination) > 4)
if (!pfSavedTarget || /*")))));
            Log To Inspector(Custom String("*/pfDestination.DistanceTo(pfSavedTarget) > 5)
{
    # Ensure that a map is loaded.
    if (!pfLoadedMap.nodes)
 {0}", Custom String("   {
        LogToInspector(<'Error: Attempted to pathfind player <0> without a loaded map.', EventPlayer()>);
        {0}", Custom String("return;
    }

    pfWait = TotalTimeElapsed();
    pfWasBroadcasted = false;
    WaitUntil(pfExecOwner == {0}", Custom String("EventPlayer() || pfWasBroadcasted, 9999);
    pfEvent('PF Execute');
    
    # Update saved destination
    /*")))));
            Log To Inspector(Custom String("*/pfSavedTarget = pfDestination;
    if (!pfWasBroadcasted) {
        aStar();
        pfExecOwner = null;
    }{0}", Custom String("
    if (pfPath.Length) {
        pfIsPathfinding = true;
        pfCurrentNodeIndex = pfPath.First;
        {0}", Custom String("pfWalkingToPosition = pfLoadedMap.nodes[pfCurrentNodeIndex];
        pfUpdateNodeMeta();
        pfWalkToDestination();{0}", Custom String("
    }
    pfWait = null;
    Wait(2);
    LoopIfConditionIsTrue();
}

rule: '【PF Core】Node reached'/*")))));
            Log To Inspector(Custom String("*/
Event.OngoingPlayer
if (pfIsPathfinding)
if (pfWalkingToPosition)
{0}", Custom String("# Horizontal distance to current position is less than 0.4.
if ((PositionOf() * Vector(1, 0, {0}", Custom String("1)).DistanceTo(pfWalkingToPosition * Vector(1, 0, 1)) <= 0.4)
{0}", Custom String("# Vertical distance to current position is less than 1.5.
if (PositionOf().Y - pfWalkingToPosition.Y~Abs() <= 1.5)
if /*")))));
            Log To Inspector(Custom String("*/(pfPath.Length > 0)
if (pfCurrentNodeIndex != -1)
{
    pfProgressEventPlayer();
    Wait(0.2);
    {0}", Custom String("LoopIfConditionIsTrue();
}

rule: '【PF Core】Stop throttle when pfDestination is reset'
Event.OngoingPlayer{0}", Custom String("
if (pfIsPathfinding)
if (pfDestination == null)
{
    StopThrottleInDirection();
    pfIsPathfinding = false;{0}", Custom String("
    pfSavedTarget = null;
}

rule: '【PF Core】Insurance'
Event.OngoingPlayer
if (pfIsPathfinding)
if /*")))));
            Log To Inspector(Custom String("*/(pfWalkingToPosition)
{
    # Recalibrate
    if (((pfWalkingFromPosition + pfWalkingToPosition) / {0}", Custom String("2).DistanceTo(EventPlayer()) > (pfWalkingFromPosition.DistanceTo(pfWalkingToPosition) + 2) * 1.2)
    {
        {0}", Custom String("pfEvent('Not on path; recalibrating.');
        pfRecalibrate();
    }
    # Smooth step
    else if {0}", Custom String("(pfPath.Length == 2 &&
        EventPlayer().DistanceTo(pfSavedTarget) < pfWalkingToPosition.DistanceTo(pfSavedTarget) &&/*")))));
            Log To Inspector(Custom String("*/
        IsInLineOfSight(PositionOf() + Up() * 0.25, pfSavedTarget + Up() * 0.25))
    {
        pfEvent({0}", Custom String("'Smooth step');
        pfProgressEventPlayer();
    }
    # Recovery
    else if {0}", Custom String("(EventPlayer().DistanceTo(pfWalkingToPosition) > .25 &&
        pfIsStuck || {0}", Custom String("pfWalkingFromPosition.DistanceTo(pfWalkingToPosition) - 5.5 * 0.9 * (TotalTimeElapsed() - pfStartTime) < 0 &&
        /*")))));
            Log To Inspector(Custom String("*/!HasStatus(EventPlayer(), Status.Rooted) &&
        !HasStatus(EventPlayer(), Status.Frozen) &&
        {0}", Custom String("!HasStatus(EventPlayer(), Status.Asleep) &&
        !HasStatus(EventPlayer(), Status.KnockedDown) &&
        {0}", Custom String("!HasStatus(EventPlayer(), Status.Stunned))
    {
        if (pfCurrentNodeIndex == -1)
        {
            {0}", Custom String("pfWalkingToPosition = null;
        }
        else if (pfStuckOnNode - 2 == pfCurrentNodeIndex)
        {
        /*")))));
            Log To Inspector(Custom String("*/    pfEvent('Stuck, teleporting');
            LogToInspector(<{0}", Custom String("'Pathfinder <0> struggled to reach node <1> at <2>. Try adjusting your map in the editor.', EventPlayer(), {0}", Custom String("pfCurrentNodeIndex, pfLoadedMap.nodes[pfCurrentNodeIndex]>);
            Teleport(EventPlayer(), pfWalkingToPosition);
{0}", Custom String("        }
        else
        {
            pfEvent('Stuck, recalibrating');
            pfStuckOnNode = /*")))));
            Log To Inspector(Custom String("*/pfCurrentNodeIndex + 2;
            pfRecalibrate();
        }
    }
    # Shift destination
    else if ({0}", Custom String("
        pfWalkingToPosition != pfDestination &&
        pfCurrentNodeIndex == -1 &&
        {0}", Custom String("pfSavedTarget.DistanceTo(pfDestination) < 5 &&
        IsInLineOfSight(pfSavedTarget + Up(), pfDestination + Up()))
   {0}", Custom String(" {
        pfWalkingToPosition = pfDestination;
    }

    Wait(2);
    LoopIfConditionIsTrue();
}

/*")))));
            Log To Inspector(Custom String("*/rule: '【PF Core】Check throttle'
Event.OngoingPlayer
if (pfIsPathfinding)
if (VelocityOf().Magnitude < 3)
{{0}", Custom String("
    Wait(2.1, WaitBehavior.AbortWhenFalse);
    pfIsStuck = true;
    WaitUntil(!pfWalkingToPosition || {0}", Custom String("!pfIsPathfinding || VelocityOf().Magnitude >= 3, 9999);
    pfIsStuck = false;
}

void pfProgressEventPlayer() {0}", Custom String("playervar '【PF Core Subroutine】☞ Progress event player' {
    // Remove after debugging
    if (pfPath.Length == /*")))));
            Log To Inspector(Custom String("*/0) {
        pfEvent('Logic error: progress without any more path');
        return;
    }

    {0}", Custom String("# Pop the current path.
    pfPath.ModRemoveByIndex(0);
    # Update the current pathfind attributes.
    if {0}", Custom String("(pfPath.Length && pfPath.First != -1) {
        # Any rules watching these with the matching condition will activate.
 {0}", Custom String("       pfAttributes = pfLoadedMap.neighbors[pfPath.First].FilteredArray(segment => segment[0] == /*")))));
            Log To Inspector(Custom String("*/pfCurrentNodeIndex).First.attributes;
    } else {
        pfAttributes = [];
    }
    {0}", Custom String("# Go to the next node in the path.
    pfCurrentNodeIndex = pfPath.First;
    {0}", Custom String("# Set the position that the player is currently walking towards.
    pfWalkingToPosition = pfCurrentNodeIndex == -1 ? {0}", Custom String("pfDestination.DistanceTo(pfSavedTarget) <= 4 ? pfDestination : PositionOf() : pfLoadedMap.nodes[pfCurrentNodeIndex];
    /*")))));
            Log To Inspector(Custom String("*/pfUpdateNodeMeta();
}

void pfUpdateNodeMeta() playervar '【PF Core Subroutine】☞ Update node meta' {
    {0}", Custom String("if (pfCurrentNodeIndex != -1) {
        pfActiveNode = pfCurrentNodeIndex;
    }
    if (pfStuckOnNode == 1) {
  {0}", Custom String("      pfStuckOnNode = 0;
    }
    # Update the pathfinding start time.
    pfStartTime = TotalTimeElapsed();
   {0}", Custom String(" pfWalkingFromPosition = PositionOf();
}

void pfRecalibrate() playervar '【PF Core Subroutine】☞ Recalibrate' {/*")))));
            Log To Inspector(Custom String("*/
    StopThrottleInDirection();
    pfCurrentNodeIndex = -1;
    pfSavedTarget = null;
    pfIsPathfinding = {0}", Custom String("false;
    pfWalkingToPosition = PositionOf();
}

void pfWalkToDestination() playervar {0}", Custom String("'☆【PF Core Subroutine】☞ Walk to destination' {
    StartThrottleInDirection(
        EventPlayer(),
        {0}", Custom String("PositionOf().DirectionTowards(pfWalkingToPosition),
        pfWalkingToPosition && (pfCurrentNodeIndex != -1 || /*")))));
            Log To Inspector(Custom String("*/PositionOf().DistanceTo(pfWalkingToPosition) > .4),
        Relative.ToWorld,
        {0}", Custom String("ThrottleBehavior.ReplaceExistingThrottle,
        ThrottleRev.DirectionAndMagnitude);
}

void {0}", Custom String("pfLookAtDestination() playervar '☆【PF Core Subroutine】☞ Look at destination' {
    Vector distanceModifier: {0}", Custom String("(PositionOf().DistanceTo(pfWalkingToPosition) < 3 ? Vector(1,0,1) : Vector(1,1,1));
    /*")))));
            Log To Inspector(Custom String("*/# Calling this subroutine will make the player look to the point they are walking towards.
    {0}", Custom String("StartFacing(EventPlayer(), DirectionTowards(EyePosition() * distanceModifier, (pfWalkingToPosition + Up() * 1.5) * {0}", Custom String("distanceModifier), 500, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
}

{0}", Custom String("# Selects a node index from a position.
Number chooseNodeFromPosition(in Vector vector) {
    return (pfLoadedMap.nodes/*")))));
            Log To Inspector(Custom String("*/
        .SortedArray(n => n.DistanceTo(vector))
        .Slice(0, 5)
        .SortedArray(n => {0}", Custom String("!(IsInLineOfSight(n + Up() * 2, vector + Up() * 2, BarrierLOS.NoBarriersBlock)))
        .First.Y.Abs() * 1000 % {0}", Custom String("1000).Floor();
}

# Gets the shortest path from start to goal.
void aStar() {
    Number goal = {0}", Custom String("chooseNodeFromPosition(pfSavedTarget);
    pfTick();
    if (pfIsPathfinding && pfCurrentNodeIndex != -1) {
        /*")))));
            Log To Inspector(Custom String("*/pfActiveNode = pfCurrentNodeIndex;
    } else {
        pfActiveNode = chooseNodeFromPosition(PositionOf());
     {0}", Custom String("   pfTick();
    }

    Number heuristicWeight: 20;
    const Number => Number h: n => {0}", Custom String("pfLoadedMap.nodes[n].DistanceTo(pfLoadedMap.nodes[pfActiveNode]) * heuristicWeight;

    PfNode[] scores = [{ parent: {0}", Custom String("-1, gScore: 0, fScore: 0, nodeIndex: goal }];
    Number[] open = [0];
    Number checkedNode = pfActiveNode;

   /*")))));
            Log To Inspector(Custom String("*/ Number iter = 0;
    while (open.Length || iter > 30) {
        # The index of the current node in `scores`.
    {0}", Custom String("    Number current = open.SortedArray((o, i) => scores[o].fScore).First;
        {0}", Custom String("# The index of the current node in `pfLoadedMap.nodes`.
        Number currentNodeIndex: scores[current].nodeIndex;
{0}", Custom String("
        if (checkedNode != pfActiveNode) {
            checkedNode = scores.Map(s => s.nodeIndex).IndexOf(pfActiveNode);/*")))));
            Log To Inspector(Custom String("*/
            if (checkedNode != -1) {
                current = checkedNode;
                checkedNode = -2;
{0}", Custom String("            }
            else {
                checkedNode = pfActiveNode;
            }
        }

     {0}", Custom String("   Number currentInExistingPath = pfPath.IndexOf(currentNodeIndex);

        {0}", Custom String("# If the goal was found, reconstruct the path.
        if (currentNodeIndex == pfActiveNode || checkedNode == -2 || /*")))));
            Log To Inspector(Custom String("*/currentInExistingPath != -1) {
            reconstructPath(scores, current, currentInExistingPath, iter);
           {0}", Custom String(" return;
        }

        open.ModRemoveByValue(current);

        {0}", Custom String("# Check each neighbor to the current node.
        foreach (PfPath neighbor in pfLoadedMap.neighbors[currentNodeIndex]) {{0}", Custom String("
            # The neighbor index to be used like `pfLoadedMap.nodes[neighborI]`.
            Number neighborI = /*")))));
            Log To Inspector(Custom String("*/neighbor.neighbor;
            Number scoreIndex = scores.Map(s => s.nodeIndex).IndexOf(neighborI);
            {0}", Custom String("# Ensure that the path to the neighbor is enabled.
            if (neighbor.attributes.Length == 0 || {0}", Custom String("neighbor.attributes.IsTrueForAny(a => pfPlayerAttributes.Contains(a))) {
                Number score = {0}", Custom String("scores[current].gScore + pfLoadedMap.nodes[currentNodeIndex].DistanceTo(pfLoadedMap.nodes[neighborI]);

                /*")))));
            Log To Inspector(Custom String("*/# Get neighbor index in scores.
                # If -1, the neighbor was not added to the score list yet.
          {0}", Custom String("      if (scoreIndex == -1) {
                    open += scores.Length;
                    scores += { parent: {0}", Custom String("current, gScore: score, fScore: score + h(neighborI), nodeIndex: neighborI };
                } else if (score < {0}", Custom String("scores[scoreIndex].gScore) {
                    scores[scoreIndex] = { parent: current, gScore: score, fScore: score + /*")))));
            Log To Inspector(Custom String("*/h(neighborI), nodeIndex: neighborI };
                    if (!open.Contains(scoreIndex))
                        {0}", Custom String("open += scoreIndex;
                }
            }
            pfTick();
        }
        iter++;
    }{0}", Custom String("
}

void reconstructPath(in PfNode[] scores, ref Number current, in Number currentInExistingPath, in Number iter) {{0}", Custom String("
    if (currentInExistingPath == -1) {
        pfPath = [];
        pfEvent(<'Pathfind completed in <0> iterations', /*")))));
            Log To Inspector(Custom String("*/iter>);
    } else {
        pfPath = pfPath.Slice(0, currentInExistingPath);
        pfEvent(<{0}", Custom String("'Intercepted existing path in <0> iterations', iter>);
    }
    while (current != -1) {
        pfPath += {0}", Custom String("scores[current].nodeIndex;
        current = scores[current].parent;
    }
    pfPath += [-1];

    Player[] {0}", Custom String("broadcastTo = PlayersWithinRadius(PositionOf() + Up(), 4, Team.All, RadiusLOS.Off)
        .FilteredArray(p =>
         /*")))));
            Log To Inspector(Custom String("*/   p != EventPlayer() &&
            p.pfWait &&
            p.pfDestination.DistanceTo(pfDestination) < 4 &&
    {0}", Custom String("        p.pfPlayerAttributes == pfPlayerAttributes);
    
    broadcastTo.pfPath = pfPath;
    {0}", Custom String("broadcastTo.pfWasBroadcasted = true;
}/*"))));
        "Export core code to overpy."
        Else If(Compare(Global Variable(outputLanguage), ==, 2));
            Log To Inspector(Custom String("*/#Global variables

globalvar pfLoadedMap_nodes
globalvar pfLoadedMap_neighbors
globalvar pfIterationsThisTick
{0}", Custom String("globalvar pfExecOwner
globalvar i


#Player variables

playervar pfWait
playervar pfDestination
playervar {0}", Custom String("pfPlayerAttributes
playervar pfAttributes
playervar pfSavedTarget
playervar pfIsPathfinding
playervar pfCurrentNodeIndex{0}", Custom String("
playervar pfWalkingToPosition
playervar pfPath
playervar pfStartTime
playervar pfWalkingFromPosition
playervar /*")))));
            Log To Inspector(Custom String("*/pfActiveNode
playervar pfStuckOnNode
playervar pfWasBroadcasted
playervar pfIsStuck
playervar goal
playervar {0}", Custom String("scores_gScore
playervar scores_fScore
playervar scores_parent
playervar scores_nodeIndex
playervar open
playervar {0}", Custom String("checkedNode
playervar iter
playervar current
playervar currentInExistingPath
playervar broadcastTo
playervar neighbor
{0}", Custom String("playervar neighborI
playervar scoreIndex
playervar score


#Subroutine names

subroutine pfTick
subroutine /*")))));
            Log To Inspector(Custom String("*/pfUpdateNodeMeta
subroutine pfWalkToDestination
subroutine pfProgressEventPlayer
subroutine pfRecalibrate
subroutine {0}", Custom String("pfLookAtDestination


rule \"【PF Core】Prepare loaded map\":
    waitUntil(pfLoadedMap_nodes, 9999)
    for i in {0}", Custom String("range(len(pfLoadedMap_nodes)):
        pfLoadedMap_nodes[i] = vect(pfLoadedMap_nodes[i].x, floor(pfLoadedMap_nodes[i].y) + {0}", Custom String("(i / 1000 * (-1 if pfLoadedMap_nodes[i].y < 0 else 1)), pfLoadedMap_nodes[i].z)


rule /*")))));
            Log To Inspector(Custom String("*/\"【PF Core】Select next pathfinder\":
    @Condition (not entityExists(pfExecOwner) or pfExecOwner == null) == true
  {0}", Custom String("  @Condition any([player.pfWait for player in getAllPlayers()]) == true
    
    pfExecOwner = sorted([player for player in{0}", Custom String(" getAllPlayers() if player.pfWait], lambda i_: i_.pfWait)[0]
    wait()
    if ruleCondition:
        loop()


def {0}", Custom String("pfTick():
    @Name \"【PF Core Subroutine】☞ Tick\"
    
    pfIterationsThisTick--
    if pfIterationsThisTick <= 0:/*")))));
            Log To Inspector(Custom String("*/
        wait()
        waitUntil(max(getAverageServerLoad(), getServerLoad()) < 255, 0.25)
        {0}", Custom String("#This determines the pathfinding budget for the current tick.
        pfIterationsThisTick = ((max(getAverageServerLoad(), {0}", Custom String("getServerLoad()) < 230) + ((max(getAverageServerLoad(), getServerLoad()) < 180) * 2)) + 1


def pfUpdateNodeMeta():
    {0}", Custom String("@Name \"【PF Core Subroutine】☞ Update node meta\"
    
    if eventPlayer.pfCurrentNodeIndex != -1:
        /*")))));
            Log To Inspector(Custom String("*/eventPlayer.pfActiveNode = eventPlayer.pfCurrentNodeIndex
    if eventPlayer.pfStuckOnNode == 1:
        {0}", Custom String("eventPlayer.pfStuckOnNode = 0
    #Update the pathfinding start time.
    eventPlayer.pfStartTime = getTotalTimeElapsed()
{0}", Custom String("    eventPlayer.pfWalkingFromPosition = eventPlayer.getPosition()


def pfWalkToDestination():
    @Name {0}", Custom String("\"☆【PF Core Subroutine】☞ Walk to destination\"
    
    /*")))));
            Log To Inspector(Custom String("*/eventPlayer.startThrottleInDirection(directionTowards(eventPlayer.getPosition(), eventPlayer.pfWalkingToPosition), {0}", Custom String("eventPlayer.pfWalkingToPosition and (eventPlayer.pfCurrentNodeIndex != -1 or distance(eventPlayer.getPosition(), {0}", Custom String("eventPlayer.pfWalkingToPosition) > 0.4), Relativity.TO_WORLD)


rule \"【PF Core】Update & Execute\":
    @Event {0}", Custom String("eachPlayer
    @Condition eventPlayer.pfDestination == true
    @Condition distance(eventPlayer, eventPlayer.pfDestination) /*")))));
            Log To Inspector(String Replace(Custom String("*/> 4
    @Condition (not eventPlayer.pfSavedTarget or distance(eventPlayer.pfDestination, eventPlayer.pfSavedTarget) > 5) {0}", Custom String("== true
    
    #Ensure that a map is loaded.
    if not pfLoadedMap_nodes:
        logToInspector({0}", Custom String("\"Error: Attempted to pathfind player ⨁0} without a loaded map.\".format(eventPlayer))
        return
    {0}", Custom String("eventPlayer.pfWait = getTotalTimeElapsed()
    eventPlayer.pfWasBroadcasted = false
    waitUntil(pfExecOwner == eventPlayer/*")))), Custom String("⨁"), Custom String("{")));
            Log To Inspector(Custom String("*/ or eventPlayer.pfWasBroadcasted, 9999)
    #Update saved destination
    eventPlayer.pfSavedTarget = {0}", Custom String("eventPlayer.pfDestination
    if not eventPlayer.pfWasBroadcasted:
        eventPlayer.goal = {0}", Custom String("floor(((abs(((sorted(sorted(pfLoadedMap_nodes, lambda player: distance(player, eventPlayer.pfSavedTarget)).slice(0, 5), {0}", Custom String("lambda i_: not isInLoS(i_ + vect(0, 2, 0), eventPlayer.pfSavedTarget + vect(0, 2, 0))))[0]).y)) * 1000) % 1000)
        /*")))));
            Log To Inspector(Custom String("*/pfTick()
        if eventPlayer.pfIsPathfinding and eventPlayer.pfCurrentNodeIndex != -1:
            {0}", Custom String("eventPlayer.pfActiveNode = eventPlayer.pfCurrentNodeIndex
        else:
            eventPlayer.pfActiveNode = {0}", Custom String("floor(((abs(((sorted(sorted(pfLoadedMap_nodes, lambda player: distance(player, eventPlayer.getPosition())).slice(0, 5), {0}", Custom String("lambda i_: not isInLoS(i_ + vect(0, 2, 0), eventPlayer.getPosition() + vect(0, 2, 0))))[0]).y)) * 1000) % 1000)
            /*")))));
            Log To Inspector(Custom String("*/pfTick()
        eventPlayer.scores_gScore = [0]
        eventPlayer.scores_fScore = [0]
        {0}", Custom String("eventPlayer.scores_parent = [-1]
        eventPlayer.scores_nodeIndex = [eventPlayer.goal]
        eventPlayer.open = [0]
{0}", Custom String("        eventPlayer.checkedNode = eventPlayer.pfActiveNode
        eventPlayer.iter = 0
        while len(eventPlayer.open){0}", Custom String(" or eventPlayer.iter > 30:
            #The index of the current node in `scores`.
            eventPlayer.current = /*")))));
            Log To Inspector(Custom String("*/sorted(eventPlayer.open, lambda player: eventPlayer.scores_fScore[player])[0]
            if eventPlayer.checkedNode != {0}", Custom String("eventPlayer.pfActiveNode:
                eventPlayer.checkedNode = {0}", Custom String("eventPlayer.scores_nodeIndex.index(eventPlayer.pfActiveNode)
                if eventPlayer.checkedNode != -1:
            {0}", Custom String("        eventPlayer.current = eventPlayer.checkedNode
                    eventPlayer.checkedNode = -2
                else:/*")))));
            Log To Inspector(Custom String("*/
                    eventPlayer.checkedNode = eventPlayer.pfActiveNode
            eventPlayer.currentInExistingPath = {0}", Custom String("eventPlayer.pfPath.index(eventPlayer.scores_nodeIndex[eventPlayer.current])
            {0}", Custom String("#If the goal was found, reconstruct the path.
            if eventPlayer.scores_nodeIndex[eventPlayer.current] == {0}", Custom String("eventPlayer.pfActiveNode or eventPlayer.checkedNode == -2 or eventPlayer.currentInExistingPath != -1:
                if /*")))));
            Log To Inspector(Custom String("*/eventPlayer.currentInExistingPath == -1:
                    eventPlayer.pfPath = []
                else:
             {0}", Custom String("       eventPlayer.pfPath = eventPlayer.pfPath.slice(0, eventPlayer.currentInExistingPath)
                while {0}", Custom String("eventPlayer.current != -1:
                    eventPlayer.pfPath.append(eventPlayer.scores_nodeIndex[eventPlayer.current]){0}", Custom String("
                    eventPlayer.current = eventPlayer.scores_parent[eventPlayer.current]
                /*")))));
            Log To Inspector(Custom String("*/eventPlayer.pfPath.append([-1])
                eventPlayer.broadcastTo = [player for player in {0}", Custom String("getPlayersInRadius(eventPlayer.getPosition() + Vector.UP, 4, Team.ALL) if player != eventPlayer and player.pfWait and {0}", Custom String("distance(player.pfDestination, eventPlayer.pfDestination) < 4 and player.pfPlayerAttributes == {0}", Custom String("eventPlayer.pfPlayerAttributes]
                eventPlayer.broadcastTo.pfPath = eventPlayer.pfPath
                /*")))));
            Log To Inspector(Custom String("*/eventPlayer.broadcastTo.pfWasBroadcasted = true
                goto lbl_0
            {0}", Custom String("eventPlayer.open.remove(eventPlayer.current)
            #Check each neighbor to the current node.
            for {0}", Custom String("eventPlayer.neighbor in range(len(pfLoadedMap_neighbors[eventPlayer.scores_nodeIndex[eventPlayer.current]])):
              {0}", Custom String("  #The neighbor index to be used like `pfLoadedMap.nodes[neighborI]`.
                eventPlayer.neighborI = /*")))));
            Log To Inspector(Custom String("*/pfLoadedMap_neighbors[eventPlayer.scores_nodeIndex[eventPlayer.current]][eventPlayer.neighbor][0]
                {0}", Custom String("eventPlayer.scoreIndex = eventPlayer.scores_nodeIndex.index(eventPlayer.neighborI)
                {0}", Custom String("#Ensure that the path to the neighbor is enabled.
                if {0}", Custom String("len(pfLoadedMap_neighbors[eventPlayer.scores_nodeIndex[eventPlayer.current]][eventPlayer.neighbor][1]) == 0 or any([i_ in /*")))));
            Log To Inspector(Custom String("*/eventPlayer.pfPlayerAttributes for i_ in {0}", Custom String("pfLoadedMap_neighbors[eventPlayer.scores_nodeIndex[eventPlayer.current]][eventPlayer.neighbor][1]]):
                    {0}", Custom String("eventPlayer.score = eventPlayer.scores_gScore[eventPlayer.current] + {0}", Custom String("distance(pfLoadedMap_nodes[eventPlayer.scores_nodeIndex[eventPlayer.current]], pfLoadedMap_nodes[eventPlayer.neighborI])
    /*")))));
            Log To Inspector(Custom String("*/                #Get neighbor index in scores.
                    {0}", Custom String("#If -1, the neighbor was not added to the score list yet.
                    if eventPlayer.scoreIndex == -1:
            {0}", Custom String("            eventPlayer.open.append(len(eventPlayer.scores_gScore))
                        {0}", Custom String("eventPlayer.scores_gScore.append(eventPlayer.score)
                        /*")))));
            Log To Inspector(Custom String("*/eventPlayer.scores_fScore.append(eventPlayer.score + distance(pfLoadedMap_nodes[eventPlayer.neighborI], {0}", Custom String("pfLoadedMap_nodes[eventPlayer.pfActiveNode]) * 20)
                        {0}", Custom String("eventPlayer.scores_parent.append(eventPlayer.current)
                        {0}", Custom String("eventPlayer.scores_nodeIndex.append(eventPlayer.neighborI)
                    elif eventPlayer.score < /*")))));
            Log To Inspector(Custom String("*/eventPlayer.scores_gScore[eventPlayer.scoreIndex]:
                        {0}", Custom String("eventPlayer.scores_gScore[eventPlayer.scoreIndex] = eventPlayer.score
                        {0}", Custom String("eventPlayer.scores_fScore[eventPlayer.scoreIndex] = eventPlayer.score + distance(pfLoadedMap_nodes[eventPlayer.neighborI], {0}", Custom String("pfLoadedMap_nodes[eventPlayer.pfActiveNode]) * 20
                        eventPlayer.scores_parent[eventPlayer.scoreIndex] =/*")))));
            Log To Inspector(Custom String("*/ eventPlayer.current
                        eventPlayer.scores_nodeIndex[eventPlayer.scoreIndex] = eventPlayer.neighborI{0}", Custom String("
                        if not eventPlayer.scoreIndex in eventPlayer.open:
                            {0}", Custom String("eventPlayer.open.append(eventPlayer.scoreIndex)
                pfTick()
            eventPlayer.iter++
        lbl_0:
  {0}", Custom String("      pfExecOwner = null
    if len(eventPlayer.pfPath):
        eventPlayer.pfIsPathfinding = true
        /*")))));
            Log To Inspector(Custom String("*/eventPlayer.pfCurrentNodeIndex = eventPlayer.pfPath[0]
        eventPlayer.pfWalkingToPosition = {0}", Custom String("pfLoadedMap_nodes[eventPlayer.pfCurrentNodeIndex]
        pfUpdateNodeMeta()
        pfWalkToDestination()
    {0}", Custom String("eventPlayer.pfWait = null
    wait(2)
    if ruleCondition:
        loop()


def pfProgressEventPlayer():
    @Name {0}", Custom String("\"【PF Core Subroutine】☞ Progress event player\"
    
    if len(eventPlayer.pfPath) == 0:
        goto lbl_0
    /*")))));
            Log To Inspector(Custom String("*/#Pop the current path.
    del eventPlayer.pfPath[0]
    #Update the current pathfind attributes.
    if {0}", Custom String("len(eventPlayer.pfPath) and eventPlayer.pfPath[0] != -1:
        {0}", Custom String("#Any rules watching these with the matching condition will activate.
        eventPlayer.pfAttributes = (([i_ for i_ in {0}", Custom String("pfLoadedMap_neighbors[eventPlayer.pfPath[0]] if i_[0] == eventPlayer.pfCurrentNodeIndex])[0]).last()
    else:
        /*")))));
            Log To Inspector(Custom String("*/eventPlayer.pfAttributes = []
    #Go to the next node in the path.
    eventPlayer.pfCurrentNodeIndex = {0}", Custom String("eventPlayer.pfPath[0]
    #Set the position that the player is currently walking towards.
    {0}", Custom String("eventPlayer.pfWalkingToPosition = (eventPlayer.pfDestination if distance(eventPlayer.pfDestination, {0}", Custom String("eventPlayer.pfSavedTarget) <= 4 else eventPlayer.getPosition()) if eventPlayer.pfCurrentNodeIndex == -1 else /*")))));
            Log To Inspector(Custom String("*/pfLoadedMap_nodes[eventPlayer.pfCurrentNodeIndex]
    pfUpdateNodeMeta()
    lbl_0:


rule {0}", Custom String("\"【PF Core】Node reached\":
    @Event eachPlayer
    @Condition eventPlayer.pfIsPathfinding == true
    @Condition {0}", Custom String("eventPlayer.pfWalkingToPosition == true
    #Horizontal distance to current position is less than 0.4.
    @Condition {0}", Custom String("distance(eventPlayer.getPosition() * vect(1, [], 1), eventPlayer.pfWalkingToPosition * vect(1, [], 1)) <= 0.4
    /*")))));
            Log To Inspector(Custom String("*/#Vertical distance to current position is less than 1.5.
    @Condition abs(eventPlayer.getPosition().y - {0}", Custom String("eventPlayer.pfWalkingToPosition.y) <= 1.5
    @Condition len(eventPlayer.pfPath) > 0
    @Condition {0}", Custom String("eventPlayer.pfCurrentNodeIndex != -1
    
    pfProgressEventPlayer()
    wait(0.2)
    if ruleCondition:
        loop(){0}", Custom String("


rule \"【PF Core】Stop throttle when pfDestination is reset\":
    @Event eachPlayer
    @Condition /*")))));
            Log To Inspector(Custom String("*/eventPlayer.pfIsPathfinding == true
    @Condition eventPlayer.pfDestination == null
    
    {0}", Custom String("eventPlayer.stopThrottleInDirection()
    eventPlayer.pfIsPathfinding = false
    eventPlayer.pfSavedTarget = null


def{0}", Custom String(" pfRecalibrate():
    @Name \"【PF Core Subroutine】☞ Recalibrate\"
    
    eventPlayer.stopThrottleInDirection()
  {0}", Custom String("  eventPlayer.pfCurrentNodeIndex = -1
    eventPlayer.pfSavedTarget = null
    eventPlayer.pfIsPathfinding = false
    /*")))));
            Log To Inspector(Custom String("*/eventPlayer.pfWalkingToPosition = eventPlayer.getPosition()


rule \"【PF Core】Insurance\":
    @Event eachPlayer
 {0}", Custom String("   @Condition eventPlayer.pfIsPathfinding == true
    @Condition eventPlayer.pfWalkingToPosition == true
    
    {0}", Custom String("#Recalibrate
    if distance((eventPlayer.pfWalkingFromPosition + eventPlayer.pfWalkingToPosition) / 2, eventPlayer) > {0}", Custom String("(distance(eventPlayer.pfWalkingFromPosition, eventPlayer.pfWalkingToPosition) + 2) * 1.2:
        pfRecalibrate()
        /*")))));
            Log To Inspector(Custom String("*/#Smooth step
    elif len(eventPlayer.pfPath) == 2 and distance(eventPlayer, eventPlayer.pfSavedTarget) < {0}", Custom String("distance(eventPlayer.pfWalkingToPosition, eventPlayer.pfSavedTarget) and isInLoS(eventPlayer.getPosition() + vect(0, 0.25, {0}", Custom String("0), eventPlayer.pfSavedTarget + vect(0, 0.25, 0)):
        pfProgressEventPlayer()
        #Recovery
    elif {0}", Custom String("distance(eventPlayer, eventPlayer.pfWalkingToPosition) > 0.25 and eventPlayer.pfIsStuck or /*")))));
            Log To Inspector(Custom String("*/distance(eventPlayer.pfWalkingFromPosition, eventPlayer.pfWalkingToPosition) - (4.95 * (getTotalTimeElapsed() - {0}", Custom String("eventPlayer.pfStartTime)) < 0 and not eventPlayer.hasStatus(Status.ROOTED) and not eventPlayer.hasStatus(Status.FROZEN) and {0}", Custom String("not eventPlayer.hasStatus(Status.ASLEEP) and not eventPlayer.hasStatus(Status.KNOCKED_DOWN) and not {0}", Custom String("eventPlayer.hasStatus(Status.STUNNED):
        if eventPlayer.pfCurrentNodeIndex == -1:
            /*")))));
            Log To Inspector(String Replace(Custom String("*/eventPlayer.pfWalkingToPosition = null
        elif eventPlayer.pfStuckOnNode - 2 == eventPlayer.pfCurrentNodeIndex:
    {0}", Custom String("        logToInspector(\"Pathfinder ⨁0} struggled to reach node ⨁1} at ⨁2}. Try adjusting your map in the editor.\"{0}", Custom String(".format(eventPlayer, eventPlayer.pfCurrentNodeIndex, pfLoadedMap_nodes[eventPlayer.pfCurrentNodeIndex]))
            {0}", Custom String("eventPlayer.teleport(eventPlayer.pfWalkingToPosition)
        else:
            eventPlayer.pfStuckOnNode = /*")))), Custom String("⨁"), Custom String("{")));
            Log To Inspector(Custom String("*/eventPlayer.pfCurrentNodeIndex + 2
            pfRecalibrate()
        #Shift destination
    elif {0}", Custom String("eventPlayer.pfWalkingToPosition != eventPlayer.pfDestination and eventPlayer.pfCurrentNodeIndex == -1 and {0}", Custom String("distance(eventPlayer.pfSavedTarget, eventPlayer.pfDestination) < 5 and isInLoS(eventPlayer.pfSavedTarget + Vector.UP, {0}", Custom String("eventPlayer.pfDestination + Vector.UP):
        eventPlayer.pfWalkingToPosition = eventPlayer.pfDestination
    wait(2)
   /*")))));
            Log To Inspector(Custom String("*/ if ruleCondition:
        loop()


rule \"【PF Core】Check throttle\":
    @Event eachPlayer
    @Condition {0}", Custom String("eventPlayer.pfIsPathfinding == true
    @Condition magnitude(eventPlayer.getVelocity()) < 3
    
    wait(2.1, {0}", Custom String("Wait.ABORT_WHEN_FALSE)
    eventPlayer.pfIsStuck = true
    waitUntil(not eventPlayer.pfWalkingToPosition or not {0}", Custom String("eventPlayer.pfIsPathfinding or magnitude(eventPlayer.getVelocity()) >= 3, 9999)
    eventPlayer.pfIsStuck = false


def /*")))));
            Log To Inspector(Custom String("*/pfLookAtDestination():
    @Name \"☆【PF Core Subroutine】☞ Look at destination\"
    
    {0}", Custom String("#Calling this subroutine will make the player look to the point they are walking towards.
    {0}", Custom String("eventPlayer.startFacing(directionTowards(eventPlayer.getEyePosition() * (vect(1, [], 1) if {0}", Custom String("distance(eventPlayer.getPosition(), eventPlayer.pfWalkingToPosition) < 3 else vect(1, 1, 1)), (eventPlayer.pfWalkingToPosition/*")))));
            Log To Inspector(Custom String("*/ + vect(0, 1.5, 0)) * (vect(1, [], 1) if distance(eventPlayer.getPosition(), eventPlayer.pfWalkingToPosition) < 3 else {0}", Custom String("vect(1, 1, 1))), 500)


/*")));
        End;
    }
}

// Rule Element Count: 1323
rule("EXPORT: Export")
{
    event
    {
        Subroutine;
        ExportRules;
    }

    // Element Count: 1322, Action Count: 103
    // Largest Action Index: 30 using 94 Elements
    actions
    {
        For Player Variable(Event Player, i_1, 0, Count Of(Global Variable(Rules_Actions_Data)), 1);
            "Rule syntax"
            Log To Inspector(Value In Array(Array(Custom String("*/ rule(\"【Generated】Custom pathfinding rule #{0}\") { /*", Add(Player Variable(Event Player, i_1), 1)), Custom String("*/ rule: \"【Generated】Custom pathfinding rule #{0}\" /*", Add(Player Variable(Event Player, i_1), 1)), Custom String("*/\nrule \"【Generated】Custom pathfinding rule #{0}\": @Event eachPlayer /*", Add(Player Variable(Event Player, i_1), 1))), Global Variable(outputLanguage)));
            "Get the number of enabled heroes."
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 30, If-Then-Else(First Of(Value In Array(Global Variable(Rules_EnabledHeroes), Player Variable(Event Player, i_1))), Subtract(Count Of(All Heroes), Subtract(Count Of(Value In Array(Global Variable(Rules_EnabledHeroes), Player Variable(Event Player, i_1))), 1)), Subtract(Count Of(Value In Array(Global Variable(Rules_EnabledHeroes), Player Variable(Event Player, i_1))), 1)));
            "Store the first toggled hero. This is effectively the first enabled hero since
anything using this value ensures that the switch is off. This will be null if no heroes are toggled."
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 31, Value In Array(Value In Array(Global Variable(Rules_EnabledHeroes), Player Variable(Event Player, i_1)), 1));
            "Add event (ow)"
            If(Compare(Global Variable(outputLanguage), ==, 0));
                Log To Inspector(Custom String("*/ event { Ongoing - Each Player; All; {0}; } /*", If-Then-Else(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 30), !=, 1), Custom String("All"), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 31))));
            "Add event (ostw)"
            Else If(Compare(Global Variable(outputLanguage), ==, 1));
                Log To Inspector(Custom String("*/ Event.OngoingPlayer /*"));
                If(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 30), ==, 1));
                    Log To Inspector(Custom String("*/ Player.{0} /*", String Replace(String Replace(String Replace(String Replace(String Replace(Custom String("{0}", Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 31)), Custom String(" "), Custom String("")), Custom String(":"), Custom String("")), Custom String("ú"), Custom String("")), Custom String("."), Custom String("")), Custom String("ö"), Custom String(""))));
                End;
            "Add event (overpy)"
            Else If(And(Compare(Global Variable(outputLanguage), ==, 2), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 30), ==, 1)));
                Log To Inspector(Custom String("*/\n    @Hero {0} /*", Value In Array(Array(Custom String("reaper"), Custom String("tracer"), Custom String("mercy"), Custom String("hanzo"), Custom String("torbjorn"), Custom String("reinhardt"), Custom String("pharah"), Custom String("winston"), Custom String("widowmaker"), Custom String("bastion"), Custom String("symmetra"), Custom String("zenyatta"), Custom String("genji"), Custom String("roadhog"), Custom String("mccree"), Custom String("junkrat"), Custom String("zarya"), Custom String("soldier"), Custom String("lucio"), Custom String("dva"), Custom String("mei"), Custom String("sombra"), Custom String("doomfist"), Custom String("ana"), Custom String("orisa"), Custom String("brigitte"), Custom String("moira"), Custom String("wreckingball"), Custom String("sojourn"), Custom String("ashe"), Custom String("echo"), Custom String("baptiste"), Custom String("kiriko"), Custom String("junkerqueen"), Custom String("sigma"), Custom String("ramattra"), Custom String("lifeweaver")), Index Of Array Value(All Heroes, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 31)))));
            End;
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 32, Array Slice(Value In Array(Global Variable(Rules_EnabledHeroes), Player Variable(Event Player, i_1)), 1, 1000));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 33, Null);
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 34, And(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 30), >, 1), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 30), <, Count Of(All Heroes))));
            If(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 34));
                Set Player Variable At Index(Event Player, _extendedPlayerCollection, 35, Custom String(""));
                Set Player Variable At Index(Event Player, _extendedPlayerCollection, 36, 0);
                While(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 36), <, Count Of(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 32))));
                    If(Compare(Global Variable(outputLanguage), ==, 0));
                        Set Player Variable(Event Player, lambda, Custom String("Hero({0})", Value In Array(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 32), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 36))));
                        Skip(9);
                    End;
                    If(Compare(Global Variable(outputLanguage), ==, 1));
                        Set Player Variable(Event Player, lambda, Custom String("Hero.{0}", String Replace(String Replace(String Replace(String Replace(String Replace(Custom String("{0}", Value In Array(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 32), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 36))), Custom String(" "), Custom String("")), Custom String(":"), Custom String("")), Custom String("ú"), Custom String("")), Custom String("."), Custom String("")), Custom String("ö"), Custom String(""))));
                        Skip(5);
                    End;
                    If(Compare(Global Variable(outputLanguage), ==, 2));
                        Set Player Variable(Event Player, lambda, Custom String("Hero.{0}", Value In Array(Array(Custom String("reaper"), Custom String("tracer"), Custom String("mercy"), Custom String("hanzo"), Custom String("torbjorn"), Custom String("reinhardt"), Custom String("pharah"), Custom String("winston"), Custom String("widowmaker"), Custom String("bastion"), Custom String("symmetra"), Custom String("zenyatta"), Custom String("genji"), Custom String("roadhog"), Custom String("mccree"), Custom String("junkrat"), Custom String("zarya"), Custom String("soldier"), Custom String("lucio"), Custom String("dva"), Custom String("mei"), Custom String("sombra"), Custom String("doomfist"), Custom String("ana"), Custom String("orisa"), Custom String("brigitte"), Custom String("moira"), Custom String("wreckingball"), Custom String("sojourn"), Custom String("ashe"), Custom String("echo"), Custom String("baptiste"), Custom String("kiriko"), Custom String("junkerqueen"), Custom String("sigma"), Custom String("ramattra"), Custom String("lifeweaver")), Index Of Array Value(All Heroes, Value In Array(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 32), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 36))))));
                        Skip(1);
                    End;
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 35, Custom String("{0}{1}{2}", Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 35), Player Variable(Event Player, lambda), If-Then-Else(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 36), !=, Subtract(Count Of(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 32)), 1)), Custom String(", "), Custom String(""))));
                    Wait(0.016, Ignore Condition);
                    Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 36, Add, 1);
                End;
                Set Player Variable At Index(Event Player, _extendedPlayerCollection, 33, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 35));
            End;
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 37, Not(First Of(Value In Array(Global Variable(Rules_EnabledHeroes), Player Variable(Event Player, i_1)))));
            "Workshop condition"
            If(Compare(Global Variable(outputLanguage), ==, 0));
                Log To Inspector(Custom String("*/ conditions { /*"));
                Log To Inspector(Custom String("*/     Array Contains(Event Player.pfAttributes, {0}) == True; /*", Value In Array(Global Variable(Rules_ExecutesOnAttribute), Player Variable(Event Player, i_1))));
                "Multiple heroes"
                If(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 34));
                    Log To Inspector(Custom String("*/     Array Contains(Array({0}), Hero Of(Event Player)) == {1}; /*", Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 33), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 37)));
                End;
                Log To Inspector(Custom String("*/ } actions { /*"));
            "OSTW condition"
            Else If(Compare(Global Variable(outputLanguage), ==, 1));
                Log To Inspector(Custom String("*/ if (pfAttributes.Contains({0})) /*", Value In Array(Global Variable(Rules_ExecutesOnAttribute), Player Variable(Event Player, i_1))));
                "Multiple heroes"
                If(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 34));
                    Log To Inspector(Custom String("*/ if ({0}[{1}].Contains(HeroOf())) /*", If-Then-Else(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 37), Custom String(""), Custom String("!")), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 33)));
                End;
                "Start rule block"
                Log To Inspector(Custom String("*/ { /*"));
            "Overpy condition"
            Else If(Compare(Global Variable(outputLanguage), ==, 2));
                Log To Inspector(Custom String("*/\n    @Condition {0} in eventPlayer.pfAttributes /*", Value In Array(Global Variable(Rules_ExecutesOnAttribute), Player Variable(Event Player, i_1))));
                "Multiple heroes"
                If(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 34));
                    Log To Inspector(Custom String("*/\n    @Condition eventPlayer.getCurrentHero() {0} [{1}] /*", If-Then-Else(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 37), Custom String("in"), Custom String("not in")), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 33)));
                End;
            End;
            "Loop through each action in the rule."
            For Player Variable(Event Player, a_0, 0, Count Of(Value In Array(Global Variable(Rules_Actions_Data), Player Variable(Event Player, i_1))), 1);
                "Extract the action ID."
                Set Player Variable(Event Player, data, Value In Array(Value In Array(Global Variable(Rules_Actions_Data), Player Variable(Event Player, i_1)), Player Variable(Event Player, a_0)));
                "Wait"
                If(Compare(First Of(Player Variable(Event Player, data)), ==, 0));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Wait({0}, Ignore Condition);", Value In Array(Player Variable(Event Player, data), 1))), Custom String("{0}{1}", Custom String("     "), Custom String("Wait({0});", Value In Array(Player Variable(Event Player, data), 1))), Custom String("{0}{1}", Custom String("\n    "), Custom String("wait({0})", Value In Array(Player Variable(Event Player, data), 1)))), Global Variable(outputLanguage))));
                "Jump"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 1));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Press Button(Event Player, Button(Jump));")), Custom String("{0}{1}", Custom String("     "), Custom String("PressButton(EventPlayer(), Button.Jump);")), Custom String("{0}{1}", Custom String("\n    "), Custom String("eventPlayer.forceButtonPress(Button.JUMP)"))), Global Variable(outputLanguage))));
                "Start holding jump"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 2));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Start Holding Button(Event Player, Button(Jump));")), Custom String("{0}{1}", Custom String("     "), Custom String("StartHoldingButton(EventPlayer(), Button.Jump);")), Custom String("{0}{1}", Custom String("\n    "), Custom String("eventPlayer.startForcingButton(Button.JUMP)"))), Global Variable(outputLanguage))));
                "Stop holding jump"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 3));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Stop Holding Button(Event Player, Button(Jump));")), Custom String("{0}{1}", Custom String("     "), Custom String("StopHoldingButton(EventPlayer(), Button.Jump);")), Custom String("{0}{1}", Custom String("\n    "), Custom String("eventPlayer.stopForcingButton(Button.JUMP)"))), Global Variable(outputLanguage))));
                "Ability 1"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 4));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Press Button(Event Player, Button(Ability 1));")), Custom String("{0}{1}", Custom String("     "), Custom String("PressButton(EventPlayer(), Button.Ability1);")), Custom String("{0}{1}", Custom String("\n    "), Custom String("eventPlayer.forceButtonPress(Button.ABILITY_1)"))), Global Variable(outputLanguage))));
                "Ability 2"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 5));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Press Button(Event Player, Button(Ability 2));")), Custom String("{0}{1}", Custom String("     "), Custom String("PressButton(EventPlayer(), Button.Ability2);")), Custom String("{0}{1}", Custom String("\n    "), Custom String("eventPlayer.forceButtonPress(Button.ABILITY_2)"))), Global Variable(outputLanguage))));
                "Melee"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 6));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Press Button(Event Player, Button(Melee));")), Custom String("{0}{1}", Custom String("     "), Custom String("PressButton(EventPlayer(), Button.Melee);")), Custom String("{0}{1}", Custom String("\n    "), Custom String("eventPlayer.forceButtonPress(Button.MELEE)"))), Global Variable(outputLanguage))));
                "Primary fire"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 7));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Press Button(Event Player, Button(Primary Fire));")), Custom String("{0}{1}", Custom String("     "), Custom String("PressButton(EventPlayer(), Button.PrimaryFire);")), Custom String("{0}{1}", Custom String("\n    "), Custom String("eventPlayer.forceButtonPress(Button.PRIMARY_FIRE)"))), Global Variable(outputLanguage))));
                "Secondary fire"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 8));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Press Button(Event Player, Button(Secondary Fire));")), Custom String("{0}{1}", Custom String("     "), Custom String("PressButton(EventPlayer(), Button.SecondaryFire);")), Custom String("{0}{1}", Custom String("\n    "), Custom String("eventPlayer.forceButtonPress(Button.SECONDARY_FIRE)"))), Global Variable(outputLanguage))));
                "Stop walking"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 9));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Stop Throttle In Direction(Event Player);")), Custom String("{0}{1}", Custom String("     "), Custom String("StopThrottleInDirection();")), Custom String("{0}{1}", Custom String("\n    "), Custom String("eventPlayer.stopThrottleInDirection()"))), Global Variable(outputLanguage))));
                "Walk to destination"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 10));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Call Subroutine(pfWalkToDestination);")), Custom String("{0}{1}", Custom String("     "), Custom String("pfWalkToDestination();")), Custom String("{0}{1}", Custom String("\n    "), Custom String("pfWalkToDestination()"))), Global Variable(outputLanguage))));
                "Look at floor"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 11));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Start Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 89), 1000, To World, None);")), Custom String("{0}{1}", Custom String("     "), Custom String("StartFacing(EventPlayer(), DirectionFromAngles(HorizontalFacingAngleOf(), 89), 1000, Relative.ToWorld, FacingRev.None);")), Custom String("{0}{1}", Custom String("\n    "), Custom String("{0}{1}", Custom String("eventPlayer.startFacing(angleToDirection(eventPlayer.getHorizontalFacingAngle(), 89), 1000, Relativity.TO_WORLD,"), Custom String(" FacingReeval.NONE)")))), Global Variable(outputLanguage))));
                "Look at destination"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 12));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Call Subroutine(pfLookAtDestination);")), Custom String("{0}{1}", Custom String("     "), Custom String("pfLookAtDestination();")), Custom String("{0}{1}", Custom String("\n    "), Custom String("pfLookAtDestination()"))), Global Variable(outputLanguage))));
                "Wait for ability 1"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 13));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Wait(Ability Cooldown(Event Player, Button(Ability 1)), Ignore Condition);")), Custom String("{0}{1}", Custom String("     "), Custom String("Wait(AbilityCooldown(eventPlayer, Button.Ability1));")), Custom String("{0}{1}", Custom String("\n    "), Custom String("wait(eventPlayer.getAbilityCooldown(Button.ABILITY_1))"))), Global Variable(outputLanguage))));
                "Wait for ability 2"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 14));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Wait(Ability Cooldown(Event Player, Button(Ability 2)), Ignore Condition);")), Custom String("{0}{1}", Custom String("     "), Custom String("Wait(AbilityCooldown(eventPlayer, Button.Ability2));")), Custom String("{0}{1}", Custom String("\n    "), Custom String("wait(eventPlayer.getAbilityCooldown(Button.ABILITY_2))"))), Global Variable(outputLanguage))));
                "Wait for secondary fire"
                Else If(Compare(First Of(Player Variable(Event Player, data)), ==, 15));
                    Log To Inspector(Custom String("*/{0} /*", Value In Array(Array(Custom String("{0}{1}", Custom String(" "), Custom String("Wait(Ability Cooldown(Event Player, Button(Secondary Fire)), Ignore Condition);")), Custom String("{0}{1}", Custom String("     "), Custom String("Wait(AbilityCooldown(eventPlayer, Button.SecondaryFire));")), Custom String("{0}{1}", Custom String("\n    "), Custom String("wait(eventPlayer.getAbilityCooldown(Button.SECONDARY_FIRE))"))), Global Variable(outputLanguage))));
                End;
                Wait(0.016, Ignore Condition);
            End;
            "End rule & actions for the c-like languages"
            If(Compare(Global Variable(outputLanguage), ==, 0));
                Log To Inspector(Custom String("*/ } } /*"));
            Else If(Compare(Global Variable(outputLanguage), ==, 1));
                Log To Inspector(Custom String("*/ } /*"));
            End;
            Wait(0.016, Ignore Condition);
        End;
    }
}

// Rule Element Count: 98
rule("Load compression table")
{
    event
    {
        Subroutine;
        LoadCompressionTable;
    }

    // Element Count: 97, Action Count: 1
    actions
    {
        Set Player Variable(Host Player, compressionTable, Custom String("{0}{1}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String(" !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz|~ ¡¢£"), Custom String("¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģ"), Custom String("ĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏƐƑƒƓƔƕƖƗƘƙƚƛƜƝƞƟƠơƢƣ")), Custom String("ƤƥƦƧƨƩƪƫƬƭƮƯưƱƲƳƴƵƶƷƸƹƺƻƼƽƾƿǀǁǂǃǄǅǆǇǈǉǊǋǌǍǎǏǐǑǒǓǔǕǖǗǘǙǚǛǜǝǞǟǠǡǢǣǤǥǦǧǨǩǪǫǬǭǮǯǰǱǲǳǴǵǶǷǸǹǺǻǼǽǾǿȀȁȂȃȄȅȆȇȈȉȊȋȌȍȎȏȐȑȒȓȔȕȖȗȘșȚțȜȝȞȟȠȡȢȣ"), Custom String("ȤȥȦȧȨȩȪȫȬȭȮȯȰȱȲȳȴȵȶȷȸȹȺȻȼȽȾȿɀɁɂɃɄɅɆɇɈɉɊɋɌɍɎɏɐɑɒɓɔɕɖɗɘəɚɛɜɝɞɟɠɡɢɣɤɥɦɧɨɩɪɫɬɭɮɯɰɱɲɳɴɵɶɷɸɹɺɻɼɽɾɿʀʁʂʃʄʅʆʇʈʉʊʋʌʍʎʏʐʑʒʓʔʕʖʗʘʙʚʛʜʝʞʟʠʡʢʣ")), Custom String("ʤʥʦʧʨʩʪʫʬʭʮʯʰʱʲʳʴʵʶʷʸʹʺʻʼʽʾʿˀˁ˂˃˄˅ˆˇˈˉˊˋˌˍˎˏːˑ˒˓˔˕˖˗˘˙˚˛˜˝˞˟ˠˡˢˣˤ˥˦˧˨˩˪˫ˬ˭ˮ˯˰˱˲˳˴˵˶˷˸˹˺˻˼˽˾˿̡̢̛̖̗̘̙̜̝̞̟̠̣̀́̂̃̄̅̆̇̈̉̊̋̌̍̎̏̐̑̒̓̔̕̚"), Custom String("̴̵̶̷̸̧̨̤̥̦̩̪̫̬̭̮̯̰̱̲̳̹̺̻̼͇͈͉͍͎̽̾̿̀́͂̓̈́͆͊͋͌ͅ͏͓͔͕͖͙͚͐͑͒͗͛ͣͤͥͦͧͨͩͪͫͬͭͮͯ͘͜͟͢͝͞͠͡ͰͱͲͳʹ͵Ͷͷ͸͹ͺͻͼͽ;Ϳ΀΁΂΃΄΅Ά·ΈΉΊ΋Ό΍ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ΢Σ")), Custom String("ΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώϏϐϑϒϓϔϕϖϗϘϙϚϛϜϝϞϟϠϡϢϣϤϥϦϧϨϩϪϫϬϭϮϯϰϱϲϳϴϵ϶ϷϸϹϺϻϼϽϾϿЀЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГДЕЖЗИЙКЛМНОПРСТУ"), Custom String("ФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяѐёђѓєѕіїјљњћќѝўџѠѡѢѣѤѥѦѧѨѩѪѫѬѭѮѯѰѱѲѳѴѵѶѷѸѹѺѻѼѽѾѿҀҁ҂҃҄҅҆҇҈҉ҊҋҌҍҎҏҐґҒғҔҕҖҗҘҙҚқҜҝҞҟҠҡҢң")), Custom String("ҤҥҦҧҨҩҪҫҬҭҮүҰұҲҳҴҵҶҷҸҹҺһҼҽҾҿӀӁӂӃӄӅӆӇӈӉӊӋӌӍӎӏӐӑӒӓӔӕӖӗӘәӚӛӜӝӞӟӠӡӢӣӤӥӦӧӨөӪӫӬӭӮӯӰӱӲӳӴӵӶӷӸӹӺӻӼӽӾӿԀԁԂԃԄԅԆԇԈԉԊԋԌԍԎԏԐԑԒԓԔԕԖԗԘԙԚԛԜԝԞԟԠԡԢԣ"), Custom String("ԤԥԦԧԨԩԪԫԬԭԮԯ԰ԱԲԳԴԵԶԷԸԹԺԻԼԽԾԿՀՁՂՃՄՅՆՇՈՉՊՋՌՍՎՏՐՑՒՓՔՕՖ՗՘ՙ՚՛՜՝՞՟ՠաբգդեզէըթժիլխծկհձղճմյնշոչպջռսվտրցւփքօֆևֈ։֊֋֌֍֎֏֐֑֖֛֢֣֚֒֓֔֕֗֘֙֜֝֞֟֠֡")), Custom String("ְֱֲֳִֵֶַָֹֺֻּֽ֤֥֦֧֪֭֮֨֩֫֬֯־ֿ׀ׁׂ׃ׅׄ׆ׇ׈׉׊׋׌׍׎׏אבגדהוזחטיךכלםמןנסעףפץצקרשת׫׬׭׮ׯװױײ׳״׵׶׷׸׹׺׻׼׽׾׿؀؁؂؃؄؅؆؇؈؉؊؋،؍؎؏ؘؙؚؐؑؒؓؔؕؖؗ؛؜؝؞؟ؠءآأ"), Custom String("ؤإئابةتثجحخدذرزسشصضطظعغػؼؽؾؿـفقكلمنهوىيًٌٍَُِّْٕٖٜٟٓٔٗ٘ٙٚٛٝٞ٠١٢٣٤٥٦٧٨٩٪٫٬٭ٮٯٰٱٲٳٴٵٶٷٸٹٺٻټٽپٿڀځڂڃڄڅچڇڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙښڛڜڝڞڟڠڡڢڣ")), Custom String("ڤڥڦڧڨکڪګڬڭڮگڰڱڲڳڴڵڶڷڸڹںڻڼڽھڿۀہۂۃۄۅۆۇۈۉۊۋیۍێۏېۑےۓ۔ەۖۗۘۙۚۛۜ۝۞ۣ۟۠ۡۢۤۥۦۧۨ۩۪ۭ۫۬ۮۯ۰۱۲۳۴۵۶۷۸۹ۺۻۼ۽۾ۿ܀܁܂܃܄܅܆܇܈܉܊܋܌܍܎܏ܐܑܒܓܔܕܖܗܘܙܚܛܜܝܞܟܠܡܢܣ"), Custom String("ܤܥܦܧܨܩܪܫܬܭܮܯܱܴܷܸܹܻܼܾ݂݄݆݈ܰܲܳܵܶܺܽܿ݀݁݃݅݇݉݊݋݌ݍݎݏݐݑݒݓݔݕݖݗݘݙݚݛݜݝݞݟݠݡݢݣݤݥݦݧݨݩݪݫݬݭݮݯݰݱݲݳݴݵݶݷݸݹݺݻݼݽݾݿހށނރބޅކއވމފދތލގޏސޑޒޓޔޕޖޗޘޙޚޛޜޝޞޟޠޡޢޣ")), Custom String("ޤޥަާިީުޫެޭޮޯްޱ޲޳޴޵޶޷޸޹޺޻޼޽޾޿߀߁߂߃߄߅߆߇߈߉ߊߋߌߍߎߏߐߑߒߓߔߕߖߗߘߙߚߛߜߝߞߟߠߡߢߣߤߥߦߧߨߩߪ߲߫߬߭߮߯߰߱߳ߴߵ߶߷߸߹ߺ߻߼߽߾߿ࠀࠁࠂࠃࠄࠅࠆࠇࠈࠉࠊࠋࠌࠍࠎࠏࠐࠑࠒࠓࠔࠕࠖࠗ࠘࠙ࠚࠛࠜࠝࠞࠟࠠࠡࠢࠣ"), Custom String("ࠤࠥࠦࠧࠨࠩࠪࠫࠬ࠭࠮࠯࠰࠱࠲࠳࠴࠵࠶࠷࠸࠹࠺࠻࠼࠽࠾࠿ࡀࡁࡂࡃࡄࡅࡆࡇࡈࡉࡊࡋࡌࡍࡎࡏࡐࡑࡒࡓࡔࡕࡖࡗࡘ࡙࡚࡛࡜࡝࡞࡟ࡠࡡࡢࡣࡤࡥࡦࡧࡨࡩࡪ࡫࡬࡭࡮࡯ࡰࡱࡲࡳࡴࡵࡶࡷࡸࡹࡺࡻࡼࡽࡾࡿࢀࢁࢂࢃࢄࢅࢆࢇ࢈ࢉࢊࢋࢌࢍࢎ࢏࢐࢑࢒࢓࢔࢕࢖࢙࢚࢛ࢗ࢘࢜࢝࢞࢟ࢠࢡࢢࢣ")), Custom String("ࢤࢥࢦࢧࢨࢩࢪࢫࢬࢭࢮࢯࢰࢱࢲࢳࢴࢵࢶࢷࢸࢹࢺࢻࢼࢽࢾࢿࣀࣁࣂࣃࣄࣅࣆࣇࣈࣉ࣏࣐࣑࣒࣓࣊࣋࣌࣍࣎ࣔࣕࣖࣗࣘࣙࣚࣛࣜࣝࣞࣟ࣠࣡࣢ࣰࣱࣲࣣࣦࣩ࣭࣮࣯ࣶࣹࣺࣤࣥࣧࣨ࣪࣫࣬ࣳࣴࣵࣷࣸࣻࣼࣽࣾࣿऀँंःऄअआइईउऊऋऌऍऎएऐऑऒओऔकखगघङचछजझञटठडढण"), Custom String("तथदधनऩपफबभमयरऱलळऴवशषसहऺऻ़ऽािीुूृॄॅॆेैॉॊोौ्ॎॏॐ॒॑॓॔ॕॖॗक़ख़ग़ज़ड़ढ़फ़य़ॠॡॢॣ।॥०१२३४५६७८९॰ॱॲॳॴॵॶॷॸॹॺॻॼॽॾॿঀঁংঃ঄অআইঈউঊঋঌ঍঎এঐ঑঒ওঔকখগঘঙচছজঝঞটঠডঢণ")), Custom String("তথদধন঩পফবভমযর঱ল঳঴঵শষসহ঺঻়ঽািীুূৃৄ৅৆েৈ৉৊োৌ্ৎ৏৐৑৒৓৔৕৖ৗ৘৙৚৛ড়ঢ়৞য়ৠৡৢৣ৤৥০১২৩৪৫৬৭৮৯ৰৱ৲৳৴৵৶৷৸৹৺৻ৼ৽৾৿਀ਁਂਃ਄ਅਆਇਈਉਊ਋਌਍਎ਏਐ਑਒ਓਔਕਖਗਘਙਚਛਜਝਞਟਠਡਢਣ"), Custom String("ਤਥਦਧਨ਩ਪਫਬਭਮਯਰ਱ਲਲ਼਴ਵਸ਼਷ਸਹ਺਻਼਽ਾਿੀੁੂ੃੄੅੆ੇੈ੉੊ੋੌ੍੎੏੐ੑ੒੓੔੕੖੗੘ਖ਼ਗ਼ਜ਼ੜ੝ਫ਼੟੠੡੢੣੤੥੦੧੨੩੪੫੬੭੮੯ੰੱੲੳੴੵ੶੷੸੹੺੻੼੽੾੿઀ઁંઃ઄અઆઇઈઉઊઋઌઍ઎એઐઑ઒ઓઔકખગઘઙચછજઝઞટઠડઢણ")), Custom String("તથદધન઩પફબભમયર઱લળ઴વશષસહ઺઻઼ઽાિીુૂૃૄૅ૆ેૈૉ૊ોૌ્૎૏ૐ૑૒૓૔૕૖૗૘૙૚૛૜૝૞૟ૠૡૢૣ૤૥૦૧૨૩૪૫૬૭૮૯૰૱૲૳૴૵૶૷૸ૹૺૻૼ૽૾૿଀ଁଂଃ଄ଅଆଇଈଉଊଋଌ଍଎ଏଐ଑଒ଓଔକଖଗଘଙଚଛଜଝଞଟଠଡଢଣ"), Custom String("ତଥଦଧନ଩ପଫବଭମଯର଱ଲଳ଴ଵଶଷସହ଺଻଼ଽାିୀୁୂୃୄ୅୆େୈ୉୊ୋୌ୍୎୏୐୑୒୓୔୕ୖୗ୘୙୚୛ଡ଼ଢ଼୞ୟୠୡୢୣ୤୥୦୧୨୩୪୫୬୭୮୯୰ୱ୲୳୴୵୶୷୸୹୺୻୼୽୾୿஀஁ஂஃ஄அஆஇஈஉஊ஋஌஍எஏஐ஑ஒஓஔக஖஗஘ஙச஛ஜ஝ஞட஠஡஢ண")), Custom String("த஥஦஧நனப஫஬஭மயரறலளழவஶஷஸஹ஺஻஼஽ாிீுூ௃௄௅ெேை௉ொோௌ்௎௏ௐ௑௒௓௔௕௖ௗ௘௙௚௛௜௝௞௟௠௡௢௣௤௥௦௧௨௩௪௫௬௭௮௯௰௱௲௳௴௵௶௷௸௹௺௻௼௽௾௿ఀఁంఃఄఅఆఇఈఉఊఋఌ఍ఎఏఐ఑ఒఓఔకఖగఘఙచఛజఝఞటఠడఢణ"), Custom String("తథదధన఩పఫబభమయరఱలళఴవశషసహ఺఻఼ఽాిీుూృౄ౅ెేై౉ొోౌ్౎౏౐౑౒౓౔ౕౖ౗ౘౙౚ౛౜ౝ౞౟ౠౡౢౣ౤౥౦౧౨౩౪౫౬౭౮౯౰౱౲౳౴౵౶౷౸౹౺౻౼౽౾౿ಀಁಂಃ಄ಅಆಇಈಉಊಋಌ಍ಎಏಐ಑ಒಓಔಕಖಗಘಙಚಛಜಝಞಟಠಡಢಣ")), Custom String("ತಥದಧನ಩ಪಫಬಭಮಯರಱಲಳ಴ವಶಷಸಹ಺಻಼ಽಾಿೀುೂೃೄ೅ೆೇೈ೉ೊೋೌ್೎೏೐೑೒೓೔ೕೖ೗೘೙೚೛೜ೝೞ೟ೠೡೢೣ೤೥೦೧೨೩೪೫೬೭೮೯೰ೱೲೳ೴೵೶೷೸೹೺೻೼೽೾೿ഀഁംഃഄഅആഇഈഉഊഋഌ഍എഏഐ഑ഒഓഔകഖഗഘങചഛജഝഞടഠഡഢണ"), Custom String("തഥദധനഩപഫബഭമയരറലളഴവശഷസഹഺ഻഼ഽാിീുൂൃൄ൅െേൈ൉ൊോൌ്ൎ൏൐൑൒൓ൔൕൖൗ൘൙൚൛൜൝൞ൟൠൡൢൣ൤൥൦൧൨൩൪൫൬൭൮൯൰൱൲൳൴൵൶൷൸൹ൺൻർൽൾൿ඀ඁංඃ඄අආඇඈඉඊඋඌඍඎඏඐඑඒඓඔඕඖ඗඘඙කඛගඝඞඟචඡජඣ")), Custom String("ඤඥඦටඨඩඪණඬතථදධන඲ඳපඵබභමඹයර඼ල඾඿වශෂසහළෆ෇෈෉්෋෌෍෎ාැෑිීු෕ූ෗ෘෙේෛොෝෞෟ෠෡෢෣෤෥෦෧෨෩෪෫෬෭෮෯෰෱ෲෳ෴෵෶෷෸෹෺෻෼෽෾෿฀กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยร"), Custom String("ฤลฦวศษสหฬอฮฯะัาำิีึืฺุู฻฼฽฾฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛๜๝๞๟๠๡๢๣๤๥๦๧๨๩๪๫๬๭๮๯๰๱๲๳๴๵๶๷๸๹๺๻๼๽๾๿຀ກຂ຃ຄ຅ຆງຈຉຊ຋ຌຍຎຏຐຑຒຓດຕຖທຘນບປຜຝພຟຠມຢຣ")), Custom String("຤ລ຦ວຨຩສຫຬອຮຯະັາຳິີຶື຺ຸູົຼຽ຾຿ເແໂໃໄ໅ໆ໇່້໊໋໌ໍ໎໏໐໑໒໓໔໕໖໗໘໙໚໛ໜໝໞໟ໠໡໢໣໤໥໦໧໨໩໪໫໬໭໮໯໰໱໲໳໴໵໶໷໸໹໺໻໼໽໾໿ༀ༁༂༃༄༅༆༇༈༉༊་༌།༎༏༐༑༒༓༔༕༖༗༘༙༚༛༜༝༞༟༠༡༢༣"), Custom String("༤༥༦༧༨༩༪༫༬༭༮༯༰༱༲༳༴༵༶༷༸༹༺༻༼༽༾༿ཀཁགགྷངཅཆཇ཈ཉཊཋཌཌྷཎཏཐདདྷནཔཕབབྷམཙཚཛཛྷཝཞཟའཡརལཤཥསཧཨཀྵཪཫཬ཭཮཯཰ཱཱཱིིུུྲྀཷླྀཹེཻོཽཾཿ྄ཱྀྀྂྃ྅྆྇ྈྉྊྋྌྍྎྏྐྑྒྒྷྔྕྖྗ྘ྙྚྛྜྜྷྞྟྠྡྡྷྣ")), Custom String("ྤྥྦྦྷྨྩྪྫྫྷྭྮྯྰྱྲླྴྵྶྷྸྐྵྺྻྼ྽྾྿࿀࿁࿂࿃࿄࿅࿆࿇࿈࿉࿊࿋࿌࿍࿎࿏࿐࿑࿒࿓࿔࿕࿖࿗࿘࿙࿚࿛࿜࿝࿞࿟࿠࿡࿢࿣࿤࿥࿦࿧࿨࿩࿪࿫࿬࿭࿮࿯࿰࿱࿲࿳࿴࿵࿶࿷࿸࿹࿺࿻࿼࿽࿾࿿ကခဂဃငစဆဇဈဉညဋဌဍဎဏတထဒဓနပဖဗဘမယရလဝသဟဠအဢဣ")));
    }
}

// Rule Element Count: 44
rule("LogCurrentStub")
{
    event
    {
        Subroutine;
        LogCurrentStub;
    }

    // Element Count: 43, Action Count: 1
    actions
    {
        Log To Inspector(Custom String("{0}{1}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("*/ "), If-Then-Else(Not(Global Variable(outputLanguage)), Custom String("Custom String("), Custom String("")), Custom String("\"")), Player Variable(Event Player, printCompressedDataCurrentString), Custom String("\"")), If-Then-Else(Not(Global Variable(outputLanguage)), Custom String(")"), Custom String("")), If-Then-Else(Global Variable(isFinalItem), Custom String(""), Custom String(", "))), Custom String(" /*")));
    }
}

// Rule Element Count: 120
rule("Print compressed nodes")
{
    event
    {
        Subroutine;
        PrintCompressedNodes;
    }

    // Element Count: 119, Action Count: 10
    // Largest Action Index: 2 using 68 Elements
    actions
    {
        Set Player Variable(Event Player, printCompressedDataCurrentString, Custom String(""));
        For Player Variable(Event Player, printCompressedDataIndex, 0, Count Of(Global Variable(Nodes_Node_UniqueID)), 1);
            Set Player Variable(Event Player, printCompressedDataCurrentString, Custom String("{0}{1}", Player Variable(Event Player, printCompressedDataCurrentString), Custom String("{0}{1}{2}", Char In String(Player Variable(Event Player, compressionTable), Divide(Add(Multiply(X Component Of(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, printCompressedDataIndex))), 10), 4096), 2)), Char In String(Player Variable(Event Player, compressionTable), Divide(Add(Multiply(Y Component Of(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, printCompressedDataIndex))), 10), 4096), 2)), Char In String(Player Variable(Event Player, compressionTable), Divide(Add(Multiply(Z Component Of(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, printCompressedDataIndex))), 10), 4096), 2)))));
            If(Or(And(Player Variable(Event Player, printCompressedDataIndex), Compare(Modulo(Player Variable(Event Player, printCompressedDataIndex), 42), ==, 0)), Compare(Player Variable(Event Player, printCompressedDataIndex), ==, Subtract(Count Of(Global Variable(Nodes_Node_UniqueID)), 1))));
                Set Global Variable(isFinalItem, Compare(Player Variable(Event Player, printCompressedDataIndex), ==, Subtract(Count Of(Global Variable(Nodes_Node_UniqueID)), 1)));
                Call Subroutine(LogCurrentStub);
                Set Player Variable(Event Player, printCompressedDataCurrentString, Custom String(""));
            End;
            Wait(0.016, Ignore Condition);
        End;
    }
}

// Rule Element Count: 30
rule("Add to compressed neighbor data")
{
    event
    {
        Subroutine;
        AddToCompressedNeighborData;
    }

    // Element Count: 29, Action Count: 8
    // Largest Action Index: 0 using 12 Elements
    actions
    {
        If(Or(Not(Global Variable(value)), Compare(String Length(Player Variable(Event Player, printCompressedDataCurrentString)), >=, 128)));
            Set Global Variable(isFinalItem, Global Variable(isFinalItem_0));
            Call Subroutine(LogCurrentStub);
            Set Player Variable(Event Player, printCompressedDataCurrentString, Global Variable(value));
        Else;
            Set Player Variable(Event Player, printCompressedDataCurrentString, Custom String("{0}{1}", Player Variable(Event Player, printCompressedDataCurrentString), Global Variable(value)));
        End;
        Wait(0.016, Ignore Condition);
    }
}

// Rule Element Count: 186
rule("Print compressed neighbors")
{
    event
    {
        Subroutine;
        PrintCompressedNeighbors;
    }

    // Element Count: 185, Action Count: 24
    // Largest Action Index: 7 using 51 Elements
    actions
    {
        Set Player Variable(Event Player, printCompressedDataCurrentString, Custom String(""));
        "For each node"
        For Global Variable(n, 0, Count Of(Global Variable(Nodes_Node_UniqueID)), 1);
            "Get the segments connected to the current node."
            Set Global Variable(connected, Filtered Array(Mapped Array(Global Variable(Segments_ID), Current Array Index), Or(Compare(Value In Array(Global Variable(Segments_Node1), Current Array Element), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(n))), Compare(Value In Array(Global Variable(Segments_Node2), Current Array Element), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(n))))));
            "For each connection"
            For Global Variable(s, 0, Count Of(Global Variable(connected)), 1);
                "Add the neighbor ID to the compressed data."
                Set Global Variable(value, Char In String(Player Variable(Event Player, compressionTable), Add(1, Index Of Array Value(Global Variable(Nodes_Node_UniqueID), If-Then-Else(Compare(Value In Array(Global Variable(Segments_Node1), Value In Array(Global Variable(connected), Global Variable(s))), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(n))), Value In Array(Global Variable(Segments_Node2), Value In Array(Global Variable(connected), Global Variable(s))), Value In Array(Global Variable(Segments_Node1), Value In Array(Global Variable(connected), Global Variable(s))))))));
                Set Global Variable(isFinalItem_0, False);
                Call Subroutine(AddToCompressedNeighborData);
                "Get attributes"
                Set Global Variable(attributes, Mapped Array(Filtered Array(Mapped Array(Global Variable(Attributes_Value), Current Array Index), And(Compare(Value In Array(Global Variable(Nodes_Node_UniqueID), Global Variable(n)), ==, Value In Array(Global Variable(Attributes_Node2), Current Array Element)), Or(Compare(Value In Array(Global Variable(Attributes_Node1), Current Array Element), ==, Value In Array(Global Variable(Segments_Node1), Value In Array(Global Variable(connected), Global Variable(s)))), Compare(Value In Array(Global Variable(Attributes_Node1), Current Array Element), ==, Value In Array(Global Variable(Segments_Node2), Value In Array(Global Variable(connected), Global Variable(s))))))), Value In Array(Global Variable(Attributes_Value), Current Array Element)));
                For Global Variable(a, 0, Count Of(Global Variable(attributes)), 1);
                    Set Global Variable(value, Char In String(Player Variable(Event Player, compressionTable), Add(1, Value In Array(Global Variable(attributes), Global Variable(a)))));
                    Set Global Variable(isFinalItem_0, False);
                    Call Subroutine(AddToCompressedNeighborData);
                End;
                "End segment"
                Set Global Variable(value, Char In String(Player Variable(Event Player, compressionTable), 0));
                Set Global Variable(isFinalItem_0, False);
                Call Subroutine(AddToCompressedNeighborData);
            End;
            "End node"
            Set Global Variable(value, Char In String(Player Variable(Event Player, compressionTable), 0));
            Set Global Variable(isFinalItem_0, Compare(Global Variable(n), ==, Subtract(Count Of(Global Variable(Nodes_Node_UniqueID)), 1)));
            Call Subroutine(AddToCompressedNeighborData);
        End;
        Set Global Variable(value, Null);
        Set Global Variable(isFinalItem_0, True);
        Call Subroutine(AddToCompressedNeighborData);
    }
}

// Rule Element Count: 349
rule("Subroutine: Export Neighbors Pattern")
{
    event
    {
        Subroutine;
        ExportNeighborsPattern;
    }

    // Element Count: 348, Action Count: 28
    // Largest Action Index: 18 using 96 Elements
    actions
    {
        Disable Inspector Recording;
        "For each attribute"
        For Player Variable(Event Player, n, 0, Count Of(Global Variable(Nodes_Node_UniqueID)), 1);
            "Get connected segments."
            Set Player Variable(Event Player, connected, Filtered Array(Mapped Array(Global Variable(Segments_ID), Current Array Index), Or(Compare(Value In Array(Global Variable(Segments_Node1), Current Array Element), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Player Variable(Event Player, n))), Compare(Value In Array(Global Variable(Segments_Node2), Current Array Element), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Player Variable(Event Player, n))))));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 38, Custom String(""));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 39, 0);
            While(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 39), <, Count Of(Player Variable(Event Player, connected))));
                "Find the attributes from node A to node B.
The core pathfinding code travels from the goal to the player's position,
so attr.Node1 and attr.Node2 are flipped here."
                Set Player Variable(Event Player, attributes_1, Mapped Array(Filtered Array(Mapped Array(Global Variable(Attributes_Value), Current Array Index), And(Compare(Value In Array(Global Variable(Nodes_Node_UniqueID), Player Variable(Event Player, n)), ==, Value In Array(Global Variable(Attributes_Node2), Current Array Element)), Or(Compare(Value In Array(Global Variable(Attributes_Node1), Current Array Element), ==, Value In Array(Global Variable(Segments_Node1), Value In Array(Player Variable(Event Player, connected), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 39)))), Compare(Value In Array(Global Variable(Attributes_Node1), Current Array Element), ==, Value In Array(Global Variable(Segments_Node2), Value In Array(Player Variable(Event Player, connected), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 39))))))), Value In Array(Global Variable(Attributes_Value), Current Array Element)));
                "If there are no attributes, use the empty array term."
                Set Player Variable(Event Player, attrString, Player Variable(Event Player, emptyArray));
                If(Compare(Count Of(Player Variable(Event Player, attributes_1)), !=, 0));
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 40, Custom String(""));
                    Set Player Variable At Index(Event Player, _extendedPlayerCollection, 41, 0);
                    While(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 41), <, Count Of(Player Variable(Event Player, attributes_1))));
                        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 40, Custom String("{0}{1}{2}", Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 40), Value In Array(Player Variable(Event Player, attributes_1), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 41)), If-Then-Else(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 41), !=, Subtract(Count Of(Player Variable(Event Player, attributes_1)), 1)), Custom String(","), Custom String(""))));
                        Wait(0.016, Ignore Condition);
                        Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 41, Add, 1);
                    End;
                    Set Player Variable(Event Player, attrString, Custom String("{0}{1}{2}", Player Variable(Event Player, beginArray), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 40), Player Variable(Event Player, endArray)));
                End;
                Set Player Variable At Index(Event Player, _extendedPlayerCollection, 38, Custom String("{0}{1}{2}", Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 38), Custom String("{0}{1}", Custom String("{0}{1}, {2}", Player Variable(Event Player, beginArray), Index Of Array Value(Global Variable(Nodes_Node_UniqueID), If-Then-Else(Compare(Value In Array(Global Variable(Segments_Node1), Value In Array(Player Variable(Event Player, connected), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 39))), ==, Value In Array(Global Variable(Nodes_Node_UniqueID), Player Variable(Event Player, n))), Value In Array(Global Variable(Segments_Node2), Value In Array(Player Variable(Event Player, connected), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 39))), Value In Array(Global Variable(Segments_Node1), Value In Array(Player Variable(Event Player, connected), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 39))))), Player Variable(Event Player, attrString)), Custom String("{0}", Player Variable(Event Player, endArray))), If-Then-Else(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 39), !=, Subtract(Count Of(Player Variable(Event Player, connected)), 1)), Custom String(","), Custom String(""))));
                Wait(0.016, Ignore Condition);
                Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 39, Add, 1);
            End;
            Enable Inspector Recording;
            Log To Inspector(Custom String("{0}{1}", Custom String("*/ {0}{1}{2}", Player Variable(Event Player, beginArray), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 38), Player Variable(Event Player, endArray)), Custom String("{0} /*", If-Then-Else(Compare(Player Variable(Event Player, n), ==, Subtract(Count Of(Global Variable(Nodes_Node_UniqueID)), 1)), Custom String(""), Custom String(",")))));
            Disable Inspector Recording;
            Wait(0.03, Ignore Condition);
        End;
        Enable Inspector Recording;
    }
}

// Rule Element Count: 645
rule("Subroutine: Generate map code.")
{
    event
    {
        Subroutine;
        Export;
    }

    // Element Count: 644, Action Count: 130
    // Largest Action Index: 74 using 50 Elements
    actions
    {
        Set Global Variable(message, Custom String("Exporting, please wait..."));
        Call Subroutine(StartLongRunningTask);
        "Enable inspector so we can log the exported code to it."
        Call Subroutine(EnableInspector);
        "Export introduction."
        Log To Inspector(Custom String("Place the following text into your {0} script:{1}\n/*", Value In Array(Array(Custom String("workshop"), Custom String("ostw"), Custom String("overpy")), Global Variable(outputLanguage)), Custom String("\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")));
        "1. Export the core pathfinding code."
        If(Value In Array(Global Variable(buildToggles), 2));
            Call Subroutine(ExportCore);
        End;
        "2. Export the rules."
        If(Value In Array(Global Variable(buildToggles), 1));
            Call Subroutine(ExportRules);
        End;
        "3. Export the map."
        If(First Of(Global Variable(buildToggles)));
            "Export map to workshop."
            If(Compare(Global Variable(outputLanguage), ==, 0));
                "Compressed"
                If(Value In Array(Global Variable(buildToggles), 3));
                    "Attributes rule"
                    Log To Inspector(Custom String("*/ rule(\"【Map】{0} ({1})\") { event { Ongoing - Global; } /*", Current Map, Custom String("compressed")));
                    "Conditions"
                    Log To Inspector(Custom String("*/ conditions { /*"));
                    "Make sure this is the correct map"
                    Log To Inspector(Custom String("*/     Current Map == Map({0}); /*", Current Map));
                    "Start actions"
                    Log To Inspector(Custom String("*/ } actions { /*"));
                    "Set pfDecompress"
                    Log To Inspector(Custom String("*/     global.pfDecompress = Array(Array( /*"));
                    Call Subroutine(LoadCompressionTable);
                    "Export nodes"
                    Call Subroutine(PrintCompressedNodes);
                    "End nodes data array, start neighbors data array"
                    Log To Inspector(Custom String("*/ ), Array( /*"));
                    "Print compressed neighbors."
                    Call Subroutine(PrintCompressedNeighbors);
                    Set Player Variable(Host Player, compressionTable, Null);
                    "End array"
                    Log To Inspector(Custom String("*/ )); /*"));
                    "End action & rule block"
                    Log To Inspector(Custom String("*/ } } /*"));
                "Uncompressed"
                Else;
                    "Attributes rule"
                    Log To Inspector(Custom String("*/ rule(\"【Map】{0} ({1})\") { event { Ongoing - Global; } /*", Current Map, Custom String("nodes")));
                    "Conditions"
                    Log To Inspector(Custom String("*/ conditions { /*"));
                    "Make sure this is the correct map"
                    Log To Inspector(Custom String("*/     Current Map == Map({0}); /*", Current Map));
                    "Start actions"
                    Log To Inspector(Custom String("*/ } actions { /*"));
                    "Set loadedMap_segments"
                    Log To Inspector(Custom String("*/     global.pfLoadedMap_nodes = Array( /*"));
                    "For each attribute"
                    For Player Variable(Event Player, exportArrayNumA, 0, Count Of(Global Variable(Nodes_Node_UniqueID)), 10);
                        Set Player Variable(Event Player, exportArrayStub, Custom String(""));
                        For Player Variable(Event Player, exportArrayNumB, Player Variable(Event Player, exportArrayNumA), Min(Add(Player Variable(Event Player, exportArrayNumA), 10), Count Of(Global Variable(Nodes_Node_UniqueID))), 1);
                            Set Player Variable(Event Player, exportArrayStub, Custom String("{0}{1}", Player Variable(Event Player, exportArrayStub), Custom String("Vector{0}{1}", Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, exportArrayNumB)), If-Then-Else(Compare(Player Variable(Event Player, exportArrayNumB), ==, Subtract(Count Of(Global Variable(Nodes_Node_UniqueID)), 1)), Custom String(""), Custom String(", ")))));
                        End;
                        Log To Inspector(Custom String("*/{0}/*", Player Variable(Event Player, exportArrayStub)));
                        Wait(0.016, Ignore Condition);
                    End;
                    "End pathfinder segments"
                    Log To Inspector(Custom String("*/ ); /*"));
                    "End action & rule block"
                    Log To Inspector(Custom String("*/ } } /*"));
                    "Attributes rule"
                    Log To Inspector(Custom String("*/ rule(\"【Map】{0} ({1})\") { event { Ongoing - Global; } /*", Current Map, Custom String("neighbors")));
                    "Conditions"
                    Log To Inspector(Custom String("*/ conditions { /*"));
                    "Make sure this is the correct map"
                    Log To Inspector(Custom String("*/     Current Map == Map({0}); /*", Current Map));
                    "Start actions"
                    Log To Inspector(Custom String("*/ } actions { /*"));
                    "Set loadedMap_neighors"
                    Log To Inspector(Custom String("*/     global.pfLoadedMap_neighbors = Array( /*"));
                    Set Player Variable(Event Player, beginArray, Custom String("Array("));
                    Set Player Variable(Event Player, endArray, Custom String(")"));
                    Set Player Variable(Event Player, emptyArray, Custom String("Empty Array"));
                    Call Subroutine(ExportNeighborsPattern);
                    "End array"
                    Log To Inspector(Custom String("*/ ); /*"));
                    "End action & rule block"
                    Log To Inspector(Custom String("*/ } } /*"));
                End;
            "Export map to ostw."
            Else If(Compare(Global Variable(outputLanguage), ==, 1));
                "This exported code should be placed in the ostw file."
                If(Value In Array(Global Variable(buildToggles), 3));
                    Log To Inspector(Custom String("{0}{1}{2}", Custom String("*/"), Custom String("{0}{1}{2}", Custom String("\nrule: \"【Map】{0} ({1})\"\n", Current Map, Custom String("compressed")), Custom String("if (CurrentMap() == Map.{0}) {\n", Value In Array(Player Variable(Host Player, langMaps_ostwName), Index Of Array Value(Player Variable(Host Player, langMaps_map), Current Map))), Custom String("    {0} = import(\"{1}.jsonc\"){2};\n}", Custom String("pfDecompress"), Current Map, Custom String(""))), Custom String("/*")));
                Else;
                    Log To Inspector(Custom String("{0}{1}{2}", Custom String("*/"), Custom String("{0}{1}{2}", Custom String("\nrule: \"【Map】{0} ({1})\"\n", Current Map, Custom String("nodes")), Custom String("if (CurrentMap() == Map.{0}) {\n", Value In Array(Player Variable(Host Player, langMaps_ostwName), Index Of Array Value(Player Variable(Host Player, langMaps_map), Current Map))), Custom String("    {0} = import(\"{1}.jsonc\"){2};\n}", Custom String("pfLoadedMap.nodes"), Current Map, Custom String(".nodes"))), Custom String("/*")));
                    Log To Inspector(Custom String("{0}{1}{2}", Custom String("*/"), Custom String("{0}{1}{2}", Custom String("\nrule: \"【Map】{0} ({1})\"\n", Current Map, Custom String("neighbors")), Custom String("if (CurrentMap() == Map.{0}) {\n", Value In Array(Player Variable(Host Player, langMaps_ostwName), Index Of Array Value(Player Variable(Host Player, langMaps_map), Current Map))), Custom String("    {0} = import(\"{1}.jsonc\"){2};\n}", Custom String("pfLoadedMap.neighbors"), Current Map, Custom String(".neighbors"))), Custom String("/*")));
                End;
                "Introduction message"
                Log To Inspector(Custom String("{0}{1}{2}", Custom String("Place the following text into a file named \"{0}.jsonc\":", Current Map), Custom String("\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯"), Custom String("\n/*")));
                If(Value In Array(Global Variable(buildToggles), 3));
                    Log To Inspector(Custom String("*/ [[ /*"));
                    Call Subroutine(LoadCompressionTable);
                    Call Subroutine(PrintCompressedNodes);
                    Log To Inspector(Custom String("*/ ], [ /*"));
                    Call Subroutine(PrintCompressedNeighbors);
                    Set Player Variable(Host Player, compressionTable, Null);
                    Log To Inspector(Custom String("{0}{1}", Custom String("*/ ]]"), Custom String("\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")));
                Else;
                    "Export Ostw nodes"
                    Log To Inspector(Custom String("*/ { \"nodes\": [ /*"));
                    For Player Variable(Event Player, exportArrayNumA, 0, Count Of(Global Variable(Nodes_Node_UniqueID)), 10);
                        Set Player Variable(Event Player, exportArrayStub, Custom String(""));
                        For Player Variable(Event Player, exportArrayNumB, Player Variable(Event Player, exportArrayNumA), Min(Add(Player Variable(Event Player, exportArrayNumA), 10), Count Of(Global Variable(Nodes_Node_UniqueID))), 1);
                            Set Player Variable(Event Player, exportArrayStub, Custom String("{0}{1}", Player Variable(Event Player, exportArrayStub), Custom String("{0}{1}", Custom String("{\"x\":{0}, \"y\":{1}, \"z\":{2}", X Component Of(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, exportArrayNumB))), Y Component Of(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, exportArrayNumB))), Z Component Of(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, exportArrayNumB)))), Custom String("}{0}", If-Then-Else(Compare(Player Variable(Event Player, exportArrayNumB), ==, Subtract(Count Of(Global Variable(Nodes_Node_UniqueID)), 1)), Custom String(""), Custom String(", "))))));
                        End;
                        Log To Inspector(Custom String("*/{0}/*", Player Variable(Event Player, exportArrayStub)));
                        Wait(0.016, Ignore Condition);
                    End;
                    "Export Ostw segments"
                    Log To Inspector(Custom String("*/ ], \"neighbors\": [ /*"));
                    Set Player Variable(Event Player, beginArray, Custom String("["));
                    Set Player Variable(Event Player, endArray, Custom String("]"));
                    Set Player Variable(Event Player, emptyArray, Custom String("[]"));
                    Call Subroutine(ExportNeighborsPattern);
                    "Conclude JSON"
                    Log To Inspector(Custom String("{0}{1}", Custom String("*/ ] }"), Custom String("\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")));
                End;
            "Export map to overpy."
            Else If(Compare(Global Variable(outputLanguage), ==, 2));
                If(Value In Array(Global Variable(buildToggles), 3));
                    Log To Inspector(Custom String("*/\nrule \"【Map】{0} (compressed)\":
    @Condition getCurrentMap() == Map.{1}
    pfDecompress = [[", Current Map, Value In Array(Player Variable(Host Player, langMaps_overpyName), Index Of Array Value(Player Variable(Host Player, langMaps_map), Current Map))));
                    Call Subroutine(LoadCompressionTable);
                    Call Subroutine(PrintCompressedNodes);
                    Log To Inspector(Custom String("*/ ], [ /*"));
                    Call Subroutine(PrintCompressedNeighbors);
                    Set Player Variable(Host Player, compressionTable, Null);
                    Log To Inspector(Custom String("{0}{1}", Custom String("*/ ]]"), Custom String("\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")));
                    Skip(24);
                End;
                "This exported code should be placed in the overpy file."
                Log To Inspector(Custom String("*/\n#!define loadMap() __script__(\"{0}.js\")\nloadMap(){1}", Current Map, Custom String("\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")));
                "Introduction message"
                Log To Inspector(Custom String("{0}{1}{2}", Custom String("Place the following text into a file named \"{0}.js\":", Current Map), Custom String("\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯"), Custom String("\n/*")));
                "Export Overpy nodes"
                Log To Inspector(Custom String("*/ const nodes = [ /*"));
                For Player Variable(Event Player, exportArrayNumA, 0, Count Of(Global Variable(Nodes_Node_UniqueID)), 10);
                    Set Player Variable(Event Player, exportArrayStub, Custom String(""));
                    For Player Variable(Event Player, exportArrayNumB, Player Variable(Event Player, exportArrayNumA), Min(Add(Player Variable(Event Player, exportArrayNumA), 10), Count Of(Global Variable(Nodes_Node_UniqueID))), 1);
                        Set Player Variable(Event Player, exportArrayStub, Custom String("{0}{1}", Player Variable(Event Player, exportArrayStub), Custom String("{0}{1}", Custom String("vect({0}, {1}, {2}", X Component Of(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, exportArrayNumB))), Y Component Of(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, exportArrayNumB))), Z Component Of(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, exportArrayNumB)))), Custom String("){0}", If-Then-Else(Compare(Player Variable(Event Player, exportArrayNumB), ==, Subtract(Count Of(Global Variable(Nodes_Node_UniqueID)), 1)), Custom String(""), Custom String(","))))));
                    End;
                    Log To Inspector(Custom String("*/{0}/*", Player Variable(Event Player, exportArrayStub)));
                    Wait(0.016, Ignore Condition);
                End;
                Log To Inspector(Custom String("*/ ]; /*"));
                "Export Overpy neighors"
                Log To Inspector(Custom String("*/ const neighbors = [ /*"));
                Set Player Variable(Event Player, beginArray, Custom String("["));
                Set Player Variable(Event Player, endArray, Custom String("]"));
                Set Player Variable(Event Player, emptyArray, Custom String("[]"));
                Call Subroutine(ExportNeighborsPattern);
                Log To Inspector(Custom String("*/ ]; /*"));
                "Javascript -> overpy rules"
                Log To Inspector(Custom String("*/ function load(name, array) { return ( /*"));
                Log To Inspector(Custom String("*/ `rule \"【Map】{0} (${name})\":\n` + /*", Current Map));
                Log To Inspector(Custom String("*/ `    @Condition getCurrentMap() == Map.{0}\n` + /*", Value In Array(Player Variable(Host Player, langMaps_overpyName), Index Of Array Value(Player Variable(Host Player, langMaps_map), Current Map))));
                Log To Inspector(Custom String("*/ `    pfLoadedMap_${name} = ${array}\n`); } /*"));
                Log To Inspector(Custom String("*/ load(\"nodes\", `[${nodes.join(',')}]`) + load(\"neighbors\", JSON.stringify(neighbors))"));
            End;
        End;
        "Disable inspector."
        Call Subroutine(DisableInspector);
        Modify Global Variable At Index(_extendedGlobalCollection, 3, Subtract, 1);
        Set Global Variable(newState, 1);
        Call Subroutine(SetMenuState);
        "Show code generation completed message."
        Set Global Variable(objectiveDescription, Custom String("Pathfinding code generated!"));
        Set Global Variable(lines_Type, Array(1, 0, 1, 0));
        Set Global Variable(lines_Content, Array(Array(Custom String("Your code has been generated, and you are almost ready to start pathfinding players!\n\n"), Color(Lime Green)), Array(Custom String("{0}{1}", Custom String("Open the inspector and click the \"Copy To Workshop All Log\" button to copy the generated code to your clipboard.\n"), Custom String("Paste the contents into a text editor{0}\n\n", If-Then-Else(Compare(Global Variable(outputLanguage), ==, 0), Custom String(". Remove the first timestamp and then you can paste the workshop\ncode directly into your game."), Custom String(", then follow the instructions in the text to use the pathfinder.")))), Color(White)), Array(Custom String(""), Color(White)), Array(Custom String("{0}{1}", Custom String("It is recommended to restart the game instance before doing another export\n"), Custom String("because the copy will include *all* exports. Remember to save your map beforehand\nby copying the action set code!")), Color(White))));
        Call Subroutine(showMessage);
    }
}

// Rule Element Count: 39
rule("Subroutine: Mirror map")
{
    event
    {
        Subroutine;
        mirrorMap;
    }

    // Element Count: 38, Action Count: 6
    // Largest Action Index: 3 using 14 Elements
    actions
    {
        Set Player Variable(Event Player, nodeLength, Count Of(Global Variable(Nodes_Node_UniqueID)));
        Set Player Variable(Event Player, segmentLength, Count Of(Global Variable(Segments_ID)));
        Set Player Variable(Event Player, attributeLength, Count Of(Global Variable(Attributes_Value)));
        Set Player Variable(Event Player, catalogItem_Set, Array(47, Null, Player Variable(Event Player, nodeLength), Player Variable(Event Player, segmentLength), Player Variable(Event Player, attributeLength)));
        Set Player Variable(Event Player, catalogItem_Revert, Array(48, Null, Player Variable(Event Player, nodeLength), Player Variable(Event Player, segmentLength), Player Variable(Event Player, attributeLength)));
        Call Subroutine(Docment);
    }
}

// Rule Element Count: 944
rule("Subroutine: Execute map mirror")
{
    event
    {
        Subroutine;
        executeMapMirror;
    }

    // Element Count: 943, Action Count: 114
    // Largest Action Index: 9 using 64 Elements
    actions
    {
        Set Player Variable(Event Player, iterI, 0);
        "0 = nodes, 1 = segments, 2 = attributes"
        Set Player Variable(Event Player, step, 0);
        "Create mirror progress HUD"
        Create Progress Bar HUD Text(All Players(All Teams), Multiply(Divide(Player Variable(Event Player, iterI), Value In Array(Array(Player Variable(Event Player, nodeLength_0), Player Variable(Event Player, segmentLength_0), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 42)), Player Variable(Event Player, step))), 100), Value In Array(Array(Custom String("Mirroring nodes {0}/{1} (1/3)", Player Variable(Event Player, iterI), Player Variable(Event Player, nodeLength_0)), Custom String("Mirroring paths {0}/{1} (2/3)", Player Variable(Event Player, iterI), Player Variable(Event Player, segmentLength_0)), Custom String("Mirroring attributes {0}/{1} (3/3)", Player Variable(Event Player, iterI), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 42))), Player Variable(Event Player, step)), Top, 100, Color(Orange), Color(White), Visible To And Values, Default Visibility);
        Set Player Variable(Event Player, progressHud, Last Text ID);
        "Get map mirror data."
        Set Player Variable(Event Player, mapId, Index Of Array Value(Array(Map(Ayutthaya), Map(Black Forest), Map(Black Forest Winter), Map(Busan Downtown Lunar New Year), Map(Busan Sanctuary Lunar New Year), Map(Castillo), Map(Ecopoint: Antarctica), Map(Ecopoint: Antarctica Winter), Map(Ilios Lighthouse), Map(Ilios Ruins), Map(Ilios Well), Map(Lijiang Control Center), Map(Lijiang Control Center Lunar New Year), Map(Lijiang Garden), Map(Lijiang Garden Lunar New Year), Map(Lijiang Night Market), Map(Lijiang Night Market Lunar New Year), Map(Necropolis), Map(Nepal Sanctum), Map(Nepal Shrine), Map(Nepal Village), Map(Oasis City Center), Map(Oasis Gardens), Map(Oasis University), Map(Workshop Chamber), Map(Workshop Expanse), Map(Workshop Expanse Night), Map(Workshop Island), Map(Workshop Island Night)), Current Map));
        Set Player Variable(Event Player, a_1, 0);
        Set Player Variable(Event Player, b_0, 0);
        Set Player Variable(Event Player, justFlipXAxis, True);
        If(Compare(Player Variable(Event Player, mapId), !=, -1));
            Set Player Variable(Event Player, a_1, Value In Array(Array(0, 0, 0, 51.9, 51.9, -0.19009, 0, 0, -0.41437, 28.6, 1.00409, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.00002, -1.00042, 0, 0, 0, 0, 0, 0), Player Variable(Event Player, mapId)));
            Set Player Variable(Event Player, b_0, Value In Array(Array(-7, 5, 5, 0, 0, 38.79879, 0, 0, 96.86593, 0, 192.85907, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103.99783, -106.1637, 0, 0, 0, 0, 0, 0), Player Variable(Event Player, mapId)));
            Set Player Variable(Event Player, justFlipXAxis, Value In Array(Array(False, False, False, True, True, False, False, False, False, True, False, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False), Player Variable(Event Player, mapId)));
        End;
        "The index of a node's mirrored node can be obtained by doing
`nodeMirrors[nodeIndex]`"
        Set Player Variable(Event Player, nodeMirrors, Empty Array);
        For Player Variable(Event Player, iterI, 0, Player Variable(Event Player, nodeLength_0), 1);
            If(Not(Modulo(Player Variable(Event Player, iterI), 10)));
                Wait(0.016, Ignore Condition);
            End;
            Set Player Variable(Event Player, pos_0, 0);
            If(Player Variable(Event Player, justFlipXAxis));
                Set Player Variable(Event Player, pos_0, Add(Multiply(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, iterI)), Vector(-1, 1, 1)), Vector(Player Variable(Event Player, a_1), Empty Array, Empty Array)));
            Else;
                "Get the plane's normal. The cross product with Up will turn the plane perpendicularly."
                Set Player Variable(Event Player, n_0, Normalize(Cross Product(Normalize(Vector(Player Variable(Event Player, a_1), Empty Array, -1)), Up)));
                "Get an arbritrary point on the plane."
                Set Player Variable(Event Player, p, Vector(Divide(Multiply(Player Variable(Event Player, b_0), -1), Player Variable(Event Player, a_1)), Empty Array, Empty Array));
                Set Player Variable(Event Player, w, Subtract(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, iterI)), Player Variable(Event Player, p)));
                Set Player Variable(Event Player, t, Dot Product(Player Variable(Event Player, w), Player Variable(Event Player, n_0)));
                "Projection of 'v' to the plane."
                Set Player Variable(Event Player, r, Add(Player Variable(Event Player, p), Multiply(Player Variable(Event Player, t), Player Variable(Event Player, n_0))));
                Set Player Variable(Event Player, pos_0, Add(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, iterI)), Multiply(Subtract(Player Variable(Event Player, r), Multiply(Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, iterI)), Vector(1, Empty Array, 1))), 2)));
            End;
            If(Compare(Distance Between(Player Variable(Event Player, pos_0), Value In Array(Global Variable(Nodes_Node_Position), Player Variable(Event Player, iterI))), <, 2));
                Set Player Variable At Index(Event Player, nodeMirrors, Player Variable(Event Player, iterI), Player Variable(Event Player, iterI));
                Skip(11);
            End;
            Set Player Variable(Event Player, inRadius, Sorted Array(Array Slice(Global Variable(Nodes_Node_Position), 0, Player Variable(Event Player, nodeLength_0)), Distance Between(Current Array Element, Player Variable(Event Player, pos_0))));
            If(And(Count Of(Player Variable(Event Player, inRadius)), Compare(Distance Between(First Of(Player Variable(Event Player, inRadius)), Player Variable(Event Player, pos_0)), <, 2)));
                Set Player Variable At Index(Event Player, nodeMirrors, Player Variable(Event Player, iterI), Index Of Array Value(Global Variable(Nodes_Node_Position), First Of(Player Variable(Event Player, inRadius))));
                Skip(6);
            End;
            Set Player Variable At Index(Event Player, nodeMirrors, Player Variable(Event Player, iterI), Count Of(Global Variable(Nodes_Node_UniqueID)));
            Modify Global Variable(NodeUniqueID, Add, 1);
            Modify Global Variable(Nodes_Node_UniqueID, Append To Array, Global Variable(NodeUniqueID));
            Modify Global Variable(Nodes_Node_Position, Append To Array, Player Variable(Event Player, pos_0));
            Modify Global Variable(Nodes_Selected, Append To Array, True);
        End;
        Modify Player Variable(Event Player, step, Add, 1);
        "Mirror segments"
        For Player Variable(Event Player, iterI, 0, Player Variable(Event Player, segmentLength_0), 1);
            If(Not(Modulo(Player Variable(Event Player, iterI), 10)));
                Wait(0.016, Ignore Condition);
            End;
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 43, Index Of Array Value(Global Variable(Nodes_Node_UniqueID), Value In Array(Global Variable(Segments_Node1), Player Variable(Event Player, iterI))));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 44, Index Of Array Value(Global Variable(Nodes_Node_UniqueID), Value In Array(Global Variable(Segments_Node2), Player Variable(Event Player, iterI))));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 45, Value In Array(Player Variable(Event Player, nodeMirrors), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 43)));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 46, Value In Array(Player Variable(Event Player, nodeMirrors), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 44)));
            If(And(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 45), ==, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 43)), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 46), ==, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 44))));
                Skip(20);
            End;
            Set Player Variable(Event Player, mirrorNode1Id, Value In Array(Global Variable(Nodes_Node_UniqueID), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 45)));
            Set Player Variable(Event Player, mirrorNode2Id, Value In Array(Global Variable(Nodes_Node_UniqueID), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 46)));
            For Player Variable(Event Player, i_2, 0, Player Variable(Event Player, segmentLength_0), 1);
                If(Or(And(Compare(Value In Array(Global Variable(Segments_Node1), Player Variable(Event Player, i_2)), ==, Player Variable(Event Player, mirrorNode1Id)), Compare(Value In Array(Global Variable(Segments_Node2), Player Variable(Event Player, i_2)), ==, Player Variable(Event Player, mirrorNode2Id))), And(And(True, Compare(Value In Array(Global Variable(Segments_Node1), Player Variable(Event Player, i_2)), ==, Player Variable(Event Player, mirrorNode2Id))), Compare(Value In Array(Global Variable(Segments_Node2), Player Variable(Event Player, i_2)), ==, Player Variable(Event Player, mirrorNode1Id)))));
                    Set Player Variable(Event Player, returnValue_anyWithWait, True);
                    Skip(6);
                End;
                If(Not(Modulo(Player Variable(Event Player, i_2), 40)));
                    Wait(0.016, Ignore Condition);
                End;
            End;
            Set Player Variable(Event Player, returnValue_anyWithWait, False);
            If(Player Variable(Event Player, returnValue_anyWithWait));
                Skip(5);
            End;
            Modify Global Variable(SegmentUniqueID, Add, 1);
            Modify Global Variable(Segments_ID, Append To Array, Global Variable(SegmentUniqueID));
            Modify Global Variable(Segments_Node1, Append To Array, Player Variable(Event Player, mirrorNode1Id));
            Modify Global Variable(Segments_Node2, Append To Array, Player Variable(Event Player, mirrorNode2Id));
        End;
        Modify Player Variable(Event Player, step, Add, 1);
        "Mirror attributes"
        For Player Variable(Event Player, iterI, 0, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 42), 1);
            If(Not(Modulo(Player Variable(Event Player, iterI), 10)));
                Wait(0.016, Ignore Condition);
            End;
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 47, Index Of Array Value(Global Variable(Nodes_Node_UniqueID), Value In Array(Global Variable(Attributes_Node1), Player Variable(Event Player, iterI))));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 48, Index Of Array Value(Global Variable(Nodes_Node_UniqueID), Value In Array(Global Variable(Attributes_Node2), Player Variable(Event Player, iterI))));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 49, Value In Array(Player Variable(Event Player, nodeMirrors), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 47)));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 50, Value In Array(Player Variable(Event Player, nodeMirrors), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 48)));
            If(And(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 49), ==, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 47)), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 50), ==, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 48))));
                Skip(21);
            End;
            Set Player Variable(Event Player, mirrorNode1Id_0, Value In Array(Global Variable(Nodes_Node_UniqueID), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 49)));
            Set Player Variable(Event Player, mirrorNode2Id_0, Value In Array(Global Variable(Nodes_Node_UniqueID), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 50)));
            For Player Variable(Event Player, i_3, 0, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 42), 1);
                If(Or(And(Compare(Value In Array(Global Variable(Attributes_Node1), Player Variable(Event Player, i_3)), ==, Player Variable(Event Player, mirrorNode1Id_0)), Compare(Value In Array(Global Variable(Attributes_Node2), Player Variable(Event Player, i_3)), ==, Player Variable(Event Player, mirrorNode2Id_0))), And(And(False, Compare(Value In Array(Global Variable(Attributes_Node1), Player Variable(Event Player, i_3)), ==, Player Variable(Event Player, mirrorNode2Id_0))), Compare(Value In Array(Global Variable(Attributes_Node2), Player Variable(Event Player, i_3)), ==, Player Variable(Event Player, mirrorNode1Id_0)))));
                    Set Player Variable(Event Player, returnValue_anyWithWait_0, True);
                    Skip(6);
                End;
                If(Not(Modulo(Player Variable(Event Player, i_3), 40)));
                    Wait(0.016, Ignore Condition);
                End;
            End;
            Set Player Variable(Event Player, returnValue_anyWithWait_0, False);
            If(Player Variable(Event Player, returnValue_anyWithWait_0));
                Skip(6);
            End;
            Modify Global Variable(AttributeUniqueID, Add, 1);
            Modify Global Variable(Attributes_Value, Append To Array, Value In Array(Global Variable(Attributes_Value), Player Variable(Event Player, iterI)));
            Modify Global Variable(Attributes_ID, Append To Array, Global Variable(AttributeUniqueID));
            Modify Global Variable(Attributes_Node1, Append To Array, Player Variable(Event Player, mirrorNode1Id_0));
            Modify Global Variable(Attributes_Node2, Append To Array, Player Variable(Event Player, mirrorNode2Id_0));
        End;
        "Destroy progess hud"
        Destroy Progress Bar HUD Text(Player Variable(Event Player, progressHud));
        "Notify user"
        Small Message(All Players(All Teams), Custom String("Added {0} nodes", Subtract(Count Of(Global Variable(Nodes_Node_UniqueID)), Player Variable(Event Player, nodeLength_0))));
        Small Message(All Players(All Teams), Custom String("Added {0} segments", Subtract(Count Of(Global Variable(Segments_ID)), Player Variable(Event Player, segmentLength_0))));
        Small Message(All Players(All Teams), Custom String("Added {0} attributes", Subtract(Count Of(Global Variable(Attributes_Value)), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 42))));
        "Update visiblity"
        Call Subroutine(updateRenderingNodes);
    }
}

// Rule Element Count: 21
rule("Subroutine: show multi page message")
{
    event
    {
        Subroutine;
        showPagedMessage;
    }

    // Element Count: 20, Action Count: 9
    // Largest Action Index: 3 using 5 Elements
    actions
    {
        Set Player Variable(Event Player, msgPages, Global Variable(pages));
        Set Player Variable(Event Player, msgCurrentPage, 0);
        Modify Global Variable(lambdaParameter_0, Append To Array, Array(0));
        Modify Global Variable(func_group, Append To Array, Array(First Of(Global Variable(pages))));
        Call Subroutine(func_group);
        Set Global Variable(objectiveDescription, Null);
        Set Global Variable(lines_Type, Global Variable(lambdaValue_0));
        Set Global Variable(lines_Content, Global Variable(lambdaValue_1));
        Call Subroutine(showMessage);
    }
}

// Rule Element Count: 3413
rule("lambda")
{
    event
    {
        Subroutine;
        func_group;
    }

    // Element Count: 3412, Action Count: 349
    // Largest Action Index: 0 using 179 Elements
    actions
    {
        Skip(Value In Array(Array(346, 0, 5, 10, 15, 18, 21, 33, 35, 37, 39, 42, 45, 58, 60, 68, 72, 75, 78, 81, 90, 93, 98, 102, 117, 133, 137, 142, 147, 151, 155, 161, 167, 171, 173, 175, 196, 213, 218, 225, 234, 249, 280, 282, 288, 294, 299, 304, 314, 325, 328, 331, 334, 337, 340, 343), Add(Index Of Array Value(Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55), First Of(Last Of(Global Variable(func_group)))), 1)));
        Set Global Variable(objectiveDescription, Value In Array(Last Of(Global Variable(func_group)), 2));
        Set Global Variable(lines_Type, Value In Array(Last Of(Global Variable(func_group)), 3));
        Set Global Variable(lines_Content, Value In Array(Last Of(Global Variable(func_group)), 4));
        Call Subroutine(showMessage);
        Skip(341);
        Set Global Variable(objectiveDescription, Null);
        Set Global Variable(lines_Type, Array(2, 1, 0));
        Set Global Variable(lines_Content, Array(Array(Custom String("Import code: hp2dg"), Color(Orange)), Array(Custom String("v1.0.4"), Color(Sky Blue)), Array(Custom String("Initial Release"), Color(White))));
        Call Subroutine(showMessage);
        Skip(336);
        Set Global Variable(objectiveDescription, Null);
        Set Global Variable(lines_Type, Array(1, 0, 2, 1, 0, 0, 1, 0, 1, 0));
        Set Global Variable(lines_Content, Array(Array(Custom String("Pathmap Editor v1.0.4"), Color(Lime Green)), Array(Custom String("https://github.com/ItsDeltin/Pathmap-editor\n"), Color(Blue)), Array(Custom String("  ☆ Credits ☆  "), Color(Rose)), Array(Custom String("Created by Deltin"), Color(Sky Blue)), Array(Custom String("with Overwatch Script To Workshop"), Color(White)), Array(Custom String("https://github.com/ItsDeltin/Overwatch-Script-To-Workshop\n"), Color(Blue)), Array(Custom String("Josbird"), Color(Orange)), Array(Custom String("- Cursor menu library\n- Noclip\n"), Color(White)), Array(Custom String("Zezombye"), Color(Yellow)), Array(Custom String("- Map symmetry data\n- overpy"), Color(White))));
        Call Subroutine(showMessage);
        Skip(331);
        Set Global Variable(pages, Array(Array(49, Last Of(Global Variable(func_group))), Array(50, Last Of(Global Variable(func_group))), Array(51, Last Of(Global Variable(func_group))), Array(52, Last Of(Global Variable(func_group))), Array(53, Last Of(Global Variable(func_group)))));
        Call Subroutine(showPagedMessage);
        Skip(328);
        Set Global Variable(attributeMode, Not(Global Variable(attributeMode)));
        Call Subroutine(updateSegmentModeLabel);
        Skip(325);
        Set Global Variable(newState, 9);
        Call Subroutine(SetMenuState);
        Set Global Variable(input, Array(Custom String("Are you sure you want to mirror the map?\nPlease save your map before continuing.\nThis may take a minute."), 0, 0, 0, 0.15, 0.2, 0.2, Color(White), Color(Blue), False, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("no"), Array(35, Array(54, Last Of(Global Variable(func_group)))), Array(36, Array(54, Last Of(Global Variable(func_group)))), -0.4, -0.25, 0.2, 0.2, Color(Red), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Set Global Variable(input, Array(Custom String("yes"), Array(35, Array(55, Last Of(Global Variable(func_group)))), Array(36, Array(55, Last Of(Global Variable(func_group)))), 0.4, -0.25, 0.2, 0.2, Color(Green), Color(Blue), True, True));
        Call Subroutine(__createButtonSubroutine);
        Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
        Skip(313);
        Set Global Variable At Index(_extendedGlobalCollection, 5, Last Of(Global Variable(lambdaParameter_0)));
        Skip(311);
        Call Subroutine(OpenActionSelectMenu);
        Skip(309);
        Set Global Variable At Index(Rules_ExecutesOnAttribute, Global Variable(rulePage), Last Of(Global Variable(lambdaParameter_0)));
        Skip(307);
        Set Global Variable At Index(_extendedGlobalCollection, 47, True);
        Call Subroutine(MoveSelectedActions);
        Skip(304);
        Set Global Variable At Index(_extendedGlobalCollection, 47, False);
        Call Subroutine(MoveSelectedActions);
        Skip(301);
        Modify Global Variable At Index(_extendedGlobalCollection, 51, Append To Array, Array(Value In Array(All Heroes, Last Of(Global Variable(lambdaParameter_0)))));
        "Is the hero already on the toggle list?"
        If(Array Contains(Array Slice(Value In Array(Global Variable(Rules_EnabledHeroes), Global Variable(rulePage)), 1, 1000), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 51))));
            "The hero is already on the toggle list, remove it."
            Modify Global Variable At Index(Rules_EnabledHeroes, Global Variable(rulePage), Remove From Array By Value, Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 51)));
        Else;
            "The hero is not on the toggle list, add it."
            Modify Global Variable At Index(Rules_EnabledHeroes, Global Variable(rulePage), Append To Array, Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 51)));
            "If the number of toggled heroes exceeds half of the number of heroes,
then we can save space by inverting the toggles."
            If(Compare(Count Of(Value In Array(Global Variable(Rules_EnabledHeroes), Global Variable(rulePage))), >, Divide(Count Of(All Heroes), 2)));
                "Invert the toggle state then append the inverted hero toggles."
                Set Global Variable At Index(Rules_EnabledHeroes, Global Variable(rulePage), Append To Array(Array(Not(First Of(Value In Array(Global Variable(Rules_EnabledHeroes), Global Variable(rulePage))))), Remove From Array(All Heroes, Value In Array(Global Variable(Rules_EnabledHeroes), Global Variable(rulePage)))));
            End;
        End;
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 11, Last Of(Global Variable(lambdaParameter_0)));
        Call Subroutine(updateHeroIcon);
        Modify Global Variable At Index(_extendedGlobalCollection, 51, Remove From Array By Index, Subtract(Count Of(Value In Array(Global Variable(_extendedGlobalCollection), 51)), 1));
        Skip(288);
        Call Subroutine(DeleteRule);
        Skip(286);
        Set Global Variable At Index(actionsSelected, Last Of(Global Variable(lambdaParameter_0)), Not(Value In Array(Global Variable(actionsSelected), Last Of(Global Variable(lambdaParameter_0)))));
        If(And(Compare(Last Of(Global Variable(lambdaParameter_0)), >=, Value In Array(Global Variable(_objectVariable_8), Global Variable(actionScrollBar))), Compare(Last Of(Global Variable(lambdaParameter_0)), <, Add(Value In Array(Global Variable(_objectVariable_8), Global Variable(actionScrollBar)), Value In Array(Global Variable(_objectVariable_7), Global Variable(actionScrollBar))))));
            Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), Last Of(Global Variable(lambdaParameter_0)))), If-Then-Else(Value In Array(Global Variable(actionsSelected), Last Of(Global Variable(lambdaParameter_0))), Color(Green), Color(White)));
        End;
        Set Global Variable(_arrayConstructor, Value In Array(Global Variable(_objectVariable_2), Global Variable(actionScrollBar)));
        Set Global Variable At Index(_arrayConstructor, Last Of(Global Variable(lambdaParameter_0)), If-Then-Else(Value In Array(Global Variable(actionsSelected), Last Of(Global Variable(lambdaParameter_0))), Color(Green), Color(White)));
        Set Global Variable At Index(_objectVariable_2, Global Variable(actionScrollBar), Global Variable(_arrayConstructor));
        Skip(278);
        Set Global Variable At Index(buildToggles, Value In Array(Last Of(Global Variable(func_group)), 2), Not(Value In Array(Global Variable(buildToggles), Value In Array(Last Of(Global Variable(func_group)), 2))));
        Set Player Variable At Index(Event Player, cm_buttons_Label, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Last Of(Global Variable(func_group)), 3)), Custom String("{0}: {1}", Value In Array(Last Of(Global Variable(func_group)), 4), If-Then-Else(Value In Array(Global Variable(buildToggles), Value In Array(Last Of(Global Variable(func_group)), 2)), Custom String("on"), Custom String("off"))));
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Last Of(Global Variable(func_group)), 3)), If-Then-Else(Value In Array(Global Variable(buildToggles), Value In Array(Last Of(Global Variable(func_group)), 2)), Color(Lime Green), Custom Color(182, 57, 57, 255)));
        Skip(274);
        Set Global Variable(outputLanguage, 0);
        Call Subroutine(SetLanguageSelectLabels);
        Skip(271);
        Set Global Variable(outputLanguage, 1);
        Call Subroutine(SetLanguageSelectLabels);
        Skip(268);
        Set Global Variable(outputLanguage, 2);
        Call Subroutine(SetLanguageSelectLabels);
        Skip(265);
        "Do nothing if nothing is going to be exported."
        If(And(And(Not(First Of(Global Variable(buildToggles))), Not(Value In Array(Global Variable(buildToggles), 1))), Not(Value In Array(Global Variable(buildToggles), 2))));
            Set Global Variable(objectiveDescription, Custom String("Error"));
            Set Global Variable(lines_Type, Array(0));
            Set Global Variable(lines_Content, Array(Array(Custom String("\n\nAll exporting options disabled, nothing to export."), Color(Rose))));
            Call Subroutine(showMessage);
        Else;
            Call Subroutine(Export);
        End;
        Skip(256);
        Set Global Variable(editorState, 1);
        Set Global Variable At Index(_extendedGlobalCollection, 11, Last Of(Global Variable(lambdaParameter_0)));
        Skip(253);
        Modify Global Variable(Nodes_Node_UniqueID, Append To Array, Value In Array(Last Of(Global Variable(func_group)), 3));
        Modify Global Variable(Nodes_Node_Position, Append To Array, Value In Array(Last Of(Global Variable(func_group)), 2));
        Modify Global Variable(Nodes_Selected, Append To Array, False);
        Call Subroutine(updateRenderingNodes);
        Skip(248);
        Set Global Variable(index, Index Of Array Value(Global Variable(Nodes_Node_UniqueID), Value In Array(Last Of(Global Variable(func_group)), 2)));
        Call Subroutine(RemoveNodeByIndex);
        Call Subroutine(updateRenderingNodes);
        Skip(244);
        Set Global Variable(SelectedNodeIndex, -1);
        Set Global Variable(SelectedNodeID, -1);
        "Delete segments"
        For Global Variable(waitlessI, Subtract(Count Of(Value In Array(Last Of(Global Variable(func_group)), 2)), 1), -1, -1);
            Set Global Variable(index_0, First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 2), Global Variable(waitlessI))));
            Call Subroutine(RemoveSegmentByIndex);
        End;
        "Delete attributes"
        For Global Variable(waitlessI, Subtract(Count Of(Value In Array(Last Of(Global Variable(func_group)), 3)), 1), -1, -1);
            Set Global Variable(index_1, First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 3), Global Variable(waitlessI))));
            Call Subroutine(RemoveAttributeByIndex);
        End;
        "Delete node"
        Set Global Variable(index, Value In Array(Last Of(Global Variable(func_group)), 4));
        Call Subroutine(RemoveNodeByIndex);
        "Refresh rending nodes"
        Call Subroutine(updateRenderingNodes);
        Call Subroutine(UpdateAttributeVisibility);
        Skip(229);
        "Insert deleted node"
        Set Global Variable(Nodes_Node_UniqueID, Append To Array(Append To Array(Array Slice(Global Variable(Nodes_Node_UniqueID), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(Value In Array(Last Of(Global Variable(func_group)), 3))), Array Slice(Global Variable(Nodes_Node_UniqueID), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Set Global Variable(Nodes_Node_Position, Append To Array(Append To Array(Array Slice(Global Variable(Nodes_Node_Position), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(Value In Array(Last Of(Global Variable(func_group)), 4))), Array Slice(Global Variable(Nodes_Node_Position), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Set Global Variable(Nodes_Selected, Append To Array(Append To Array(Array Slice(Global Variable(Nodes_Selected), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(False)), Array Slice(Global Variable(Nodes_Selected), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        "Insert deleted segments"
        For Global Variable(waitlessI, 0, Count Of(Value In Array(Last Of(Global Variable(func_group)), 5)), 1);
            Set Global Variable(Segments_ID, Append To Array(Append To Array(Array Slice(Global Variable(Segments_ID), 0, First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 5), Global Variable(waitlessI)))), Array(Value In Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 5), Global Variable(waitlessI)), 1))), Array Slice(Global Variable(Segments_ID), First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 5), Global Variable(waitlessI))), 999)));
            Set Global Variable(Segments_Node1, Append To Array(Append To Array(Array Slice(Global Variable(Segments_Node1), 0, First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 5), Global Variable(waitlessI)))), Array(Value In Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 5), Global Variable(waitlessI)), 2))), Array Slice(Global Variable(Segments_Node1), First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 5), Global Variable(waitlessI))), 999)));
            Set Global Variable(Segments_Node2, Append To Array(Append To Array(Array Slice(Global Variable(Segments_Node2), 0, First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 5), Global Variable(waitlessI)))), Array(Value In Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 5), Global Variable(waitlessI)), 3))), Array Slice(Global Variable(Segments_Node2), First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 5), Global Variable(waitlessI))), 999)));
        End;
        "Insert deleted attributes"
        For Global Variable(waitlessI, 0, Count Of(Value In Array(Last Of(Global Variable(func_group)), 6)), 1);
            Set Global Variable(Attributes_Value, Append To Array(Append To Array(Array Slice(Global Variable(Attributes_Value), 0, First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI)))), Array(Value In Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI)), 4))), Array Slice(Global Variable(Attributes_Value), First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI))), 999)));
            Set Global Variable(Attributes_ID, Append To Array(Append To Array(Array Slice(Global Variable(Attributes_ID), 0, First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI)))), Array(Value In Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI)), 1))), Array Slice(Global Variable(Attributes_ID), First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI))), 999)));
            Set Global Variable(Attributes_Node1, Append To Array(Append To Array(Array Slice(Global Variable(Attributes_Node1), 0, First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI)))), Array(Value In Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI)), 2))), Array Slice(Global Variable(Attributes_Node1), First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI))), 999)));
            Set Global Variable(Attributes_Node2, Append To Array(Append To Array(Array Slice(Global Variable(Attributes_Node2), 0, First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI)))), Array(Value In Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI)), 3))), Array Slice(Global Variable(Attributes_Node2), First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 6), Global Variable(waitlessI))), 999)));
        End;
        Call Subroutine(updateRenderingNodes);
        Skip(213);
        Set Global Variable(index_0, Index Of Array Value(Global Variable(Segments_ID), Value In Array(Last Of(Global Variable(func_group)), 2)));
        Call Subroutine(RemoveSegmentByIndex);
        Call Subroutine(updateRenderingSegments);
        Skip(209);
        Set Global Variable(Segments_ID, Append To Array(Append To Array(Array Slice(Global Variable(Segments_ID), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(Value In Array(Last Of(Global Variable(func_group)), 3))), Array Slice(Global Variable(Segments_ID), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Set Global Variable(Segments_Node1, Append To Array(Append To Array(Array Slice(Global Variable(Segments_Node1), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(Value In Array(Last Of(Global Variable(func_group)), 4))), Array Slice(Global Variable(Segments_Node1), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Set Global Variable(Segments_Node2, Append To Array(Append To Array(Array Slice(Global Variable(Segments_Node2), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(Value In Array(Last Of(Global Variable(func_group)), 5))), Array Slice(Global Variable(Segments_Node2), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Call Subroutine(updateRenderingSegments);
        Skip(204);
        Modify Global Variable(Segments_ID, Append To Array, Value In Array(Last Of(Global Variable(func_group)), 2));
        Modify Global Variable(Segments_Node1, Append To Array, Value In Array(Last Of(Global Variable(func_group)), 3));
        Modify Global Variable(Segments_Node2, Append To Array, Value In Array(Last Of(Global Variable(func_group)), 4));
        Call Subroutine(updateRenderingSegments);
        Skip(199);
        Set Global Variable(index_0, Index Of Array Value(Global Variable(Segments_ID), Value In Array(Last Of(Global Variable(func_group)), 2)));
        Call Subroutine(RemoveSegmentByIndex);
        Call Subroutine(updateRenderingSegments);
        Skip(195);
        Set Global Variable(index_1, Value In Array(Last Of(Global Variable(func_group)), 2));
        Call Subroutine(RemoveAttributeByIndex);
        Call Subroutine(UpdateAttributeVisibility);
        Skip(191);
        Set Global Variable(Attributes_Value, Append To Array(Append To Array(Array Slice(Global Variable(Attributes_Value), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(First Of(Value In Array(Last Of(Global Variable(func_group)), 3)))), Array Slice(Global Variable(Attributes_Value), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Set Global Variable(Attributes_ID, Append To Array(Append To Array(Array Slice(Global Variable(Attributes_ID), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 3), 1))), Array Slice(Global Variable(Attributes_ID), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Set Global Variable(Attributes_Node1, Append To Array(Append To Array(Array Slice(Global Variable(Attributes_Node1), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 3), 2))), Array Slice(Global Variable(Attributes_Node1), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Set Global Variable(Attributes_Node2, Append To Array(Append To Array(Array Slice(Global Variable(Attributes_Node2), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 3), 3))), Array Slice(Global Variable(Attributes_Node2), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Call Subroutine(UpdateAttributeVisibility);
        Skip(185);
        Modify Global Variable(Attributes_Value, Append To Array, Value In Array(Last Of(Global Variable(func_group)), 2));
        Modify Global Variable(Attributes_ID, Append To Array, Value In Array(Last Of(Global Variable(func_group)), 3));
        Modify Global Variable(Attributes_Node1, Append To Array, Value In Array(Last Of(Global Variable(func_group)), 4));
        Modify Global Variable(Attributes_Node2, Append To Array, Value In Array(Last Of(Global Variable(func_group)), 5));
        Call Subroutine(UpdateAttributeVisibility);
        Skip(179);
        Set Global Variable(index_1, Index Of Array Value(Global Variable(Attributes_ID), Value In Array(Last Of(Global Variable(func_group)), 2)));
        Call Subroutine(RemoveAttributeByIndex);
        Call Subroutine(UpdateAttributeVisibility);
        Skip(175);
        Set Global Variable At Index(Nodes_Node_Position, Index Of Array Value(Global Variable(Nodes_Node_UniqueID), Value In Array(Last Of(Global Variable(func_group)), 2)), Value In Array(Last Of(Global Variable(func_group)), 3));
        Skip(173);
        Set Global Variable At Index(Nodes_Node_Position, Index Of Array Value(Global Variable(Nodes_Node_UniqueID), Value In Array(Last Of(Global Variable(func_group)), 2)), Value In Array(Last Of(Global Variable(func_group)), 3));
        Skip(171);
        Set Global Variable(_arrayConstructor, Value In Array(Global Variable(_extendedGlobalCollection), 52));
        Set Global Variable At Index(_arrayConstructor, Subtract(Count Of(Value In Array(Global Variable(_extendedGlobalCollection), 52)), 1), 0);
        Set Global Variable At Index(_extendedGlobalCollection, 52, Global Variable(_arrayConstructor));
        While(Compare(Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52)), <, Count Of(Value In Array(Last Of(Global Variable(func_group)), 2))));
            Modify Global Variable At Index(Rules_Actions_Data, Value In Array(Last Of(Global Variable(func_group)), 3), Remove From Array By Index, Subtract(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52))), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52))));
            If(And(And(And(Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 3), Value In Array(Global Variable(_extendedGlobalCollection), 21)), Global Variable(actionScrollBar)), Compare(Value In Array(Last Of(Global Variable(func_group)), 3), ==, Global Variable(rulePage))));
                Modify Global Variable At Index(_objectVariable_3, Global Variable(actionScrollBar), Remove From Array By Index, Subtract(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52))), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52))));
                If(Compare(Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), Subtract(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52))), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52)))), !=, -1));
                    Set Global Variable(buttonID, Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), Subtract(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52))), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52)))));
                    Call Subroutine(DestroyButton);
                End;
                Modify Global Variable At Index(_objectVariable_4, Global Variable(actionScrollBar), Remove From Array By Index, Subtract(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52))), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52))));
                Modify Global Variable At Index(_objectVariable_2, Global Variable(actionScrollBar), Remove From Array By Index, Subtract(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52))), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 52))));
                Set Global Variable(UpdateStack, Global Variable(actionScrollBar));
                Call Subroutine(Update);
            End;
            Set Global Variable(_arrayConstructor, Value In Array(Global Variable(_extendedGlobalCollection), 52));
            Modify Global Variable At Index(_arrayConstructor, Subtract(Count Of(Value In Array(Global Variable(_extendedGlobalCollection), 52)), 1), Add, 1);
            Set Global Variable At Index(_extendedGlobalCollection, 52, Global Variable(_arrayConstructor));
        End;
        Skip(150);
        Set Global Variable(_arrayConstructor, Value In Array(Global Variable(_extendedGlobalCollection), 53));
        Set Global Variable At Index(_arrayConstructor, Subtract(Count Of(Value In Array(Global Variable(_extendedGlobalCollection), 53)), 1), 0);
        Set Global Variable At Index(_extendedGlobalCollection, 53, Global Variable(_arrayConstructor));
        While(Compare(Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53)), <, Count Of(Value In Array(Last Of(Global Variable(func_group)), 2))));
            Set Global Variable At Index(Rules_Actions_Data, Value In Array(Last Of(Global Variable(func_group)), 3), Append To Array(Append To Array(Array Slice(Value In Array(Global Variable(Rules_Actions_Data), Value In Array(Last Of(Global Variable(func_group)), 3)), 0, Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53)))), Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 2), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53))))), Array Slice(Value In Array(Global Variable(Rules_Actions_Data), Value In Array(Last Of(Global Variable(func_group)), 3)), Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53))), 999)));
            If(And(And(And(Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 3), Value In Array(Global Variable(_extendedGlobalCollection), 21)), Global Variable(actionScrollBar)), Compare(Value In Array(Last Of(Global Variable(func_group)), 3), ==, Global Variable(rulePage))));
                Set Global Variable At Index(_objectVariable_3, Global Variable(actionScrollBar), Append To Array(Append To Array(Array Slice(Value In Array(Global Variable(_objectVariable_3), Global Variable(actionScrollBar)), 0, Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53)))), Array(Custom String("{0} {1}", Value In Array(Value In Array(Player Variable(Host Player, _extendedPlayerCollection), 8), First Of(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 2), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53))))), Value In Array(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 2), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53))), 1)))), Array Slice(Value In Array(Global Variable(_objectVariable_3), Global Variable(actionScrollBar)), Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53))), 999)));
                Set Global Variable At Index(_objectVariable_2, Global Variable(actionScrollBar), Append To Array(Append To Array(Array Slice(Value In Array(Global Variable(_objectVariable_2), Global Variable(actionScrollBar)), 0, Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53)))), Array(Color(White))), Array Slice(Value In Array(Global Variable(_objectVariable_2), Global Variable(actionScrollBar)), Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53))), 999)));
                Set Global Variable At Index(_objectVariable_4, Global Variable(actionScrollBar), Append To Array(Append To Array(Array Slice(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), 0, Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53)))), Array(-1)), Array Slice(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), Value In Array(Value In Array(Last Of(Global Variable(func_group)), 4), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 53))), 999)));
                Set Global Variable(UpdateStack, Global Variable(actionScrollBar));
                Call Subroutine(Update);
            End;
            Set Global Variable(_arrayConstructor, Value In Array(Global Variable(_extendedGlobalCollection), 53));
            Modify Global Variable At Index(_arrayConstructor, Subtract(Count Of(Value In Array(Global Variable(_extendedGlobalCollection), 53)), 1), Add, 1);
            Set Global Variable At Index(_extendedGlobalCollection, 53, Global Variable(_arrayConstructor));
        End;
        Skip(133);
        Modify Global Variable(Rules_Actions_Data, Append To Array, Array(Empty Array));
        Modify Global Variable(Rules_ExecutesOnAttribute, Append To Array, Array(0));
        Modify Global Variable(Rules_EnabledHeroes, Append To Array, Array(Array(True)));
        Call Subroutine(OnRuleAdded);
        Skip(128);
        Modify Global Variable At Index(_extendedGlobalCollection, 54, Append To Array, Array(Subtract(Count Of(Global Variable(Rules_Actions_Data)), 1)));
        Modify Global Variable(Rules_Actions_Data, Remove From Array By Index, Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 54)));
        Modify Global Variable(Rules_ExecutesOnAttribute, Remove From Array By Index, Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 54)));
        Modify Global Variable(Rules_EnabledHeroes, Remove From Array By Index, Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 54)));
        Call Subroutine(OnRuleRemoved);
        Modify Global Variable At Index(_extendedGlobalCollection, 54, Remove From Array By Index, Subtract(Count Of(Value In Array(Global Variable(_extendedGlobalCollection), 54)), 1));
        Skip(121);
        Modify Global Variable At Index(Rules_Actions_Data, Value In Array(Last Of(Global Variable(func_group)), 2), Append To Array, Array(Value In Array(Last Of(Global Variable(func_group)), 3)));
        If(And(Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 3), Global Variable(actionScrollBar)));
            Modify Global Variable At Index(_objectVariable_3, Global Variable(actionScrollBar), Append To Array, Custom String("{0} {1}", Value In Array(Value In Array(Player Variable(Host Player, _extendedPlayerCollection), 8), First Of(Value In Array(Last Of(Global Variable(func_group)), 3))), Value In Array(Value In Array(Last Of(Global Variable(func_group)), 3), 1)));
            Modify Global Variable At Index(_objectVariable_2, Global Variable(actionScrollBar), Append To Array, Color(White));
            Modify Global Variable At Index(_objectVariable_4, Global Variable(actionScrollBar), Append To Array, -1);
            Set Global Variable(UpdateStack, Global Variable(actionScrollBar));
            Call Subroutine(Update);
        End;
        Skip(112);
        Modify Global Variable At Index(_extendedGlobalCollection, 55, Append To Array, Array(Subtract(Count Of(Value In Array(Global Variable(Rules_Actions_Data), Value In Array(Last Of(Global Variable(func_group)), 2))), 1)));
        Modify Global Variable At Index(Rules_Actions_Data, Value In Array(Last Of(Global Variable(func_group)), 2), Remove From Array By Index, Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 55)));
        If(And(Compare(First Of(Player Variable(Event Player, _extendedPlayerCollection)), ==, 3), Global Variable(actionScrollBar)));
            Modify Global Variable At Index(_objectVariable_3, Global Variable(actionScrollBar), Remove From Array By Index, Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 55)));
            If(Compare(Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 55))), !=, -1));
                Set Global Variable(buttonID, Value In Array(Value In Array(Global Variable(_objectVariable_4), Global Variable(actionScrollBar)), Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 55))));
                Call Subroutine(DestroyButton);
            End;
            Modify Global Variable At Index(_objectVariable_4, Global Variable(actionScrollBar), Remove From Array By Index, Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 55)));
            Modify Global Variable At Index(_objectVariable_2, Global Variable(actionScrollBar), Remove From Array By Index, Last Of(Value In Array(Global Variable(_extendedGlobalCollection), 55)));
            Set Global Variable(UpdateStack, Global Variable(actionScrollBar));
            Call Subroutine(Update);
        End;
        Modify Global Variable At Index(_extendedGlobalCollection, 55, Remove From Array By Index, Subtract(Count Of(Value In Array(Global Variable(_extendedGlobalCollection), 55)), 1));
        Skip(97);
        If(Global Variable(actionScrollBar));
            Set Global Variable(DisposeStack, Global Variable(actionScrollBar));
            Call Subroutine(Dispose);
            Set Global Variable(actionScrollBar, Null);
        End;
        If(Compare(Last Of(Global Variable(lambdaParameter_0)), ==, 0));
            Set Global Variable(newState, 5);
            Call Subroutine(SetMenuState);
            Set Global Variable At Index(_extendedGlobalCollection, 19, 0.016);
            Set Global Variable(input, Array(Custom String("{0}{1}{2}", Custom String("wait time: "), Value In Array(Global Variable(_extendedGlobalCollection), 19), Custom String(" seconds")), 0, 0, 0, 0.2, 0.2, 0.2, Color(Yellow), Color(Blue), False, True));
            Call Subroutine(__createButtonSubroutine);
            Set Global Variable At Index(_extendedGlobalCollection, 20, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("←"), 22, 24, -0.3, 0, 0.2, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("→"), 21, 23, 0.3, 0, 0.2, 0.2, Color(White), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Set Global Variable(input, Array(Custom String("Add action"), 25, 0, 0, -0.2, 1.5, 0.2, Color(Green), Color(Blue), True, True));
            Call Subroutine(__createButtonSubroutine);
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Global Variable(returnValue___createButtonSubrou));
            Modify Player Variable(Event Player, buttonCollectionMain, Append To Array, Value In Array(Global Variable(_extendedGlobalCollection), 20));
        Else;
            Set Global Variable At Index(_extendedGlobalCollection, 56, Global Variable(rulePage));
            Set Player Variable(Event Player, catalogItem_Set, Array(39, Last Of(Global Variable(func_group)), Value In Array(Global Variable(_extendedGlobalCollection), 56), Array(Last Of(Global Variable(lambdaParameter_0)), Custom String(""))));
            Set Player Variable(Event Player, catalogItem_Revert, Array(40, Last Of(Global Variable(func_group)), Value In Array(Global Variable(_extendedGlobalCollection), 56)));
            Call Subroutine(Docment);
            Set Global Variable(newState, 3);
            Call Subroutine(SetMenuState);
        End;
        Skip(66);
        Call Subroutine(UpdatePathfinderAttributeSelecto);
        Skip(64);
        Set Global Variable At Index(_extendedGlobalCollection, 48, Value In Array(Last Of(Global Variable(func_group)), 2));
        Set Global Variable At Index(_extendedGlobalCollection, 49, Value In Array(Last Of(Global Variable(func_group)), 3));
        Set Global Variable At Index(_extendedGlobalCollection, 50, Value In Array(Last Of(Global Variable(func_group)), 4));
        Set Global Variable(isUndo, False);
        Call Subroutine(DoMove);
        Skip(58);
        Set Global Variable At Index(_extendedGlobalCollection, 48, Value In Array(Last Of(Global Variable(func_group)), 2));
        Set Global Variable At Index(_extendedGlobalCollection, 49, Not(Value In Array(Last Of(Global Variable(func_group)), 3)));
        Set Global Variable At Index(_extendedGlobalCollection, 50, Value In Array(Last Of(Global Variable(func_group)), 4));
        Set Global Variable(isUndo, True);
        Call Subroutine(DoMove);
        Skip(52);
        Modify Global Variable(Rules_Actions_Data, Remove From Array By Index, Value In Array(Last Of(Global Variable(func_group)), 2));
        Modify Global Variable(Rules_ExecutesOnAttribute, Remove From Array By Index, Value In Array(Last Of(Global Variable(func_group)), 2));
        Modify Global Variable(Rules_EnabledHeroes, Remove From Array By Index, Value In Array(Last Of(Global Variable(func_group)), 2));
        Call Subroutine(OnRuleRemoved);
        Skip(47);
        Set Global Variable(Rules_Actions_Data, Append To Array(Append To Array(Array Slice(Global Variable(Rules_Actions_Data), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(Value In Array(Last Of(Global Variable(func_group)), 3))), Array Slice(Global Variable(Rules_Actions_Data), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Set Global Variable(Rules_ExecutesOnAttribute, Append To Array(Append To Array(Array Slice(Global Variable(Rules_ExecutesOnAttribute), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(Value In Array(Last Of(Global Variable(func_group)), 4))), Array Slice(Global Variable(Rules_ExecutesOnAttribute), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Set Global Variable(Rules_EnabledHeroes, Append To Array(Append To Array(Array Slice(Global Variable(Rules_EnabledHeroes), 0, Value In Array(Last Of(Global Variable(func_group)), 2)), Array(Value In Array(Last Of(Global Variable(func_group)), 5))), Array Slice(Global Variable(Rules_EnabledHeroes), Value In Array(Last Of(Global Variable(func_group)), 2), 999)));
        Call Subroutine(OnRuleAdded);
        Skip(42);
        Set Global Variable(message, Custom String("Mirroring, please wait..."));
        Call Subroutine(StartLongRunningTask);
        Set Player Variable(Event Player, nodeLength_0, Value In Array(Last Of(Global Variable(func_group)), 2));
        Set Player Variable(Event Player, segmentLength_0, Value In Array(Last Of(Global Variable(func_group)), 3));
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 42, Value In Array(Last Of(Global Variable(func_group)), 4));
        Call Subroutine(executeMapMirror);
        Modify Global Variable At Index(_extendedGlobalCollection, 3, Subtract, 1);
        Set Global Variable(newState, 1);
        Call Subroutine(SetMenuState);
        Skip(32);
        Set Global Variable(Nodes_Node_UniqueID, Array Slice(Global Variable(Nodes_Node_UniqueID), 0, Value In Array(Last Of(Global Variable(func_group)), 2)));
        Set Global Variable(Nodes_Node_Position, Array Slice(Global Variable(Nodes_Node_Position), 0, Value In Array(Last Of(Global Variable(func_group)), 2)));
        Set Global Variable(Nodes_Selected, Array Slice(Global Variable(Nodes_Selected), 0, Value In Array(Last Of(Global Variable(func_group)), 2)));
        Set Global Variable(Segments_ID, Array Slice(Global Variable(Segments_ID), 0, Value In Array(Last Of(Global Variable(func_group)), 3)));
        Set Global Variable(Segments_Node1, Array Slice(Global Variable(Segments_Node1), 0, Value In Array(Last Of(Global Variable(func_group)), 3)));
        Set Global Variable(Segments_Node2, Array Slice(Global Variable(Segments_Node2), 0, Value In Array(Last Of(Global Variable(func_group)), 3)));
        Set Global Variable(Attributes_Value, Array Slice(Global Variable(Attributes_Value), 0, Value In Array(Last Of(Global Variable(func_group)), 4)));
        Set Global Variable(Attributes_ID, Array Slice(Global Variable(Attributes_ID), 0, Value In Array(Last Of(Global Variable(func_group)), 4)));
        Set Global Variable(Attributes_Node1, Array Slice(Global Variable(Attributes_Node1), 0, Value In Array(Last Of(Global Variable(func_group)), 4)));
        Set Global Variable(Attributes_Node2, Array Slice(Global Variable(Attributes_Node2), 0, Value In Array(Last Of(Global Variable(func_group)), 4)));
        Skip(21);
        Set Global Variable(lambdaValue_0, Array(1, 0, 0, 0, 0, 0, 0, 0));
        Set Global Variable(lambdaValue_1, Array(Array(Custom String("Getting started\n"), Color(White)), Array(Custom String("The pathmap editor creates nav meshes, which are used to pathfind dummy bots.\n"), Color(White)), Array(Custom String("{0}{1}", Custom String("The editor generates workshop code into the log which can be copied into your gamemode, you do\n"), Custom String("not need the overhead of the entire editor in order to pathfind your bots.\n")), Color(White)), Array(Custom String("{0}{1}", Custom String("Make sure the \"Enable Workshop Inspector\" & \"Enable Workshop Inspector Log File\"\n"), Custom String("settings are enabled in Options > Gameplay > General. This will allow you to save and export your map.\n\n")), Color(Yellow)), Array(Custom String("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"), Color(White)), Array(Custom String("{0}{1}", Custom String("These workshop codes contain the editor loaded with a completed waypoint graph.\n"), Custom String("You can use these to see how your map should look.\n")), Color(White)), Array(Custom String("Esperança     Hanamura"), Color(Sky Blue)), Array(Custom String("GZWF9              FQY78"), Color(Green))));
        Skip(18);
        Set Global Variable(lambdaValue_0, Array(0, 1, 0, 1, 0, 1, 0));
        Set Global Variable(lambdaValue_1, Array(Array(Custom String("Pathfinding is made up of 3 components: Nodes, paths, and attributes."), Color(White)), Array(Custom String("{0} Nodes", Ability Icon String(Hero(Sombra), Button(Secondary Fire))), Color(Turquoise)), Array(Custom String("When pathfinding, bots will walk between the nodes placed in the world.\n"), Color(White)), Array(Custom String("{0} Paths", Ability Icon String(Hero(Pharah), Button(Ability 2))), Color(Orange)), Array(Custom String("{0}{1}", Custom String("Paths determine which nodes are connected."), Custom String("\nWhen the connect mode is \"Connect: Paths\", Select two nodes in the world to create a path between them.\n")), Color(White)), Array(Custom String("{0} Attributes", Ability Icon String(Hero(Genji), Button(Jump))), Color(Yellow)), Array(Custom String("{0}{1}", Custom String("Paths can be tagged with values in order to create gates and paths that require hero abilities to cross."), Custom String("\nWhen the connect mode is \"Connect: Attributes\", Select two nodes to tag the path between them.")), Color(White))));
        Skip(15);
        Set Global Variable(lambdaValue_0, Array(0, 1, 0, 1, 0, 2, 0, 0, 0));
        Set Global Variable(lambdaValue_1, Array(Array(Custom String("{0}{1}", Custom String("Note that there is a difference between \"saving\" and \"exporting\". Saving will allow you to edit the pathmap\n"), Custom String("again in the editor. Exporting is generating the actual code that is copied into your gamemode.\n")), Color(Yellow)), Array(Custom String("How To Save"), Color(Sky Blue)), Array(Custom String("{0}{1}{2}", Custom String("1. Press Escape.\n2. Click \"Open Workshop Inspector\".\n"), Custom String("3. Click the (X) button below the timeline.\n"), Custom String("4. Save the copied contents into a text file.")), Color(White)), Array(Custom String("How to load"), Color(Yellow)), Array(Custom String("{0}{1}", Custom String("1. Import the pathmap editor workshop code \"GZWF9\"\n2. Open the workshop editor.\n"), Custom String("3. scroll to the top of the page to the rule that says:")), Color(White)), Array(Custom String("【◈ Paste the actions to load a previous save here!! ◈】"), Custom Color(179, 179, 179, 255)), Array(Custom String("4. Paste the saved text into the rule.\n"), Color(White)), Array(Custom String("Always remember that the workshop won't auto-save your map."), Color(Rose)), Array(Custom String("If the game restarts or is closed you will lose your progress."), Color(White))));
        Skip(12);
        Set Global Variable(lambdaValue_0, Array(1, 0, 0, 0, 0));
        Set Global Variable(lambdaValue_1, Array(Array(Custom String("How to load old maps"), Color(Sky Blue)), Array(Custom String("{0}{1}", Custom String("When loading your save from old editor versions, there is a chance you will get an error such as "), Custom String("\n\"Expected variable after 'Global'\". You can fix this by editing your save so that the workshop accepts it.\n")), Color(White)), Array(Custom String("Step #1: Open your save in a text editor and delete the \"variables\" section.\n"), Color(Lime Green)), Array(Custom String("{0}{1}", Custom String("Step #2: delete the unnecessary variable assignment actions. The variables below\n"), Custom String("are part of the save, remove anything else.\n")), Color(Lime Green)), Array(Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String("- VERSION                  "), Custom String("                    - ATTRIBUTES_VALUE
- MAP                       "), Custom String("                        - ATTRIBUTES_ID
- UNIQUENODEID              ")), Custom String("           - ATTRIBUTES_NODE1
- SEGMENTUNIQUEID           "), Custom String("      - ATTRIBUTES_NODE2
- ATTRIBUTEUNIQUEID         ")), Custom String("     - SAVEDPLAYERLOCATION
- NODES_NODE_UNIQUEID       "), Custom String("- SAVEDPLAYERDIRECTION
- NODES_NODE_POSITION       ")), Custom String("- IsNoclipping
- SEGMENTS_ID               "), Custom String("             - Rules_Actions_Data
- SEGMENTS_NODE1            ")), Custom String("      - Rules_ExecutesOnAttribute
- SEGMENTS_NODE2            "), Custom String("      - Rules_EnabledHeroes
- __LOADPERSIST")), Color(White))));
        Skip(9);
        Set Global Variable(lambdaValue_0, Array(1, 0, 3, 3, 3, 0));
        Set Global Variable(lambdaValue_1, Array(Array(Custom String("How to use exported code\n"), Color(White)), Array(Custom String("{0}{1}", Custom String("Make sure to generate your Workshop, ostw, or overpy code in the export menu and add it to your game.\n"), Custom String("Afterwards, you can pathfind bots by setting their \"pfDestination\" player variable to the target destination.\n")), Color(White)), Array(Custom String("Set Player Variable(pfDestination, Objective Position(0));\n{0}", Custom String("                               ")), Color(White), Custom String("Workshop code"), Color(Green)), Array(Custom String("pfDestination = ObjectivePosition(0);\n{0}", Custom String("                               ")), Color(White), Custom String("ostw code"), Color(Sky Blue)), Array(Custom String("eventPlayer.pfDestination = getObjectivePosition(0)\n{0}\n", Custom String("                               ")), Color(White), Custom String("overpy code"), Color(Yellow)), Array(Custom String("You can chase the pfDestination variable to another player's position to make the bot follow them."), Color(White))));
        Skip(6);
        Set Global Variable(newState, 1);
        Call Subroutine(SetMenuState);
        Skip(3);
        Set Global Variable(newState, 1);
        Call Subroutine(SetMenuState);
        Start Rule(mirrorMap, Do Nothing);
        Modify Global Variable(lambdaParameter_0, Remove From Array By Index, Subtract(Count Of(Global Variable(lambdaParameter_0)), 1));
        Modify Global Variable(func_group, Remove From Array By Index, Subtract(Count Of(Global Variable(func_group)), 1));
    }
}

// Rule Element Count: 451
rule("Editor: tutorial")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 450, Action Count: 25
    // Largest Action Index: 1 using 122 Elements
    actions
    {
        Create HUD Text(If-Then-Else(Player Variable(Host Player, cm_isInMenu), Null, Host Player), Null, Null, Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n "), Right, 0, Color(White), Color(White), Color(White), Visible To, Default Visibility);
        Create HUD Text(If-Then-Else(And(Not(Player Variable(Host Player, cm_isInMenu)), True), Host Player, Null), Null, Null, Custom String("{0}: {1}{2}{2}{2}{2}", If-Then-Else(Compare(Global Variable(editorState), ==, 1), Custom String("Place dummy"), If-Then-Else(Compare(Global Variable(SelectedPlayer), !=, Null), If-Then-Else(Player Variable(Global Variable(SelectedPlayer), dummySelected), Custom String("Unselect player"), Custom String("Select player")), If-Then-Else(Compare(Global Variable(SelectedSegment), !=, -1), If-Then-Else(Global Variable(attributeMode), Custom String("Connect attribute"), Custom String("Delete path")), If-Then-Else(And(Compare(Global Variable(connectingFromNode), !=, -1), Compare(Global Variable(SelectedNodeID), !=, -1)), If-Then-Else(Compare(Global Variable(connectingFromNode), ==, Global Variable(SelectedNodeIndex)), If-Then-Else(Global Variable(attributeMode), Custom String("Cancel attribute"), Custom String("Cancel path")), If-Then-Else(Global Variable(attributeMode), Custom String("Connect Attribute"), Custom String("Link path"))), If-Then-Else(And(Compare(Global Variable(connectingFromNode), ==, -1), Compare(Global Variable(SelectedNodeID), !=, -1)), If-Then-Else(Global Variable(attributeMode), Custom String("Create attribute"), Custom String("Create path")), Custom String("Create node")))))), Input Binding String(Button(Primary Fire)), Custom String("                                                        ")), Right, Global Variable(controlTextOrder), Color(White), Color(White), Custom Color(255, 255, 255, 162.435), Visible To String and Color, Default Visibility);
        Modify Global Variable(controlTexts, Append To Array, Last Text ID);
        Modify Global Variable(controlTextOrder, Add, 1);
        Create HUD Text(If-Then-Else(And(Not(Player Variable(Host Player, cm_isInMenu)), Or(And(And(Compare(Global Variable(editorState), ==, 0), Compare(Global Variable(connectingFromNode), !=, -1)), Compare(Global Variable(SelectedNodeID), ==, -1)), Compare(Global Variable(editorState), ==, 1))), Host Player, Null), Null, Null, Custom String("{0}: {1}{2}{2}{2}{2}", If-Then-Else(Compare(Global Variable(editorState), ==, 0), If-Then-Else(Global Variable(attributeMode), Custom String("Cancel attribute"), Custom String("Cancel path")), Custom String("Cancel")), Input Binding String(Button(Secondary Fire)), Custom String("                                                        ")), Right, Global Variable(controlTextOrder), Color(White), Color(White), Custom Color(255, 255, 255, 162.435), Visible To String and Color, Default Visibility);
        Modify Global Variable(controlTexts, Append To Array, Last Text ID);
        Modify Global Variable(controlTextOrder, Add, 1);
        Create HUD Text(If-Then-Else(And(Not(Player Variable(Host Player, cm_isInMenu)), Compare(Global Variable(SelectedNodeIndex), !=, -1)), Host Player, Null), Null, Null, Custom String("{0}: {1}{2}{2}{2}{2}", Custom String("Destroy node"), Input Binding String(Button(Ultimate)), Custom String("                                                        ")), Right, Global Variable(controlTextOrder), Color(White), Color(White), Custom Color(255, 255, 255, 162.435), Visible To String and Color, Default Visibility);
        Modify Global Variable(controlTexts, Append To Array, Last Text ID);
        Modify Global Variable(controlTextOrder, Add, 1);
        Create HUD Text(If-Then-Else(And(Not(Player Variable(Host Player, cm_isInMenu)), Or(Compare(Global Variable(connectingFromNode), !=, -1), Is True For Any(All Players(All Teams), Player Variable(Current Array Element, dummySelected)))), Host Player, Null), Null, Null, Custom String("{0}: {1}{2}{2}{2}{2}", If-Then-Else(Compare(Global Variable(connectingFromNode), !=, -1), Custom String("Move node"), Custom String("Pathfind to cursor")), Input Binding String(Button(Reload)), Custom String("                                                        ")), Right, Global Variable(controlTextOrder), Color(White), Color(White), Custom Color(255, 255, 255, 162.435), Visible To String and Color, Default Visibility);
        Modify Global Variable(controlTexts, Append To Array, Last Text ID);
        Modify Global Variable(controlTextOrder, Add, 1);
        Create HUD Text(If-Then-Else(And(Not(Player Variable(Host Player, cm_isInMenu)), Is True For Any(All Players(All Teams), Player Variable(Current Array Element, dummySelected))), Host Player, Null), Null, Null, Custom String("{0}: {1}{2}{2}{2}{2}", Custom String("Destroy dummy bot"), Input Binding String(Button(Ultimate)), Custom String("                                                        ")), Right, Global Variable(controlTextOrder), Color(White), Color(White), Custom Color(255, 255, 255, 162.435), Visible To String and Color, Default Visibility);
        Modify Global Variable(controlTexts, Append To Array, Last Text ID);
        Modify Global Variable(controlTextOrder, Add, 1);
        Create HUD Text(If-Then-Else(And(Not(Player Variable(Host Player, cm_isInMenu)), Is True For Any(All Players(All Teams), Player Variable(Current Array Element, dummySelected))), Host Player, Null), Null, Null, Custom String("{0}: {1}{2}{2}{2}{2}", Custom String("Teleport to cursor"), Input Binding String(Button(Melee)), Custom String("                                                        ")), Right, Global Variable(controlTextOrder), Color(White), Color(White), Custom Color(255, 255, 255, 162.435), Visible To String and Color, Default Visibility);
        Modify Global Variable(controlTexts, Append To Array, Last Text ID);
        Modify Global Variable(controlTextOrder, Add, 1);
        Create HUD Text(If-Then-Else(And(Not(Player Variable(Host Player, cm_isInMenu)), Is True For Any(All Players(All Teams), Is Dummy Bot(Current Array Element))), Host Player, Null), Null, Null, Custom String("{0}: {1}{2}{2}{2}{2}", If-Then-Else(Is True For Any(All Players(All Teams), And(Is Dummy Bot(Current Array Element), Player Variable(Current Array Element, dummySelected))), Custom String("Unselect all bots"), Custom String("Select all bots")), Input Binding String(Button(Ability 1)), Custom String("                                                        ")), Right, Global Variable(controlTextOrder), Color(White), Color(White), Custom Color(255, 255, 255, 162.435), Visible To String and Color, Default Visibility);
        Modify Global Variable(controlTexts, Append To Array, Last Text ID);
        Modify Global Variable(controlTextOrder, Add, 1);
        Create HUD Text(If-Then-Else(And(Not(Player Variable(Host Player, cm_isInMenu)), True), Host Player, Null), Null, Null, Custom String("{0}: {1}{2}{2}{2}{2}", Custom String("menu"), Input Binding String(Button(Interact)), Custom String("                                                        ")), Right, Global Variable(controlTextOrder), Color(White), Color(White), Custom Color(255, 255, 255, 162.435), Visible To String and Color, Default Visibility);
        Modify Global Variable(controlTexts, Append To Array, Last Text ID);
        Modify Global Variable(controlTextOrder, Add, 1);
    }
}

// Rule Element Count: 47
rule("CM: Enable delete action button")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 27, Condition Count: 4
    conditions
    {
        Host Player == Event Player;
        First Of(Player Variable(Event Player, _extendedPlayerCollection)) == 3;
        Value In Array(Global Variable(_extendedGlobalCollection), 21) == True;
        Is True For Any(Global Variable(actionsSelected), Current Array Element) == True;
    }

    // Element Count: 19, Action Count: 2
    // Largest Action Index: 1 using 10 Elements
    actions
    {
        Set Player Variable At Index(Event Player, cm_buttons_Interactable, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 16)), True);
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 16)), Color(Red));
    }
}

// Rule Element Count: 55
rule("CM: Disable delete action button")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 28, Condition Count: 4
    conditions
    {
        Host Player == Event Player;
        First Of(Player Variable(Event Player, _extendedPlayerCollection)) == 3;
        Value In Array(Global Variable(_extendedGlobalCollection), 21) == True;
        Is True For All(Global Variable(actionsSelected), Not(Current Array Element)) == True;
    }

    // Element Count: 26, Action Count: 2
    // Largest Action Index: 1 using 17 Elements
    actions
    {
        Set Player Variable At Index(Event Player, cm_buttons_Interactable, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 16)), False);
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 16)), Custom Color(252, 0, 0, 50.745));
    }
}

// Rule Element Count: 54
rule("CM: Enable Move Actions Up")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 34, Condition Count: 5
    conditions
    {
        Host Player == Event Player;
        First Of(Player Variable(Event Player, _extendedPlayerCollection)) == 3;
        Value In Array(Global Variable(_extendedGlobalCollection), 21) == True;
        Is True For Any(Global Variable(actionsSelected), Current Array Element) == True;
        Not(First Of(Global Variable(actionsSelected))) == True;
    }

    // Element Count: 19, Action Count: 2
    // Largest Action Index: 1 using 10 Elements
    actions
    {
        Set Player Variable At Index(Event Player, cm_buttons_Interactable, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 17)), True);
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 17)), Color(White));
    }
}

// Rule Element Count: 52
rule("CM: Disable Move Actions Up")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 32, Condition Count: 4
    conditions
    {
        Host Player == Event Player;
        First Of(Player Variable(Event Player, _extendedPlayerCollection)) == 3;
        Value In Array(Global Variable(_extendedGlobalCollection), 21) == True;
        Or(First Of(Global Variable(actionsSelected)), Is True For All(Global Variable(actionsSelected), Not(Current Array Element))) == True;
    }

    // Element Count: 19, Action Count: 2
    // Largest Action Index: 1 using 10 Elements
    actions
    {
        Set Player Variable At Index(Event Player, cm_buttons_Interactable, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 17)), False);
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 17)), Color(Gray));
    }
}

// Rule Element Count: 63
rule("CM: Enable Move Actions Down")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 43, Condition Count: 5
    conditions
    {
        Host Player == Event Player;
        First Of(Player Variable(Event Player, _extendedPlayerCollection)) == 3;
        Value In Array(Global Variable(_extendedGlobalCollection), 21) == True;
        Is True For Any(Global Variable(actionsSelected), Current Array Element) == True;
        Not(Value In Array(Global Variable(actionsSelected), Subtract(Count Of(Value In Array(Global Variable(Rules_Actions_Data), Global Variable(rulePage))), 1))) == True;
    }

    // Element Count: 19, Action Count: 2
    // Largest Action Index: 1 using 10 Elements
    actions
    {
        Set Player Variable At Index(Event Player, cm_buttons_Interactable, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 18)), True);
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 18)), Color(White));
    }
}

// Rule Element Count: 61
rule("CM: Disable Move Actions Down")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 41, Condition Count: 4
    conditions
    {
        Host Player == Event Player;
        First Of(Player Variable(Event Player, _extendedPlayerCollection)) == 3;
        Value In Array(Global Variable(_extendedGlobalCollection), 21) == True;
        Or(Value In Array(Global Variable(actionsSelected), Subtract(Count Of(Value In Array(Global Variable(Rules_Actions_Data), Global Variable(rulePage))), 1)), Is True For All(Global Variable(actionsSelected), Not(Current Array Element))) == True;
    }

    // Element Count: 19, Action Count: 2
    // Largest Action Index: 1 using 10 Elements
    actions
    {
        Set Player Variable At Index(Event Player, cm_buttons_Interactable, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 18)), False);
        Set Player Variable At Index(Event Player, cm_buttons_DefaultColor, Index Of Array Value(Player Variable(Event Player, cm_buttons_ID), Value In Array(Global Variable(_extendedGlobalCollection), 18)), Color(Gray));
    }
}
