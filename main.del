import 'sandbox.del';
import 'place nodes.del';
import 'utility.del';
import 'history.del';
import 'noclip.del';
import 'dummy.del';
import 'dijkstra.del';
import 'rule.del';
import 'scroll menu.del';
import 'number selector.del';
import 'pathfinder settings.del';
import 'cursor menu.del';
import 'export.del';
import 'settings.lobby';

globalvar Number version = 1;

globalvar Map map = CurrentMap();

class what {} globalvar what whaat! = new what();

globalvar Number maxHistoryLength!;

rule: '┏━【◈ Paste the actions to load a previous save here!! ◈】━┓' -3
{
    
}

rule: 'Setup: Inspector, Performance HUD, and Settings'
{
    if (!WorkshopSettingToggle('Pathmap Editor', 'Enable inspector recording', false, 1))
        DisableInspectorRecording();
    CreateHudText(AllPlayers(), Text: "cap: {0} {1} {2}".Format([ServerLoad(), ServerLoadAverage(), ServerLoadPeak()]));
    maxHistoryLength = WorkshopSettingInteger("Pathmap Editor", "Undo history length", 20, 0, 100);
}

rule: 'Snapshot'
Event.OngoingPlayer
if (host == eventPlayer)
if (button(Button.Crouch))
{
    EnableInspectorRecording();
    DisableInspectorRecording();
}

struct Node
{
    public Number UniqueID;
    public Vector Position;
}

struct WorldNode
{
    public Node Node;
    public Boolean Selected = false;

    public Color Color(): Highlighted() ?
        (Selected ? Color.Turquoise : Color.Blue) : // selected / highlighted
        (Selected ? Color.LimeGreen : Color.White);  // unselected / highlighted
    
    public Boolean Highlighted(): SelectedNodeID == Node.UniqueID;

    public Vector ShownPosition(): Node.Position + Up() * 1.3;

    public Boolean ValidTarget(): ShownPosition().DistanceTo(ray(eye, eye + facing * ShownPosition().DistanceTo(eye))) < NodeSize;
}

struct WorldSegment
{
    public Number ID;
    public Number Node1;
    public Number Node2;
    public Any Effect;
}

struct Attribute
{
    public Number Value;
    public Number ID;
    public Number Node1;
    public Number Node2;
}

globalvar persist WorldNode[] Nodes = [];
globalvar persist WorldSegment[] Segments = [];
globalvar persist Attribute[] Attributes = [];

globalvar persist Number NodeUniqueID! = 1;
globalvar persist Number SegmentUniqueID! = 1;

Number NodeSize: 0.3;
Boolean AnyNodesSelected: Nodes.IsTrueForAny(node => node.Selected);

globalvar Number SelectedNodeIndex! = -1;
globalvar Number SelectedNodeID! = -1;
globalvar Number SelectedSegment! = -1;
globalvar Player SelectedPlayer!;
globalvar Any[] AttributeTexts = [];

Number NodeIndexFromID(in Number id): Nodes.Map(node => node.Node.UniqueID).IndexOf(id);
Number SegmentIndexFromID(in Number id): Segments.Map(segment => segment.ID).IndexOf(id);
Number AttributeIndexFromID(in Number id): Attributes.Map(attribute => attribute.ID).IndexOf(id);

void RemoveNodeByIndex(Number index) 'Subroutine: Remove node'
{
    Nodes.ModRemoveByIndex(index);
}

void RemoveSegmentByIndex(Number index) 'Subroutine: Remove segment'
{
    DestroyEffect(Segments[index].Effect);
    Segments.ModRemoveByIndex(index);
}

void RemoveAttributeByIndex(Number index) 'Subroutine: Remove attribute'
{
    Attributes.ModRemoveByIndex(index);
}

rule: 'Player init'
Event.OngoingPlayer
if (!IsDummyBot())
{
    DisallowButton(eventPlayer, Button.PrimaryFire);
    DisallowButton(eventPlayer, Button.SecondaryFire);
    DisallowButton(eventPlayer, Button.Ultimate);
    DisallowButton(eventPlayer, Button.Ability1);
}

globalvar persist Vector savedPlayerLocation;
globalvar persist Vector savedPlayerDirection;

playervar Number[] renderingNodes;
playervar Number[] renderingSegments;
playervar Vector lastUpdatePosition;

rule: 'Preload nodes'
{
    Number preload! = 0;
    for (preload = 0; 40; 1)
    {
        define node: Nodes[host.renderingNodes[EvaluateOnce(preload)]];
        CreateEffect(
            EvaluateOnce(preload) < host.renderingNodes.Length ? host : null,
            Effect.Sphere, node.Color(), node.ShownPosition(), NodeSize, EffectRev.VisibleToPositionRadiusAndColor);
    }
    for (preload = 0; 40; 1)
    {
        define seg: Segments[host.renderingSegments[EvaluateOnce(preload)]];
        CreateBeamEffect(
            UpdateEveryFrame(editorState != EditorState.Node || attributeMode || SelectedSegment != EvaluateOnce(preload) || TotalTimeElapsed() % 1 < 0.5 ? AllPlayers() : null),
            BeamType.BrigitteFlailChainBeam,
            Nodes[NodeIndexFromID(seg.Node1)].ShownPosition(),
            Nodes[NodeIndexFromID(seg.Node2)].ShownPosition(),
            Color.White,
            EffectRev.VisibleToPositionAndRadius
        );
    }
}

rule: 'Update rendering nodes'
Event.OngoingPlayer
if (host == eventPlayer)
if (HasSpawned())
if (!lastUpdatePosition || lastUpdatePosition.DistanceTo(host) > 10)
{
    lastUpdatePosition = host.Position();
    updateRenderingNodes();
    Wait(3);
    LoopIfConditionIsTrue();
}

void updateRenderingNodes() 'Subroutine: Update rendering nodes'
{
    // Set the nodes that will be rendered.
    host.renderingNodes = Nodes.SortedArray(n => n.Node.Position.DistanceTo(host)).Map((n, i) => i);
    updateRenderingSegments();
}

void updateRenderingSegments() 'Subroutine: Update rendering segments'
{
    // Get the unique IDs of the 20 closest nodes.
    define x = host.renderingNodes.Slice(0, 20).Map(i => Nodes[i].Node.UniqueID);
    // Set the segments that will be rendered.
    host.renderingSegments = Segments.FilteredArray(
        s => x.Contains(s.Node1) || x.Contains(s.Node2)
    ).Map((s, i) => i);
}

rule: 'Snapshot'
{
    EnableInspectorRecording();
    # 【◈ How to save & load ◈】
    # Click the (x) button under the timeline.
    # 
    # `                      ↓
    # •-   ≡   □   □⃩    (x)
    # 
    # Save the copied text into a text file. To load it, paste the contents into the first rule in the workshop editor.
    DisableInspectorRecording();
    Wait(10);
    Loop();
}

rule: 'Main: Persistant Spawn'
if (HasSpawned(host))
if (savedPlayerLocation)
{
    host.Teleport(savedPlayerLocation);
    SetFacing(host, savedPlayerDirection, Relative.ToWorld);
}

rule: 'Main: Selection loop'
if (HasSpawned(host))
if (savedPlayerLocation != host.Position() || savedPlayerDirection != host.FacingDirection())
if (Nodes.Length || AllPlayers().IsTrueForAny(player => player.IsDummy()))
{
    savedPlayerLocation = host.Position();
    savedPlayerDirection = host.FacingDirection();

    // Find player
    AllPlayers().dummyHighlighted = false;
    SelectedPlayer = RayCastHitPlayer(eye, eye + facing * 100, AllPlayers(), host, false);
    SelectedPlayer.dummyHighlighted = true;

    // Selected node
    Number[] tempNode! = Nodes
        .Map((node, i) => i)
        .SortedArray(i => Nodes[i].ShownPosition().DistanceTo(eye))
        .FilteredArray(i => Nodes[i].ValidTarget());
    
    SelectedNodeIndex = tempNode.Length ? tempNode.First : -1;
    
    // Player and node found, choose one.
    if (SelectedPlayer != null && SelectedNodeIndex != -1)
    {
        if (Nodes[SelectedNodeIndex].ShownPosition().DistanceTo(eye) > SelectedPlayer.Position().DistanceTo(eye))
            SelectedNodeIndex = -1;
        else
            SelectedPlayer = null;
    }
    
    Number previouslySelectedNodeID = SelectedNodeID;
    
    if (SelectedNodeIndex == -1)
        SelectedNodeID = -1;
    else
        SelectedNodeID = Nodes[SelectedNodeIndex].Node.UniqueID;

    if (previouslySelectedNodeID != SelectedNodeID)
    {
        UpdateAttributeVisibility();

        // Get segment that contains both nodes.
        if (connectingFromNode == -1 || SelectedNodeID == -1)
            SelectedSegment = -1;
        else
        {
            Number[] tempSegment! = Segments.Map((s, i) => i).FilteredArray(i =>
                (Segments[i].Node1 == Nodes[SelectedNodeIndex].Node.UniqueID && Segments[i].Node2 == Nodes[connectingFromNode].Node.UniqueID) ||
                (Segments[i].Node2 == Nodes[SelectedNodeIndex].Node.UniqueID && Segments[i].Node1 == Nodes[connectingFromNode].Node.UniqueID));
            
            SelectedSegment = tempSegment == [] ? -1 : tempSegment.First; 
        }
    }

    Wait(0.1);
    LoopIfConditionIsTrue();
}

public void UpdateAttributeVisibility() 'Subroutine: Update attribute visibility'
{
    while (AttributeTexts.Length)
    {
        DestroyInWorldText(AttributeTexts.First);
        AttributeTexts.ModRemoveByIndex(0);
    }

    // Show connected attributes.
    Number useNode! =
        SelectedNodeID != -1 ? SelectedNodeID :
        connectingFromNode != -1 ? Nodes[connectingFromNode].Node.UniqueID : -1;

    if (useNode == -1)
    {
        return;
    }

    define attributeIndices = Attributes.Map((s, i) => i).FilteredArray(
        i => Attributes[i].Node1 == useNode || Attributes[i].Node2 == useNode
    );
    
    while (attributeIndices.Length)
    {
        Vector p1 = Nodes[NodeIndexFromID(Attributes[attributeIndices.First].Node1)].ShownPosition();
        Vector p2 = Nodes[NodeIndexFromID(Attributes[attributeIndices.First].Node2)].ShownPosition();
        Boolean isSource = Attributes[attributeIndices.First].Node1 == useNode;

        define group = attributeIndices.FilteredArray(i =>
            Attributes[attributeIndices.First].Node1 == Attributes[i].Node1 &&
            Attributes[attributeIndices.First].Node2 == Attributes[i].Node2
        );

        // Remove from attributeIndices the values in the current group.
        attributeIndices -= group;

        // Generate string
        String string! = '';
        while (group.Length)
        {
            string = <' <0>\n<2><1><2>', string, Attributes[group.First].Value, isSource ? '◈' : ''>;
            group.ModRemoveByIndex(0);
        }

        AttributeTexts += CreateInWorldText(
            VisibleTo: AllPlayers(),
            Header: string,
            Position: p1 + (p2 - p1) * 0.3,
            Scale: 2.5,
            Clipping: Clipping.DoNotClip,
            Reevaluation: InworldTextRev.VisibleTo,
            TextColor: isSource ? Color.SkyBlue : CustomColor(255, 115, 0, 100)
        );
    }
}

playervar Boolean releasePrimary;
playervar Boolean releaseReload;

rule: 'Release primary'
Event.OngoingPlayer
if (releasePrimary)
if (!IsButtonHeld(EventPlayer(), Button.PrimaryFire))
{
    releasePrimary = !releasePrimary;
}

rule: 'Release reload'
Event.OngoingPlayer
if (releaseReload)
if (!IsButtonHeld(EventPlayer(), Button.Reload))
{
    releaseReload = !releaseReload;
}