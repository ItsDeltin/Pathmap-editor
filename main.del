import 'sandbox.del';
import 'place nodes.del';
import 'utility.del';
import 'history.del';
import 'noclip.del';
import 'dummy.del';
import 'dijkstra.del';
import 'rule.del';
import 'scroll menu.del';
import 'number selector.del';
import 'pathfinder settings.del';
import 'settings.lobby';

class what {} globalvar what whaat! = new what();

rule: 'Disable inspector' -1
{
    DisableInspectorRecording();
}

struct Node
{
    public Number UniqueID;
    public Vector Position;
}

struct WorldNode
{
    public Node Node;
    public Boolean Selected = false;
    public Number Visibility = 0;
    public Any BallEffect = null;
    public Any RingEffect = null;

    public Color Color(): Highlighted() ?
        (Selected ? Color.Turquoise : Color.Blue) : // selected / highlighted
        (Selected ? Color.LimeGreen : Color.White);  // unselected / highlighted
    
    public Boolean Highlighted(): SelectedNodeID == Node.UniqueID;

    public Vector ShownPosition(): Node.Position + Up() * 1.3;

    public Boolean ValidTarget(): ShownPosition().DistanceTo(ray(eye, eye + facing * ShownPosition().DistanceTo(eye))) < NodeSize;
}

struct WorldSegment
{
    public Number ID;
    public Number Node1;
    public Number Node2;
    public Any Effect;
}

struct Attribute
{
    public Number Value;
    public Number ID;
    public Number Node1;
    public Number Node2;
}

globalvar WorldNode[] Nodes = [];
globalvar WorldSegment[] Segments = [];
globalvar Attribute[] Attributes = [];

globalvar Number NodeUniqueID! = 1;
globalvar Number SegmentUniqueID! = 1;
globalvar Number AttributeUniqueID! = 1;

Number NodeSize: 0.3;
Boolean AnyNodesSelected: Nodes.IsTrueForAny(node => node.Selected);

globalvar Number SelectedNodeIndex! = -1;
globalvar Number SelectedNodeID! = -1;
globalvar Number SelectedSegment! = -1;
globalvar Player SelectedPlayer!;
globalvar Any[] AttributeTexts = [];

Number NodeIndexFromID(in Number id): Nodes.Map(node => node.Node.UniqueID).IndexOf(id);
Number SegmentIndexFromID(in Number id): Segments.Map(segment => segment.ID).IndexOf(id);
Number AttributeIndexFromID(in Number id): Attributes.Map(attribute => attribute.ID).IndexOf(id);

void RemoveNodeByIndex(Number index)
{
    DestroyEffect(Nodes[index].BallEffect);
    DestroyEffect(Nodes[index].RingEffect);
    Nodes.ModRemoveByIndex(index);
}

void RemoveSegmentByIndex(Number index)
{
    DestroyEffect(Segments[index].Effect);
    Segments.ModRemoveByIndex(index);
}

void RemoveAttributeByIndex(Number index)
{
    Attributes.ModRemoveByIndex(index);
}

rule: 'Player init'
Event.OngoingPlayer
if (!IsDummyBot())
{
    DisallowButton(eventPlayer, Button.PrimaryFire);
    DisallowButton(eventPlayer, Button.SecondaryFire);
}

disabled rule: 'debug button'
Event.OngoingPlayer
if (host == eventPlayer)
{
    createButton('db');
}

rule: 'Main: Selection loop'
if (Nodes.Length || AllPlayers().IsTrueForAny(player => player.IsDummy()))
{
    // Find player
    AllPlayers().dummyHighlighted = false;
    SelectedPlayer = RayCastHitPlayer(eye, eye + facing * 100, AllPlayers(), host, false);
    SelectedPlayer.dummyHighlighted = true;

    // Selected node
    Number[] tempNode! = Nodes
        .Map((node, i) => i)
        .SortedArray(i => Nodes[i].ShownPosition().DistanceTo(eye))
        .FilteredArray(i => Nodes[i].ValidTarget());
    
    SelectedNodeIndex = tempNode.Length ? tempNode.First : -1;
    
    // Player and node found, choose one.
    if (SelectedPlayer != null && SelectedNodeIndex != -1)
    {
        if (Nodes[SelectedNodeIndex].ShownPosition().DistanceTo(eye) > SelectedPlayer.Position().DistanceTo(eye))
            SelectedNodeIndex = -1;
        else
            SelectedPlayer = null;
    }
    
    Number previouslySelectedNodeID = SelectedNodeID;
    
    if (SelectedNodeIndex == -1)
        SelectedNodeID = -1;
    else
        SelectedNodeID = Nodes[SelectedNodeIndex].Node.UniqueID;

    if (previouslySelectedNodeID != SelectedNodeID)
    {
        UpdateAttributeVisibility();

        // Get segment that contains both nodes.
        if (connectingFromNode == -1 || SelectedNodeID == -1)
            SelectedSegment = -1;
        else
        {
            Number[] tempSegment! = Segments.Map((s, i) => i).FilteredArray(i =>
                (Segments[i].Node1 == Nodes[SelectedNodeIndex].Node.UniqueID && Segments[i].Node2 == Nodes[connectingFromNode].Node.UniqueID) ||
                (Segments[i].Node2 == Nodes[SelectedNodeIndex].Node.UniqueID && Segments[i].Node1 == Nodes[connectingFromNode].Node.UniqueID));
            
            SelectedSegment = tempSegment == [] ? -1 : tempSegment.First; 
        }
    }

    MinWait();
    LoopIfConditionIsTrue();
}

rule: 'Main: Renderer'
if (Nodes.Length)
{
    // Nodes
    Number i;
    for (i = 0; Nodes.Length; 1)
    {
        UpdateNodeVisibility(i);
        MinWait();
    }

    // Segments
    for (i = 0; Segments.Length; 1)
    {
        UpdateSegmentVisibility(i);
        MinWait();
    }

    Wait(0.5);
    LoopIfConditionIsTrue();
}

public void UpdateNodeVisibility(Number index) 'Subroutine: Update node visibility'
{
    // Not visible.
    if (!Nodes[index].ShownPosition().IsInLineOfSight(eye))
    {
        if (Nodes[index].Visibility != 0)
        {
            DestroyEffect(Nodes[index].BallEffect);
            DestroyEffect(Nodes[index].RingEffect);
            Nodes[index].Visibility = 0;
        }
    }
    else
    {
        // Make visible
        if (Nodes[index].Visibility == 0)
        {
            Nodes[index].BallEffect = makeEffect(Effect.Sphere, Nodes[EvaluateOnce(index)].Color(), Nodes[EvaluateOnce(index)].ShownPosition(), NodeSize);
            Nodes[index].Visibility = 1;
        }

        // Ring effect
        if (Nodes[index].Node.Position.DistanceTo(eye) > 10)
        {
            if (Nodes[index].Visibility == 2)
            {
                DestroyEffect(Nodes[index].RingEffect);
                Nodes[index].Visibility = 1;
            }
        }
        else if (Nodes[index].Visibility == 1)
        {
            Nodes[index].RingEffect = makeEffect(Effect.Ring, Nodes[EvaluateOnce(index)].Color(), Nodes[EvaluateOnce(index)].Node.Position, NodeSize);
            Nodes[index].Visibility = 2;
        }
    }
}

public void UpdateSegmentVisibility(Number index) 'Subroutine: Update segment visibility'
{
    Number node1 = NodeIndexFromID(Segments[index].Node1);
    Number node2 = NodeIndexFromID(Segments[index].Node2);
    Number id = Segments[index].ID;

    // Visible
    if (Nodes[node1].Visibility ||
        Nodes[node2].Visibility)
    {
        if (!Segments[index].Effect)
        {
            Number segmentIndex: SegmentIndexFromID(EvaluateOnce(id));

            Segments[index].Effect = CreateBeamEffect(
                UpdateEveryFrame(editorState != EditorState.Node || attributeMode || SelectedSegment != segmentIndex || TotalTimeElapsed() % 1 < 0.5 ? AllPlayers() : null),
                BeamType.BrigitteFlailChainBeam,
                Nodes[NodeIndexFromID(Segments[segmentIndex].Node1)].ShownPosition(),
                Nodes[NodeIndexFromID(Segments[segmentIndex].Node2)].ShownPosition(),
                Color.White,
                EffectRev.VisibleTo
            );
        }
    }
    // Not visible
    else if (Segments[index].Effect)
    {
        DestroyEffect(Segments[index].Effect);
        Segments[index].Effect = null;
    }
}

public void UpdateAttributeVisibility() 'Subroutine: Update attribute visibility'
{
    while (AttributeTexts.Length)
    {
        DestroyInWorldText(AttributeTexts.First);
        AttributeTexts.ModRemoveByIndex(0);
    }

    // Show connected attributes.
    if (SelectedNodeID != -1)
    {
        define attributeIndices = Attributes.Map((s, i) => i).FilteredArray(
            i => Attributes[i].Node1 == SelectedNodeID || Attributes[i].Node2 == SelectedNodeID
        );
        
        while (attributeIndices.Length)
        {
            Vector p1 = Nodes[NodeIndexFromID(Attributes[attributeIndices.First].Node1)].ShownPosition();
            Vector p2 = Nodes[NodeIndexFromID(Attributes[attributeIndices.First].Node2)].ShownPosition();
            Boolean isSource = Attributes[attributeIndices.First].Node1 == SelectedNodeID;

            define group = attributeIndices.FilteredArray(i =>
                Attributes[attributeIndices.First].Node1 == Attributes[i].Node1 &&
                Attributes[attributeIndices.First].Node2 == Attributes[i].Node2
            );

            // Remove from attributeIndices the values in the current group.
            attributeIndices -= group;

            // Generate string
            String string! = '';
            while (group.Length)
            {
                string = ' {0}\n{1}'.Format([string, Attributes[group.First].Value]);
                group.ModRemoveByIndex(0);
            }

            AttributeTexts += CreateInWorldText(
                VisibleTo: AllPlayers(),
                Header: string,
                Position: p1 + (p2 - p1) * 0.3,
                Scale: 2.5,
                Clipping: Clipping.DoNotClip,
                Reevaluation: InworldTextRev.VisibleTo,
                TextColor: isSource ? Color.Yellow : CustomColor(255, 115, 0, 100)
            );
        }
    }
}