variables
{
    global:
        0: pfLoadedMap_nodes
        1: pfLoadedMap_neighbors
        2: pfIterationsThisTick
        3: pfExecOwner
        4: i
    player:
        0: pfWait
        1: pfDestination
        2: pfPlayerAttributes
        3: pfAttributes
        4: pfSavedTarget
        5: pfIsPathfinding
        6: pfCurrentNodeIndex
        7: pfWalkingToPosition
        8: pfPath
        9: pfStartTime
        10: pfWalkingFromPosition
        11: pfActiveNode
        12: pfStuckOnNode
        13: pfWasBroadcasted
        14: pfIsStuck
        15: goal
        16: scores_gScore
        17: scores_fScore
        18: scores_parent
        19: scores_nodeIndex
        20: open
        21: checkedNode
        22: iter
        23: current
        24: currentInExistingPath
        25: broadcastTo
        26: neighbor
        27: neighborI
        28: scoreIndex
        29: score
}

subroutines
{
    0: pfTick
    1: pfUpdateNodeMeta
    2: pfWalkToDestination
    3: pfProgressEventPlayer
    4: pfRecalibrate
    5: pfLookAtDestination
}

rule("【PF Core】Prepare loaded map")
{

    event
    {
        Ongoing - Global;
    }

    actions
    {
        Wait Until(Global.pfLoadedMap_nodes, 9999);
        For Global Variable(i, 0, Count Of(Global.pfLoadedMap_nodes), 1);
            Global.pfLoadedMap_nodes[Global.i] = Vector(X Component Of(Global.pfLoadedMap_nodes[Global.i]), Round To Integer(Y Component Of(Global.pfLoadedMap_nodes[Global.i]), Down) + Global.i / 1000 * (Y Component Of(Global.pfLoadedMap_nodes[Global.i]) < 0 ? -1 : 1), Z Component Of(Global.pfLoadedMap_nodes[Global.i]));
        End;
    }
}

rule("【PF Core】Select next pathfinder")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        (!Entity Exists(Global.pfExecOwner) || Global.pfExecOwner == Null) == True;
        Is True For Any(All Players(All Teams), Current Array Element.pfWait) == True;
    }

    actions
    {
        Global.pfExecOwner = First Of(Sorted Array(Filtered Array(All Players(All Teams), Current Array Element.pfWait), Current Array Element.pfWait));
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("【PF Core Subroutine】☞ Tick")
{

    event
    {
        Subroutine;
        pfTick;
    }

    actions
    {
        Global.pfIterationsThisTick -= 1;
        If(Global.pfIterationsThisTick <= 0);
            Wait(0.016, Ignore Condition);
            Wait Until(Max(Server Load Average, Server Load) < 255, 0.25);
            "This determines the pathfinding budget for the current tick."
            Global.pfIterationsThisTick = (Max(Server Load Average, Server Load) < 230) + (Max(Server Load Average, Server Load) < 180) * 2 + 1;
        End;
    }
}

rule("【PF Core Subroutine】☞ Update node meta")
{

    event
    {
        Subroutine;
        pfUpdateNodeMeta;
    }

    actions
    {
        If(Event Player.pfCurrentNodeIndex != -1);
            Event Player.pfActiveNode = Event Player.pfCurrentNodeIndex;
        End;
        If(Event Player.pfStuckOnNode == 1);
            Event Player.pfStuckOnNode = 0;
        End;
        "Update the pathfinding start time."
        Event Player.pfStartTime = Total Time Elapsed;
        Event Player.pfWalkingFromPosition = Position Of(Event Player);
    }
}

rule("☆【PF Core Subroutine】☞ Walk to destination")
{

    event
    {
        Subroutine;
        pfWalkToDestination;
    }

    actions
    {
        Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), Event Player.pfWalkingToPosition), Event Player.pfWalkingToPosition && (Event Player.pfCurrentNodeIndex != -1 || Distance Between(Position Of(Event Player), Event Player.pfWalkingToPosition) > 0.4), To World, Replace Existing Throttle, Direction And Magnitude);
    }
}

rule("【PF Core】Update & Execute")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Event Player.pfDestination == True;
        Distance Between(Event Player, Event Player.pfDestination) > 4;
        (!Event Player.pfSavedTarget || Distance Between(Event Player.pfDestination, Event Player.pfSavedTarget) > 5) == True;
    }

    actions
    {
        "Ensure that a map is loaded."
        If(!Global.pfLoadedMap_nodes);
            Log To Inspector(Custom String("Error: Attempted to pathfind player {0} without a loaded map.", Event Player));
            Abort;
        End;
        Event Player.pfWait = Total Time Elapsed;
        Event Player.pfWasBroadcasted = False;
        Wait Until(Global.pfExecOwner == Event Player || Event Player.pfWasBroadcasted, 9999);
        "Update saved destination"
        Event Player.pfSavedTarget = Event Player.pfDestination;
        If(!Event Player.pfWasBroadcasted);
            Event Player.goal = Round To Integer(Absolute Value(Y Component Of(First Of(Sorted Array(Array Slice(Sorted Array(Global.pfLoadedMap_nodes, Distance Between(Current Array Element, Event Player.pfSavedTarget)), 0, 5), !Is In Line Of Sight(Current Array Element + Vector(0, 2, 0), Event Player.pfSavedTarget + Vector(0, 2, 0), Barriers Do Not Block LOS))))) * 1000 % 1000, Down);
            Call Subroutine(pfTick);
            If(Event Player.pfIsPathfinding && Event Player.pfCurrentNodeIndex != -1);
                Event Player.pfActiveNode = Event Player.pfCurrentNodeIndex;
            Else;
                Event Player.pfActiveNode = Round To Integer(Absolute Value(Y Component Of(First Of(Sorted Array(Array Slice(Sorted Array(Global.pfLoadedMap_nodes, Distance Between(Current Array Element, Position Of(Event Player))), 0, 5), !Is In Line Of Sight(Current Array Element + Vector(0, 2, 0), Position Of(Event Player) + Vector(0, 2, 0), Barriers Do Not Block LOS))))) * 1000 % 1000, Down);
                Call Subroutine(pfTick);
            End;
            Event Player.scores_gScore = Array(0);
            Event Player.scores_fScore = Array(0);
            Event Player.scores_parent = Array(-1);
            Event Player.scores_nodeIndex = Array(Event Player.goal);
            Event Player.open = Array(0);
            Event Player.checkedNode = Event Player.pfActiveNode;
            Event Player.iter = 0;
            While(Count Of(Event Player.open) || Event Player.iter > 30);
                "The index of the current node in `scores`."
                Event Player.current = First Of(Sorted Array(Event Player.open, Event Player.scores_fScore[Current Array Element]));
                If(Event Player.checkedNode != Event Player.pfActiveNode);
                    Event Player.checkedNode = Index Of Array Value(Event Player.scores_nodeIndex, Event Player.pfActiveNode);
                    If(Event Player.checkedNode != -1);
                        Event Player.current = Event Player.checkedNode;
                        Event Player.checkedNode = -2;
                    Else;
                        Event Player.checkedNode = Event Player.pfActiveNode;
                    End;
                End;
                Event Player.currentInExistingPath = Index Of Array Value(Event Player.pfPath, Event Player.scores_nodeIndex[Event Player.current]);
                "If the goal was found, reconstruct the path."
                If(Event Player.scores_nodeIndex[Event Player.current] == Event Player.pfActiveNode || Event Player.checkedNode == -2 || Event Player.currentInExistingPath != -1);
                    If(Event Player.currentInExistingPath == -1);
                        Event Player.pfPath = Empty Array;
                    Else;
                        Event Player.pfPath = Array Slice(Event Player.pfPath, 0, Event Player.currentInExistingPath);
                    End;
                    While(Event Player.current != -1);
                        Modify Player Variable(Event Player, pfPath, Append To Array, Event Player.scores_nodeIndex[Event Player.current]);
                        Event Player.current = Event Player.scores_parent[Event Player.current];
                    End;
                    Modify Player Variable(Event Player, pfPath, Append To Array, Array(-1));
                    Event Player.broadcastTo = Filtered Array(Players Within Radius(Position Of(Event Player) + Up, 4, All Teams, Off), Current Array Element != Event Player && Current Array Element.pfWait && Distance Between(Current Array Element.pfDestination, Event Player.pfDestination) < 4 && Current Array Element.pfPlayerAttributes == Event Player.pfPlayerAttributes);
                    Event Player.broadcastTo.pfPath = Event Player.pfPath;
                    Event Player.broadcastTo.pfWasBroadcasted = True;
                    Skip(27);
                End;
                Modify Player Variable(Event Player, open, Remove From Array By Value, Event Player.current);
                "Check each neighbor to the current node."
                For Player Variable(Event Player, neighbor, 0, Count Of(Global.pfLoadedMap_neighbors[Event Player.scores_nodeIndex[Event Player.current]]), 1);
                    "The neighbor index to be used like `pfLoadedMap.nodes[neighborI]`."
                    Event Player.neighborI = First Of(Global.pfLoadedMap_neighbors[Event Player.scores_nodeIndex[Event Player.current]][Event Player.neighbor]);
                    Event Player.scoreIndex = Index Of Array Value(Event Player.scores_nodeIndex, Event Player.neighborI);
                    "Ensure that the path to the neighbor is enabled."
                    If(Count Of(Global.pfLoadedMap_neighbors[Event Player.scores_nodeIndex[Event Player.current]][Event Player.neighbor][1]) == 0 || Is True For Any(Global.pfLoadedMap_neighbors[Event Player.scores_nodeIndex[Event Player.current]][Event Player.neighbor][1], Array Contains(Event Player.pfPlayerAttributes, Current Array Element)));
                        Event Player.score = Event Player.scores_gScore[Event Player.current] + Distance Between(Global.pfLoadedMap_nodes[Event Player.scores_nodeIndex[Event Player.current]], Global.pfLoadedMap_nodes[Event Player.neighborI]);
                        "Get neighbor index in scores.
If -1, the neighbor was not added to the score list yet."
                        If(Event Player.scoreIndex == -1);
                            Modify Player Variable(Event Player, open, Append To Array, Count Of(Event Player.scores_gScore));
                            Modify Player Variable(Event Player, scores_gScore, Append To Array, Event Player.score);
                            Modify Player Variable(Event Player, scores_fScore, Append To Array, Event Player.score + Distance Between(Global.pfLoadedMap_nodes[Event Player.neighborI], Global.pfLoadedMap_nodes[Event Player.pfActiveNode]) * 20);
                            Modify Player Variable(Event Player, scores_parent, Append To Array, Event Player.current);
                            Modify Player Variable(Event Player, scores_nodeIndex, Append To Array, Event Player.neighborI);
                            Else If(Event Player.score < Event Player.scores_gScore[Event Player.scoreIndex]);
                            Event Player.scores_gScore[Event Player.scoreIndex] = Event Player.score;
                            Event Player.scores_fScore[Event Player.scoreIndex] = Event Player.score + Distance Between(Global.pfLoadedMap_nodes[Event Player.neighborI], Global.pfLoadedMap_nodes[Event Player.pfActiveNode]) * 20;
                            Event Player.scores_parent[Event Player.scoreIndex] = Event Player.current;
                            Event Player.scores_nodeIndex[Event Player.scoreIndex] = Event Player.neighborI;
                            If(!Array Contains(Event Player.open, Event Player.scoreIndex));
                                Modify Player Variable(Event Player, open, Append To Array, Event Player.scoreIndex);
                            End;
                        End;
                    End;
                    Call Subroutine(pfTick);
                End;
                Event Player.iter += 1;
            End;
            Global.pfExecOwner = Null;
        End;
        If(Count Of(Event Player.pfPath));
            Event Player.pfIsPathfinding = True;
            Event Player.pfCurrentNodeIndex = First Of(Event Player.pfPath);
            Event Player.pfWalkingToPosition = Global.pfLoadedMap_nodes[Event Player.pfCurrentNodeIndex];
            Call Subroutine(pfUpdateNodeMeta);
            Call Subroutine(pfWalkToDestination);
        End;
        Event Player.pfWait = Null;
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("【PF Core Subroutine】☞ Progress event player")
{

    event
    {
        Subroutine;
        pfProgressEventPlayer;
    }

    actions
    {
        If(Count Of(Event Player.pfPath) == 0);
            Skip(10);
        End;
        "Pop the current path."
        Modify Player Variable(Event Player, pfPath, Remove From Array By Index, 0);
        "Update the current pathfind attributes."
        If(Count Of(Event Player.pfPath) && First Of(Event Player.pfPath) != -1);
            "Any rules watching these with the matching condition will activate."
            Event Player.pfAttributes = Last Of(First Of(Filtered Array(Global.pfLoadedMap_neighbors[First Of(Event Player.pfPath)], First Of(Current Array Element) == Event Player.pfCurrentNodeIndex)));
        Else;
            Event Player.pfAttributes = Empty Array;
        End;
        "Go to the next node in the path."
        Event Player.pfCurrentNodeIndex = First Of(Event Player.pfPath);
        "Set the position that the player is currently walking towards."
        Event Player.pfWalkingToPosition = Event Player.pfCurrentNodeIndex == -1 ? (Distance Between(Event Player.pfDestination, Event Player.pfSavedTarget) <= 4 ? Event Player.pfDestination : Position Of(Event Player)) : Global.pfLoadedMap_nodes[Event Player.pfCurrentNodeIndex];
        Call Subroutine(pfUpdateNodeMeta);
    }
}

rule("【PF Core】Node reached")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Event Player.pfIsPathfinding == True;
        Event Player.pfWalkingToPosition == True;
        Distance Between(Position Of(Event Player) * Vector(1, Empty Array, 1), Event Player.pfWalkingToPosition * Vector(1, Empty Array, 1)) <= 0.4;
        Absolute Value(Y Component Of(Position Of(Event Player)) - Y Component Of(Event Player.pfWalkingToPosition)) <= 1.5;
        Count Of(Event Player.pfPath) > 0;
        Event Player.pfCurrentNodeIndex != -1;
    }

    actions
    {
        Call Subroutine(pfProgressEventPlayer);
        Wait(0.2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("【PF Core】Stop throttle when pfDestination is reset")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Event Player.pfIsPathfinding == True;
        Event Player.pfDestination == Null;
    }

    actions
    {
        Stop Throttle In Direction(Event Player);
        Event Player.pfIsPathfinding = False;
        Event Player.pfSavedTarget = Null;
    }
}

rule("【PF Core Subroutine】☞ Recalibrate")
{

    event
    {
        Subroutine;
        pfRecalibrate;
    }

    actions
    {
        Stop Throttle In Direction(Event Player);
        Event Player.pfCurrentNodeIndex = -1;
        Event Player.pfSavedTarget = Null;
        Event Player.pfIsPathfinding = False;
        Event Player.pfWalkingToPosition = Position Of(Event Player);
    }
}

rule("【PF Core】Insurance")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Event Player.pfIsPathfinding == True;
        Event Player.pfWalkingToPosition == True;
    }

    actions
    {
        "Recalibrate"
        If(Distance Between((Event Player.pfWalkingFromPosition + Event Player.pfWalkingToPosition) / 2, Event Player) > (Distance Between(Event Player.pfWalkingFromPosition, Event Player.pfWalkingToPosition) + 2) * 1.2);
            Call Subroutine(pfRecalibrate);
            "Smooth step"
            Else If(Count Of(Event Player.pfPath) == 2 && Distance Between(Event Player, Event Player.pfSavedTarget) < Distance Between(Event Player.pfWalkingToPosition, Event Player.pfSavedTarget) && Is In Line Of Sight(Position Of(Event Player) + Vector(0, 0.25, 0), Event Player.pfSavedTarget + Vector(0, 0.25, 0), Barriers Do Not Block LOS));
            Call Subroutine(pfProgressEventPlayer);
            "Recovery"
            Else If(Distance Between(Event Player, Event Player.pfWalkingToPosition) > 0.25 && Event Player.pfIsStuck || Distance Between(Event Player.pfWalkingFromPosition, Event Player.pfWalkingToPosition) - 4.95 * (Total Time Elapsed - Event Player.pfStartTime) < 0 && !Has Status(Event Player, Rooted) && !Has Status(Event Player, Frozen) && !Has Status(Event Player, Asleep) && !Has Status(Event Player, Knocked Down) && !Has Status(Event Player, Stunned));
            If(Event Player.pfCurrentNodeIndex == -1);
                Event Player.pfWalkingToPosition = Null;
                Else If(Event Player.pfStuckOnNode - 2 == Event Player.pfCurrentNodeIndex);
                Log To Inspector(Custom String("Pathfinder {0} struggled to reach node {1} at {2}. Try adjusting your map in the editor.", Event Player, Event Player.pfCurrentNodeIndex, Global.pfLoadedMap_nodes[Event Player.pfCurrentNodeIndex]));
                Teleport(Event Player, Event Player.pfWalkingToPosition);
            Else;
                Event Player.pfStuckOnNode = Event Player.pfCurrentNodeIndex + 2;
                Call Subroutine(pfRecalibrate);
            End;
            "Shift destination"
            Else If(Event Player.pfWalkingToPosition != Event Player.pfDestination && Event Player.pfCurrentNodeIndex == -1 && Distance Between(Event Player.pfSavedTarget, Event Player.pfDestination) < 5 && Is In Line Of Sight(Event Player.pfSavedTarget + Up, Event Player.pfDestination + Up, Barriers Do Not Block LOS));
            Event Player.pfWalkingToPosition = Event Player.pfDestination;
        End;
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("【PF Core】Check throttle")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Event Player.pfIsPathfinding == True;
        Magnitude Of(Velocity Of(Event Player)) < 3;
    }

    actions
    {
        Wait(2.1, Abort When False);
        Event Player.pfIsStuck = True;
        Wait Until(!Event Player.pfWalkingToPosition || !Event Player.pfIsPathfinding || Magnitude Of(Velocity Of(Event Player)) >= 3, 9999);
        Event Player.pfIsStuck = False;
    }
}

rule("☆【PF Core Subroutine】☞ Look at destination")
{

    event
    {
        Subroutine;
        pfLookAtDestination;
    }

    actions
    {
        "Calling this subroutine will make the player look to the point they are walking towards."
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player) * (Distance Between(Position Of(Event Player), Event Player.pfWalkingToPosition) < 3 ? Vector(1, Empty Array, 1) : Vector(1, 1, 1)), (Event Player.pfWalkingToPosition + Vector(0, 1.5, 0)) * (Distance Between(Position Of(Event Player), Event Player.pfWalkingToPosition) < 3 ? Vector(1, Empty Array, 1) : Vector(1, 1, 1))), 500, To World, Direction And Turn Rate);
    }
}
