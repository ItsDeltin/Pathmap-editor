struct PfMap
{
    # The points in the map.
    public Vector[] nodes;
    # `[node][i][0]` = neighbor index,
    # `[node][i][1][j]` = attributes
    public Any[][][] neighbors;
}

# The currently loaded map
globalvar PfMap loadedMap;
# If true, will trigger the Update Current Path rule.
playervar Boolean pfUpdatePath;
# The final pathfinding target.
playervar Vector pfDestination;
# Determines if the player is pathfinding.
playervar Boolean pfIsPathfinding;
# The current node that the player is walking to.
# If this is -1 but `pfIsPathfinding` is true, then the player
# is walking to `pfDestination`.
playervar Number pfCurrentNode;
# The attributes of a player's current pathfinding edge.
playervar Number[] pfAttributes;
# The nextNode array for pathfinding.
playervar Number[] pfPath;

rule: 'Pathfinder: Throttle to next node'
Event.OngoingPlayer
if (pfUpdatePath)
{
    StartThrottleInDirection(
        EventPlayer(),
        PositionOf().DirectionTowards(
            pfCurrentNode == -1 ? pfDestination : loadedMap.nodes[pfCurrentNode]
        ),
        1,
        Relative.ToWorld,
        ThrottleBehavior.ReplaceExistingThrottle,
        ThrottleRev.DirectionAndMagnitude
    );
    pfUpdatePath = false;
}

rule: 'Pathfinder: Node reached'
Event.OngoingPlayer
if (pfIsPathfinding)
if (EventPlayer().DistanceTo(pfCurrentNode == -1 ? pfDestination : loadedMap.nodes[pfCurrentNode]) <= 0.4)
{
    if (pfCurrentNode == -1) {
        StopThrottleInDirection(EventPlayer());
        # Stop pathfinding.
        pfIsPathfinding = false;
    } else {
        pfAttributes = loadedMap.neighbors[pfCurrentNode].FilteredArray(segment => segment[0] == pfPath.Last).First.Last;
        pfCurrentNode = pfPath.Last;
        pfPath.ModRemoveByIndex(pfPath.Length - 1);
    }
    Wait(0.2);
    LoopIfConditionIsTrue();
}

# Selects a node index from a position.
Number chooseNodeFromPosition(in Vector vector)
{
    Vector closestNode = loadedMap.nodes
        .SortedArray(n => n.DistanceTo(vector))
        .Slice(0, 5)
        .SortedArray(n => !IsInLineOfSight(n + Up() * 2, vector + Up() * 2))
        .First;
    
    return loadedMap.nodes.IndexOf(closestNode);
}

void pathfindPlayer(Player player, Vector destination, Number[] attributes) globalvar 'Subroutine: Pathfind Player'
{
    Number start = chooseNodeFromPosition(player.Position());
    Number goal = chooseNodeFromPosition(destination);
    player.pfPath = aStar(loadedMap, start, goal, attributes);
    player.pfDestination = destination;
    player.pfIsPathfinding = true;
    player.pfUpdatePath = true;
    player.pfCurrentNode = player.pfPath.Last;
}

# Gets the shortest path from start to goal.
# - `map`: The input map.
# - `start`: Index of the starting node.
# - `goal`: Index of the goal node.
Number[] aStar(in PfMap map, in Number start, in Number goal, in Number[] attributes) {
    Number heuristicWeight: 2;
    const Number => Number h: n => map.nodes[n].DistanceTo(map.nodes[goal]) * heuristicWeight;

    Number[] open = [start];
    Number[] cameFrom = map.nodes.Map(n => -1);
    Number[] gScore = map.nodes.Map(n => 9999);
    gScore[start] = 0;
    Number iter = 0;

    while (open.Length) {
        Number current = open.SortedArray((o, i) => gScore[o] + h(o)).First;
        # If the goal was found, reconstruct the path.
        if (current == goal) {
            SmallMessage(AllPlayers(), <'Completed in <0> iterations', iter>);
            return reconstructPath(cameFrom, current);
        }
        
        open.ModRemoveByValue(current);

        foreach (Any[] neighbor in map.neighbors[current]) {
            if ((<Number[]>neighbor[1]).IsTrueForAll(a => attributes.Contains(a))) {
                Number neighborI = neighbor[0];
                define score = gScore[current] + map.nodes[current].DistanceTo(map.nodes[neighborI]);
                if (score < gScore[neighborI]) {
                    cameFrom[neighborI] = current;
                    gScore[neighborI] = score;
                    if (!open.Contains(neighborI))
                        open += neighborI;
                }
            }
        }
        iter++;
    }

    return [];
}

Number[] reconstructPath(in Number[] cameFrom, ref Number current)
{
    Number[] path = [-1];
    while (current != -1) {
        path += current;
        current = cameFrom[current];
    }
    return path;
}

// ! DEBUG !
void waitForClick()
{
    WaitUntil(IsButtonHeld(HostPlayer(), Button.PrimaryFire), 9999);
    WaitUntil(!IsButtonHeld(HostPlayer(), Button.PrimaryFire), 0.05);
}

Vector ray: RayCastHitPosition(EyePosition(HostPlayer()), EyePosition(HostPlayer()) + FacingDirectionOf(HostPlayer()) * 100, null, HostPlayer(), false);

rule: 'DEBUG: Pathfind dummy bots to cursor'
if (IsButtonHeld(HostPlayer(), Button.Melee))
{
    // Get raycast position
    Vector rayCast = ray;

    Player[] dummies = AllPlayers().FilteredArray(p => p.IsDummy());

    // Pathfind each dummy bot in the game.
    DestroyAllEffects();
    foreach (Player player in dummies) {
        pathfindPlayer(player, rayCast, [0, 1, 2, 3]);
        MinWait();
    }
}

rule: 'DEBUG: Create dummy bot'
if (IsButtonHeld(HostPlayer(), Button.Interact))
{
    CreateDummyBot(Hero.Ashe, Team.Team1, -1, ray);
}

rule: 'DEBUG: Reset dummies'
if (IsButtonHeld(HostPlayer(), Button.Crouch))
{
    Teleport(AllPlayers().FilteredArray(p => p.IsDummy()), HostPlayer());
}

rule: 'DEBUG: Host disable'
if (HasSpawned(HostPlayer()))
{
    SetPrimaryFireEnabled(HostPlayer(), false);
    SetMeleeEnabled(HostPlayer(), false);
}

rule: 'DEBUG: server load'
{
    CreateHudText(AllPlayers(), Text: <'CAP: <0>, <1>, <2>', ServerLoad(), ServerLoadAverage(), ServerLoadPeak()>);
}