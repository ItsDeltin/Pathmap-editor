struct PfMap {
    # The points in the map.
    public Vector[] nodes;
    # `[node][i][0]` = neighbor index,
    # `[node][i][1][j]` = attributes
    public Any[][][] neighbors;
}

struct PfNode {
    public Number gScore;
    public Number fScore;
    public Number parent;
    public Number nodeIndex;
}

# The currently loaded map
globalvar PfMap pfLoadedMap;
globalvar Number pfIterationsThisTick;

# The final pathfinding target.
playervar Vector pfDestination;
# The attributes assigned to the player.
playervar Number[] pfPlayerAttributes;
# The attributes of a player's current pathfinding edge.
playervar Number[] pfAttributes;

# The saved target. If the distance between this and pfDestination becomes
# too large, the pathfinding path will be updated.
playervar Vector pfSavedTarget;
# Determines if the player is pathfinding.
playervar Boolean pfIsPathfinding;
# The current node that the player is walking to.
# If this is -1 but `pfIsPathfinding` is true, then the player
# is walking to `pfDestination`.
playervar Number pfCurrentNodeIndex;
# The position that the player is actively walking towards.
playervar Vector pfWalkingToPosition;
# The path that the player will walk along. These are indexes in
# `pfLoadedMap.nodes`. A value of `-1` will point to `pfDestination`.
playervar Number[] pfPath;
# The timestamp when the player reaches a node.
playervar Number pfStartTime;
# The position the player was at when they started walking to `pfWalkingToPosition`.
playervar Vector pfWalkingFromPosition;
# The position the player will walk to after reaching `pfWalkingToPosition`.
playervar Vector pfNextPosition;
# The node closest to the player.
playervar Number pfActiveNode;
# This variable is set when a player fails to reaches a node.
playervar Number pfStuckOnNode;

playervar DbgEvent[] dbgEvents = [];
struct DbgEvent { public String name; public Number timeStamp; }

void event(String text) playervar 'dbg Event' {
    dbgEvents += {
        name: text,
        timeStamp: TotalTimeElapsed()
    };
    while (dbgEvents.Length > 10) {
        dbgEvents.ModRemoveByIndex(0);
    }
}

rule: '【PF Core】Next Tick'
if (pfIterationsThisTick <= 0)
if (ServerLoadAverage() < 255)
{
    pfIterationsThisTick = Max(Min(RoundToInteger(63 - ServerLoadAverage() / 4, Rounding.Nearest), 15), 2);
    Wait(ServerLoadAverage() < 255 ? 0.016 : 0.3);
    LoopIfConditionIsTrue();
}

void pfTick() '【PF Core Subroutine】☞ Tick'
{        
    while (pfIterationsThisTick <= 0) {
        WaitUntil(pfIterationsThisTick > 0, 9999);
    }
    pfIterationsThisTick--;
}

rule: '【PF Core】Update & Execute'
Event.OngoingPlayer
if (pfDestination)
if (EventPlayer().DistanceTo(pfDestination) > 4)
if (!pfSavedTarget || pfDestination.DistanceTo(pfSavedTarget) > 5)
{
    # Ensure that a map is loaded.
    if (!pfLoadedMap.nodes)
    {
        LogToInspector(<'Error: Attempted to pathfind player <0> without a loaded map.', EventPlayer()>);
        return;
    }
    event('PF Execute');
    
    # Update saved destination
    aStar();
    pfSavedTarget = pfDestination;
    pfIsPathfinding = true;
    pfCurrentNodeIndex = pfPath.First;
    pfWalkingToPosition = pfLoadedMap.nodes[pfCurrentNodeIndex];
    UpdateNodeMeta();
    pfWalkToDestination();
    Wait(2);
    LoopIfConditionIsTrue();
}

rule: '【PF Core】Node reached'
Event.OngoingPlayer
if (pfIsPathfinding)
if (EventPlayer().DistanceTo(pfWalkingToPosition) <= 0.4) {
    # The player reached the next node in the path to the destination.
    if (pfCurrentNodeIndex == -1) {
        event('Reached destination');
        # The destination was reached, stop pathfinding.
        pfIsPathfinding = false;
    } else {
        ProgressEventPlayer();
    }
    Wait(0.2);
    LoopIfConditionIsTrue();
}

rule: '【PF Core】(optional) Stop throttle when pfDestination is reset'
Event.OngoingPlayer
if (pfIsPathfinding)
if (pfDestination == null)
{
    StopThrottleInDirection();
    pfIsPathfinding = false;
}

rule: '【PF Core】(optional) Recalibrate when off the path'
Event.OngoingPlayer
if (pfIsPathfinding)
if (((pfWalkingFromPosition + pfWalkingToPosition) / 2).DistanceTo(EventPlayer()) > pfWalkingFromPosition.DistanceTo(pfWalkingToPosition) * 2)
{
    Wait(2, WaitBehavior.AbortWhenFalse);
    SmallMessage(AllPlayers(), <'Recalibrating <0>', EventPlayer()>);
    event('Not on path; recalibrating.');
    pfRecalibrate();
}

disabled rule: '【PF Core】(optional) Skip node when shortcut is found'
Event.OngoingPlayer
if (pfIsPathfinding)
if (pfCurrentNodeIndex != -1)
if (IsInLineOfSight(PositionOf() + Up() * 0.25, pfNextPosition + Up() * 0.25))
if ((PositionOf().Y - pfNextPosition.Y).Abs() < 1)
{
    Wait(0.1);
    ProgressEventPlayer();
    LoopIfConditionIsTrue();
}

rule: '【PF Core】(optional) Recover when stuck or time to next node takes longer than expected'
Event.OngoingPlayer
if (pfIsPathfinding)
if (PositionOf().DistanceTo(pfDestination) > 5)
if (VelocityOf().Magnitude < 3 || pfWalkingFromPosition.DistanceTo(pfWalkingToPosition) - 5.5 * 0.9 * (TotalTimeElapsed() - pfStartTime) < 0)
if (!HasStatus(EventPlayer(), Status.Rooted))
if (!HasStatus(EventPlayer(), Status.Frozen))
if (!HasStatus(EventPlayer(), Status.Asleep))
if (!HasStatus(EventPlayer(), Status.KnockedDown))
if (!HasStatus(EventPlayer(), Status.Stunned))
{
    # Ensure condition is true for at least 3 seconds.
    Wait(3, WaitBehavior.AbortWhenFalse);
    # When the bot gets stuck while pathfinding,
    if (pfStuckOnNode - 2 == pfCurrentNodeIndex) {
        event('Stuck, teleporting');
        if (pfCurrentNodeIndex != -1) {
            LogToInspector(<'Pathfinder <0> struggled to reach node <1> at <2>. Try adjusting your map in the editor.', EventPlayer(), pfCurrentNodeIndex, pfLoadedMap.nodes[pfCurrentNodeIndex]>);
        }
        Teleport(EventPlayer(), pfWalkingToPosition);
    } else {
        event('Stuck, recalibrating');
        pfStuckOnNode = pfCurrentNodeIndex + 2;
        pfRecalibrate();
    }
    LoopIfConditionIsTrue();
}

void ProgressEventPlayer() playervar '【PF Core Subroutine】☞ Progress event player' {
    // Remove after debugging
    if (pfPath.Length == 0) {
        event('Logic error: progress without any more path');
        return;
    }

    event('Node progressed');
    # Update the current pathfind attributes.
    # Any rules watching these with the matching condition will activate.
    pfAttributes = pfLoadedMap.neighbors[pfCurrentNodeIndex].FilteredArray(segment => segment[0] == pfPath.First).First.Last;
    # Go to the next node in the path.
    pfCurrentNodeIndex = pfPath.First;
    # Pop the current path.
    pfPath.ModRemoveByIndex(0);
    # Set the position that the player is currently walking towards.
    pfWalkingToPosition = pfCurrentNodeIndex == -1 ? pfDestination : pfLoadedMap.nodes[pfCurrentNodeIndex];
    UpdateNodeMeta();
}

void UpdateNodeMeta() playervar '【PF Core Subroutine】☞ Update node meta' {
    if (pfCurrentNodeIndex != -1) {
        pfActiveNode = pfCurrentNodeIndex;
    }
    if (pfStuckOnNode == 1) {
        pfStuckOnNode = 0;
    }
    # Update the pathfinding start time.
    pfStartTime = TotalTimeElapsed();
    pfWalkingFromPosition = PositionOf();
    pfNextPosition = pfPath.Length == 0 ? 0 : pfLoadedMap.nodes[pfPath.First];
}

void pfRecalibrate() playervar '【PF Core Subroutine】☞ Recalibrate' {
    StopThrottleInDirection();
    pfCurrentNodeIndex = -1;
    pfSavedTarget = null;
    pfIsPathfinding = false;
}

void pfWalkToDestination() playervar '☆【PF Core Subroutine】☞ Walk to destination' {
    StartThrottleInDirection(
        EventPlayer(),
        PositionOf().DirectionTowards(pfCurrentNodeIndex == -1 && pfDestination.DistanceTo(pfSavedTarget) < 6 ? pfDestination : pfWalkingToPosition),
        PositionOf().DistanceTo(pfDestination),
        Relative.ToWorld,
        ThrottleBehavior.ReplaceExistingThrottle,
        ThrottleRev.DirectionAndMagnitude);
}

void pfLookAtDestination() playervar '☆【PF Core Subroutine】☞ Look at destination' {
    Vector distanceModifier: (PositionOf().DistanceTo(pfWalkingToPosition) < 3 ? Vector(1,0,1) : Vector(1,1,1));
    # Calling this subroutine will make the player look to the point they are walking towards.
    StartFacing(EventPlayer(), DirectionTowards(EyePosition() * distanceModifier, (pfWalkingToPosition + Up() * 1.5) * distanceModifier), 1000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
}

# Selects a node index from a position.
Number chooseNodeFromPosition(in Vector vector) {
    return pfLoadedMap.nodes.IndexOf(pfLoadedMap.nodes
        .SortedArray(n => n.DistanceTo(vector))
        .Slice(0, 5)
        .SortedArray(n => !(IsInLineOfSight(n + Up() * 2, vector + Up() * 2) && (vector.Y - n.Y).Abs() < vector.DistanceTo(n) / 2))
        .First);
}

# Gets the shortest path from start to goal.
void aStar() {
    Number goal = chooseNodeFromPosition(pfDestination);
    pfTick();
    if (pfIsPathfinding && pfCurrentNodeIndex != -1) {
        pfActiveNode = pfCurrentNodeIndex;
    } else {
        pfActiveNode = chooseNodeFromPosition(PositionOf());
        pfTick();
    }

    Number heuristicWeight: 20;
    const Number => Number h: n => (pfLoadedMap.nodes[n]).DistanceTo(pfLoadedMap.nodes[pfActiveNode]) * heuristicWeight;

    PfNode[] scores = [{ parent: -1, gScore: 0, fScore: 0, nodeIndex: goal }];
    Number[] open = [0];
    Number checkedNode = pfActiveNode;

    Number iter = 0;
    while (open.Length) {
        // Debug
        // Any[] icons = [];
        // foreach (Number o in open) {
        //     icons += CreateInWorldText(AllPlayers(), scores[o].nodeIndex, pfLoadedMap.nodes[scores[o].nodeIndex], 2, Clipping.DoNotClip, InworldTextRev.VisibleTo, Color.White);
        // }
        // WaitForClick();
        // foreach (Any icon in icons) {
        //     DestroyInWorldText(icon);
        // }

        Number current = open.SortedArray((o, i) => scores[o].fScore).First;
        Number currentNodeIndex: scores[current].nodeIndex;

        if (checkedNode != pfActiveNode) {
            checkedNode = scores.Map(s => s.nodeIndex).IndexOf(pfActiveNode);
            if (checkedNode != -1) {
                current = checkedNode;
                reconstructPath(scores, current);
                return;
            }
            checkedNode = pfActiveNode;
        }

        # If the goal was found, reconstruct the path.
        if (currentNodeIndex == pfActiveNode) {
            // pfIsPartialPath = iter == 20;
            reconstructPath(scores, current);
            return;
        }

        // Any[] neighborIcons = [CreateInWorldText(AllPlayers(), currentNodeIndex, pfLoadedMap.nodes[currentNodeIndex], 2, Clipping.DoNotClip, InworldTextRev.VisibleTo, Color.Rose)];
        open.ModRemoveByValue(current);

        # Check each neighbor to the current node.
        foreach (Any[] neighbor in pfLoadedMap.neighbors[currentNodeIndex]) {
            # The neighbor index to be used like `pfLoadedMap.nodes[neighborI]`.
            Number neighborI = neighbor[0];
            Number scoreIndex = scores.Map(s => s.nodeIndex).IndexOf(neighborI);

            // Color neighborColor = Color.Red;
            # Ensure that the path to the neighbor is enabled.
            if ((<Number[]>neighbor[1]).IsTrueForAll(a => pfPlayerAttributes.Contains(a))) {
                // neighborColor = Color.Green;
                Number score = scores[current].gScore + pfLoadedMap.nodes[currentNodeIndex].DistanceTo(pfLoadedMap.nodes[neighborI]);

                # Get neighbor index in scores.
                # If -1, the neighbor was not added to the score list yet.
                if (scoreIndex == -1) {
                    # Note: not required after debugging.
                    // scoreIndex = scores.Length;
                    open += scores.Length;
                    scores += { parent: current, gScore: score, fScore: score + h(neighborI), nodeIndex: neighborI };
                } else if (score < scores[scoreIndex].gScore) {
                    scores[scoreIndex] = { parent: current, gScore: score, fScore: score + h(neighborI), nodeIndex: neighborI };
                    if (!open.Contains(scoreIndex))
                        open += scoreIndex;
                }
                // else {
                //     neighborColor = Color.Blue;
                // }

            }
            pfTick();
            // neighborIcons += CreateInWorldText(AllPlayers(), scores[scoreIndex].nodeIndex, pfLoadedMap.nodes[scores[scoreIndex].nodeIndex], 2, Clipping.DoNotClip, InworldTextRev.VisibleTo, neighborColor);
        }

        // WaitForClick();
        // foreach (Any icon in neighborIcons) {
        //     DestroyInWorldText(icon);
        // }
        iter++;
    }
}

void reconstructPath(in PfNode[] scores, ref Number current) {
    pfPath = [];
    while (current != -1) {
        pfPath += scores[current].nodeIndex;
        current = scores[current].parent;
        pfTick();

        // if (current != -1)
        //     CreateBeamEffect(AllPlayers(), BeamType.GoodBeam, pfLoadedMap.nodes[pathArray.Last], pfLoadedMap.nodes[current], Color.Rose, EffectRev.VisibleTo);
    }
    pfPath += [-1];

    // WaitForClick();
    // DestroyAllEffects();
}

void WaitForClick()
{
    WaitUntil(!IsButtonHeld(HostPlayer(), Button.PrimaryFire), 0.2);
    WaitUntil(IsButtonHeld(HostPlayer(), Button.PrimaryFire), 9999);
}