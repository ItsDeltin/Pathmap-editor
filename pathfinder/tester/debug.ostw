
import '../core.ostw';

settings {
    lobby {
        Max Team 1 Players: 1
        Max Team 2 Players: 0
    }
    heroes {
        General {
            Ability Cooldown Time: 0%
        }
    }
    extensions {
        Spawn More Dummy Bots
        Beam Effects
    }
    modes {
        General {
            Respawn Time Scalar: 0%
        }
    }
}

playervar DbgEvent[] dbgEvents = [];
struct DbgEvent { public String name; public Number timeStamp; }

Vector ray: RayCastHitPosition(EyePosition(HostPlayer()), EyePosition(HostPlayer()) + FacingDirectionOf(HostPlayer()) * 100, null, HostPlayer(), false);

rule: 'Debug▶ Host Control: [Interact] to create a dummy bot'
if (IsButtonHeld(HostPlayer(), Button.Interact))
{
    define dummy = CreateDummyBot(Hero.Ashe, Team.Team1, -1, ray);
    StartForcingDummyBotName(dummy, <'vivi #<0>', NumberOfPlayers(Team.Team1)>);
    DisableMovementCollisionWithPlayers(dummy);
}

rule: 'Debug▶ Host Control: [Crouch] to teleport dummies to self'
if (IsButtonHeld(HostPlayer(), Button.Crouch))
{
    Teleport(AllPlayers().FilteredArray(p => p.IsDummy()), HostPlayer());
}

rule: 'Debug▶ Dummy: Follow the host on [Melee]'
Event.OngoingPlayer
if (IsDummyBot())
if (IsButtonHeld(HostPlayer(), Button.Melee))
{
    pfDestination = ray;
}

rule: 'Debug▶ Host hud & control setup'
if (HasSpawned(HostPlayer()))
{
    DisallowButton(HostPlayer(), Button.PrimaryFire);
    DisallowButton(HostPlayer(), Button.SecondaryFire);
    DisallowButton(HostPlayer(), Button.Ultimate);
    DisallowButton(HostPlayer(), Button.Ability1);
    DisallowButton(HostPlayer(), Button.Ability2);
    DisallowButton(HostPlayer(), Button.Melee);
    DisallowButton(HostPlayer(), Button.Crouch);
}

Player lp: LocalPlayer();
playervar Player selectedPlayer;
playervar Boolean isSlow;
playervar Player[] lastSelected = [];
globalvar Boolean pathfinderEnabled;
playervar Number[] closestNodes;

rule: 'Debug▶ Create debugging entities'
{
    CreateHudText(AllPlayers(), Text: <'CAP: <0>, <1>, <2>\nPos: <5>\nTime: <3>\nOwner: <4>', ServerLoad(), ServerLoadAverage(), ServerLoadPeak(), TotalTimeElapsed(), pfExecOwner, PositionOf(HostPlayer())>, Location: Location.Left);

    # Name and common variables
    CreateHudText(
        lp.selectedPlayer ? lp : null,
        Header: lp.selectedPlayer,
        Text: $'pfIsPathfinding: {lp.selectedPlayer.pfIsPathfinding}
pfCurrentNodeIndex: {lp.selectedPlayer.pfCurrentNodeIndex}
pfActiveNode: {lp.selectedPlayer.pfActiveNode}
pfDestination: {lp.selectedPlayer.pfDestination}
pfIsStuck: {lp.selectedPlayer.pfIsStuck}
pfWalkingFromPosition: {lp.selectedPlayer.pfWalkingFromPosition}
pfWalkingToPosition: {lp.selectedPlayer.pfWalkingToPosition}
pfSavedTarget: {lp.selectedPlayer.pfSavedTarget}',
        SortOrder: 1,
        Reevaluation: HudTextRev.VisibleToAndString,
        Location: Location.Left);
    # Events
    for (Number i = 0; 10; 1) {
        CreateHudText(
            lp.selectedPlayer != null && lp.selectedPlayer.dbgEvents.Length > EvaluateOnce(i) ? lp : null,
            Text: lp.selectedPlayer.dbgEvents[EvaluateOnce(i)].name,
            Subheader: lp.selectedPlayer.dbgEvents[EvaluateOnce(i)].timeStamp,
            SubheaderColor: Color.Yellow,
            Reevaluation: HudTextRev.VisibleToAndString,
            Location: Location.Right,
            SortOrder: 150 - i);
    }
    # Path visual
    for (Number i = 0; 20; 1) {
        CreateIcon(
            lp.selectedPlayer != null && lp.selectedPlayer.pfPath.Length > EvaluateOnce(i) ? lp : null,
            lp.selectedPlayer.pfPath[EvaluateOnce(i)] == -1 ? lp.selectedPlayer.pfDestination : pfLoadedMap.nodes[lp.selectedPlayer.pfPath[EvaluateOnce(i)]],
            Icon.ArrowDown,
            IconRev.VisibleToPositionAndColor,
            lp.selectedPlayer.pfPath[EvaluateOnce(i)] == -1 ? Color.Red : EvaluateOnce(i) == 0 ? Color.Orange : Color.Yellow,
            false);
        CreateHudText(
            lp.selectedPlayer != null && lp.selectedPlayer.pfPath.Length > EvaluateOnce(i) ? lp : null,
            Text: lp.selectedPlayer.pfPath[EvaluateOnce(i)],
            SortOrder: i + 1,
            Reevaluation: HudTextRev.VisibleToAndString,
            Location: Location.Right
        );
    }

    # Nodes
    for (Number i = 0; 30; 1) {
        Number nodeIndex: lp.closestNodes[EvaluateOnce(i)];
        CreateInWorldText(
            lp,
            nodeIndex,
            pfLoadedMap.nodes[nodeIndex] + Up() * 1.5,
            3,
            Clipping.ClipAgainstSurfaces,
            InworldTextRev.VisibleToPositionStringAndColor,
            lp.selectedPlayer.pfStuckOnNode - 2 == nodeIndex ? Color.Red :
                lp.selectedPlayer.pfActiveNode == nodeIndex ? Color.Turquoise :  Color.White,
            Spectators.VisibleNever
        );
    }

    # Attributes
    CreateHudText(
            lp.selectedPlayer ? lp : null,
            Header: 'Attributes',
            HeaderColor: Color.SkyBlue,
            SortOrder: 100,
            Location: Location.Right,
            Reevaluation: HudTextRev.VisibleToAndString);
    for (Number i = 0; 5; 1) {
        CreateHudText(
            lp.selectedPlayer && lp.selectedPlayer.pfAttributes.Length > EvaluateOnce(i) ? lp : null,
            Text: lp.selectedPlayer.pfAttributes[EvaluateOnce(i)],
            SortOrder: 101 + i,
            Location: Location.Right,
            Reevaluation: HudTextRev.VisibleToAndString);
    }
    # Selected player
    CreateIcon(lp, lp.selectedPlayer, Icon.ArrowDown, IconRev.VisibleToPositionAndColor, Color.Green, true);

    CreateHudText(lp, Text:
        $'{InputBindingString(Button.PrimaryFire)}: Select bot
{InputBindingString(Button.Interact)}: Create bot
{InputBindingString(Button.Crouch)}: Teleport all bots to self
{InputBindingString(Button.Melee)}: Walk to host
{InputBindingString(Button.Ability2)}: Follow host
{InputBindingString(Button.SecondaryFire)}: Slow down time
{InputBindingString(Button.Ultimate)}: Clear pathfinding logs
{InputBindingString(Button.Reload)}: Toggle noclip
{InputBindingString(Button.Ability1)}: Noclip speed boost',
        Location: Location.Top,
        Reevaluation: HudTextRev.VisibleToSortOrderStringAndColor);
    
    // Cursor
    CreateEffect(lp, Effect.Sphere, Color.Orange, ray, .25, EffectRev.VisibleToPositionRadiusAndColor);

    CreateBeamEffect(
        lp,
        BeamType.TorbjornTurretSightBeam,
        lp.selectedPlayer.pfWalkingFromPosition + Up(),
        lp.selectedPlayer.pfWalkingToPosition + Up(),
        Team.Team1,
        EffectRev.VisibleToPositionRadiusAndColor);
    CreateBeamEffect(
        lp,
        BeamType.TorbjornTurretSightBeam,
        lp.selectedPlayer.pfSavedTarget + Up(),
        lp.selectedPlayer.pfDestination + Up(),
        Team.Team2,
        EffectRev.VisibleToPositionRadiusAndColor);
}

rule: 'Update closest nodes'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
{
    closestNodes = pfLoadedMap.nodes
        .Map((n, i) => i)
        .Sort(n => pfLoadedMap.nodes[n].DistanceTo(EventPlayer()))
        .Slice(0, 15);
    Wait(.5);
    LoopIfConditionIsTrue();
}

rule: 'Debug▶ Host Control: [Primary Fire] to inspect bot'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsButtonHeld(EventPlayer(), Button.PrimaryFire))
{
    if (selectedPlayer) {
        lastSelected += selectedPlayer;
    }

    # Get selected entity
    Player newSelect = AllPlayers().FilteredArray(p => p.IsDummy() &&
        p.Position().DistanceTo(EyePosition() + FacingDirectionOf() * EyePosition().DistanceTo(p.Position()))
            < 2
    ).SortedArray(p => lastSelected.IndexOf(p)).First;

    if (newSelect) {
        lastSelected.ModRemoveByValue(newSelect);

        if (selectedPlayer == newSelect) {
            selectedPlayer = null;
        } else {
            selectedPlayer = newSelect;
        }
    }
}

rule: 'Debug▶ Host Control: [Ultimate] to clear pf logs'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
{
    SmallMessage(AllPlayers(), 'PF logs cleared');
    AllPlayers().dbgEvents = [];
}

rule: 'Debug▶ Host Control: [Secondary Fire] to slow down'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
{
    if (!isSlow) {
        SmallMessage(AllPlayers(), 'Slowing down time');
        SetSlowMotion(0);
        isSlow = true;
    } else {
        SmallMessage(AllPlayers(), 'Speeding up time');
        SetSlowMotion(100);
        isSlow = false;
    }
}

rule: 'Debug▶ Host Control: [Ability 2] to toggle pathfinding'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsButtonHeld(EventPlayer(), Button.Ability2))
{
    pathfinderEnabled = !pathfinderEnabled;
    if (pathfinderEnabled) {
        SmallMessage(AllPlayers(), "Chasing host");
        ChaseVariableAtRate(AllPlayers().Filter(p => p.IsDummy()).pfDestination, ray, 100, RateChaseReevaluation.DestinationAndRate);
    } else {
        SmallMessage(AllPlayers(), "Stopped chasing host");
        StopChasingVariable(AllPlayers().pfDestination);
        AllPlayers().pfDestination = null;
    }
}

rule: 'Debug▶ Host Control: [Reload] to toggle noclip'
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsButtonHeld(EventPlayer(), Button.Reload))
{
    IsNoclipping = !IsNoclipping;
}

playervar Boolean IsNoclipping;

rule: "Debug▶ Noclipping: Start noclipping"
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsNoclipping)
{
    SetGravity(EventPlayer(), 0);
    DisableMovementCollisionWithEnvironment(EventPlayer(), true);
    DisableMovementCollisionWithPlayers(EventPlayer());
    SetMoveSpeed(EventPlayer(), 0);
    DisallowButton(EventPlayer(), Button.Jump);
    DisallowButton(EventPlayer(), Button.Crouch);
}

rule: "Debug▶ Noclipping: Stop noclipping"
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (!IsNoclipping)
{
    SetGravity(EventPlayer(), 100);
    EnableMovementCollisionWithEnvironment(EventPlayer());
    EnableMovementCollisionWithPlayers(EventPlayer());
    SetMoveSpeed(EventPlayer(), 100);
    AllowButton(EventPlayer(), Button.Jump);
    AllowButton(EventPlayer(), Button.Crouch);
}

rule: "Debug▶ Noclipping: Noclip propulsion"
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsNoclipping)
if ((IsButtonHeld(EventPlayer(), Button.Crouch) || IsButtonHeld(EventPlayer(), Button.Jump) || ThrottleOf(EventPlayer()) != Vector(0, 0, 0)) == true)
{
    ApplyImpulse(EventPlayer(), VelocityOf(EventPlayer()) * -1, SpeedOf(EventPlayer()) * 0.03, Relative.ToWorld, ContraryMotion.Incorporate);
    ApplyImpulse(EventPlayer(), Normalize(FacingDirectionOf(EventPlayer()) * ZOf(ThrottleOf(EventPlayer())) + WorldVectorOf(Left(), EventPlayer(), LocalVector.Rotation) * XOf(ThrottleOf(EventPlayer())) + Up() * (IsButtonHeld(EventPlayer(), Button.Jump) - IsButtonHeld(EventPlayer(), Button.Crouch))), (60 + 400 * IsButtonHeld(EventPlayer(), Button.Ability1) - SpeedOf(EventPlayer())) / 62.5, Relative.ToWorld, ContraryMotion.Incorporate);
    MinWait();
    LoopIfConditionIsTrue();
}

rule: "Debug▶ Noclipping: Noclip air resistance"
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsNoclipping)
if ((IsButtonHeld(EventPlayer(), Button.Crouch) || IsButtonHeld(EventPlayer(), Button.Jump) || ThrottleOf(EventPlayer()) != Vector(0, 0, 0)) == false)
if (SpeedOf(EventPlayer()) > 0.01)
{
    ApplyImpulse(EventPlayer(), VelocityOf(EventPlayer()) * -1, SpeedOf(EventPlayer()) * 0.06, Relative.ToWorld, ContraryMotion.Incorporate);
    MinWait();
    LoopIfConditionIsTrue();
}