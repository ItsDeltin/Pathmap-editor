import 'main.del';

globalvar Any[] controlTexts;
globalvar Number controlTextOrder = 1;
globalvar Number connectingFromNode = -1;
globalvar Boolean attributeMode;
globalvar Number attribute;
globalvar Any blueVisual!;
globalvar Any redVisual!;
globalvar Any attributeFloatText!;

rule: 'Editor: path mode'
if (!attributeMode)
{
    DestroyInWorldText(attributeFloatText);
    MakeVisualBeams(BeamType.TorbjornTurretSightBeam, SelectedSegment == -1);
}

rule: 'Editor: attribute mode'
if (attributeMode)
{
    MakeVisualBeams(BeamType.SymmetraTurretBeam, true);

    DestroyInWorldText(attributeFloatText);
    attributeFloatText = CreateInWorldText(
        VisibleTo: connectingFromNode != -1 && connectingFromNode != SelectedNodeIndex ? AllPlayers() : null,
        Header: " \n{0}".Format([attribute]),
        Position: Nodes[connectingFromNode].ShownPosition() + ((SelectedNodeID == -1 ? watchPoint : Nodes[SelectedNodeIndex].ShownPosition()) - Nodes[connectingFromNode].ShownPosition()) * 0.3,
        Scale: 2.5,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleToPositionStringAndColor,
        TextColor: SelectedNodeID == -1 ? Color.Red : Color.Blue
    );
}

void MakeVisualBeams(BeamType beamType, in Boolean visualCondition)
{
    DestroyEffect(blueVisual);
    DestroyEffect(redVisual);
    blueVisual = CreateBeamEffect(
        UpdateEveryFrame(visualCondition && connectingFromNode != -1 && SelectedNodeID != -1 ? AllPlayers() : null),
        beamType,
        Nodes[connectingFromNode].ShownPosition(),
        Nodes[SelectedNodeIndex].ShownPosition(),
        Color.Team1,
        EffectRev.VisibleToPositionRadiusAndColor);
    redVisual = CreateBeamEffect(
        UpdateEveryFrame(visualCondition && connectingFromNode != -1 && SelectedNodeID == -1 ? AllPlayers() : null),
        beamType,
        Nodes[connectingFromNode].ShownPosition(),
        UpdateEveryFrame(watchPoint),
        Color.Team2,
        EffectRev.VisibleToPositionRadiusAndColor);
}

rule: 'Editor: Place node'
if (button(Button.PrimaryFire))
if (SelectedNodeID == -1)
if (!host.cm_isInMenu)
{
    NodeUniqueID++;
    Number id = NodeUniqueID;
    Vector pos = watchPoint;

    Document({
        Set: () => {
            Nodes += { Node: {Position: pos, UniqueID: id}, Visibility: 0, Selected: false, BallEffect: null, RingEffect: null };
            UpdateNodeVisibility(Nodes.Length - 1);
        },
        Revert: () => {
            RemoveNodeByIndex(NodeIndexFromID(id));
        }
    });
}

rule: 'Editor: Select node'
if (button(Button.SecondaryFire))
if (SelectedNodeID != -1)
if (!host.cm_isInMenu)
{
    Nodes[SelectedNodeIndex].Selected = !Nodes[SelectedNodeIndex].Selected;
}

rule: 'Editor: Connect node'
if (button(Button.PrimaryFire))
if (SelectedNodeID != -1)
if (!host.cm_isInMenu)
{
    if (connectingFromNode == SelectedNodeIndex)
    {
        connectingFromNode = -1;
        return;
    }
    else if (connectingFromNode != -1)
    {
        // Segment mode
        if (!attributeMode)
        {
            // Delete segment
            if (SelectedSegment != -1)
            {
                WorldSegment segment = Segments[SelectedSegment];
                segment.Effect = null;

                Document({
                    Set: () => {
                        RemoveSegmentByIndex(SegmentIndexFromID(segment.ID));
                    },
                    Revert: () => {
                        Segments += segment;
                        UpdateSegmentVisibility(Segments.Length - 1);
                    }
                });
            }
            // Create segment
            else
            {
                SegmentUniqueID++;

                // Temp variables for local capture
                Number id! = SegmentUniqueID;
                Number from! = Nodes[connectingFromNode].Node.UniqueID;
                Number to! = Nodes[SelectedNodeIndex].Node.UniqueID;

                Document({
                    Set: () => {
                        Segments += { ID: id, Node1: from, Node2: to, Effect: null };
                        UpdateSegmentVisibility(Segments.Length - 1);
                    },
                    Revert: () => {
                        RemoveSegmentByIndex(SegmentIndexFromID(id));
                    }
                });
            }
        }
        // Attribute mode
        else
        {
            Number from! = Nodes[connectingFromNode].Node.UniqueID;
            Number to! = Nodes[SelectedNodeIndex].Node.UniqueID;

            // Find existing attribute.
            Number[] existingAttributeIndex = Attributes.Map((a, i) => i).FilteredArray(
                i => Attributes[i].Value == attribute && Attributes[i].Node1 == from && Attributes[i].Node2 == to
            );

            // Delete segment
            if (existingAttributeIndex)
            {
                Attribute deleting = Attributes[existingAttributeIndex.First];

                Document({
                    Set: () => {
                        RemoveAttributeByIndex(existingAttributeIndex.First);
                        UpdateAttributeVisibility();
                    },
                    Revert: () => {
                        Attributes += deleting;
                        UpdateAttributeVisibility();
                    }
                });
            }
            // Create segment
            else
            {
                AttributeUniqueID++;

                // Temp variables for local capture
                Number value! = attribute;
                Number id! = SegmentUniqueID;

                // Create attribute
                Document({
                    Set: () => {
                        Attributes += { Value: value, ID: id, Node1: from, Node2: to };
                        UpdateAttributeVisibility();
                    },
                    Revert: () => {
                        RemoveAttributeByIndex(AttributeIndexFromID(id));
                        UpdateAttributeVisibility();
                    }
                });
            }
        }
    }

    connectingFromNode = SelectedNodeIndex;
}

rule: 'Editor: Cancel link'
if (button(Button.SecondaryFire))
if (SelectedNodeID == -1)
if (connectingFromNode != -1)
if (!host.cm_isInMenu)
{
    connectingFromNode = -1;
}

rule: 'Editor: tutorial'
{
    CreateHudText(
        HostPlayer(),
        Location: Location.Right,
        Text: ' \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ',
        SortOrder: 0,
        Reevaluation: HudTextRev.VisibleTo
    );
    AddControlText(
        SelectedSegment != -1 ? 'Delete path' :
            connectingFromNode != -1 && SelectedNodeID != -1 ? (connectingFromNode == SelectedNodeIndex ? 'Cancel path' : 'Link path') :
            connectingFromNode == -1 && SelectedNodeID != -1 ? 'Create path' : 'Create node',
        Button.PrimaryFire
    );
    AddControlText(
        'Cancel path',
        Button.SecondaryFire,
        connectingFromNode != -1 && SelectedNodeID == -1
    );
}

void AddControlText(in String text, in Button button, in Boolean condition = true)
{
    controlTexts += CreateHudText(
        !host.cm_isInMenu && condition ? HostPlayer() : null,
        Location: Location.Right,
        Text: '{0}: {1}{2}{2}{2}{2}'
            .Format([text, InputBindingString(button), '                                                        ']),
        TextColor: CustomColor(255, 255, 255, 162.435),
        SortOrder: controlTextOrder,
        Reevaluation: HudTextRev.VisibleToStringAndColor
    );
    controlTextOrder++;
}

void DestroyControlTexts() 'Destroy control texts'
{
    while (controlTexts.Length)
    {
        DestroyHudText(controlTexts.First);
        controlTexts.ModRemoveByIndex(0);
    }
    controlTextOrder = 1;
}