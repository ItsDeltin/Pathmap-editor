import 'main.del';

struct Rule
{
    public RuleAction[] Actions;
    public Number ExecutesOnAttribute;
    public Number[] ActionOrder;
    public Boolean[] EnabledHeroes;
}

struct RuleAction
{
    public String Label;
    public Number ID;
    public () => void Executor;
}

globalvar Rule[] Rules = [];
globalvar Number rulePage!;
globalvar Any rulePageText!;
globalvar Any previousRuleText!;
globalvar Any nextRuleText!;
globalvar Any deleteActionText!;
globalvar NumberSelector ruleAttributeSelector!;
globalvar Number[] pagerButtons = [];
globalvar Scrollbar actionScrollBar!;
globalvar Scrollbar heroScrollBar!;
globalvar Number waitTime!;
globalvar Any waitTimeText!;
globalvar Boolean pagerInitialized!;
globalvar Boolean[] actionsSelected;
globalvar Number uniqueActionID!;

Color deleteActionEnabledColor: Color.Red;
Color deleteActionDisabledColor: CustomColor(252, 0, 0, 50.745000000000005);

Number actionIndexFromID(Number ruleIndex, Number id): Rules[ruleIndex].Actions.Map(action => action.ID).IndexOf(id);

void SetupRuleMenu() 'Setup rule menu'
{
    setMainLabel('main / rule editor');

    buttonCollectionMain += createButton(
        'Add rule',
        primaryAction: MenuAction.CreateRule,
        posY: 0.75,
        scale: 3
    );

    if (Rules.Length)
        initiatePager();
}

// When a new rule is selected, this updates the content.
void updateRuleContent() 'CM: Update rule content'
{
    SetLabel(rulePageText, 'rule ' + (rulePage + 1));
    
    SetInteractability(previousRuleText, rulePage != 0);
    SetColor(previousRuleText, rulePage != 0 ? Color.White : Color.Gray);

    SetInteractability(nextRuleText, rulePage < Rules.Length - 1);
    SetColor(nextRuleText, rulePage < Rules.Length - 1 ? Color.White : Color.Gray);

    RefreshActionList();

    // Update the attribute label.
    if (ruleAttributeSelector != null)
        ruleAttributeSelector.Set(Rules[rulePage].ExecutesOnAttribute);

    updateAllHeroIcons();
}

void updateAllHeroIcons() 'CM: Update all hero icons'
{
    // Update the hero selector
    for (waitlessI = 0; AllHeroes().Length; 1)
        updateHeroIcon(waitlessI);
}

void initiatePager() 'CM: Initiate pager'
{
    if (pagerInitialized) return;
    pagerInitialized = true;

    previousRuleText = createButton(
        '←',
        primaryAction: MenuAction.RulePrevious,
        posY: 0.55,
        posX: -0.35,
        scale: 4
    );
    nextRuleText = createButton(
        '→',
        primaryAction: MenuAction.RuleNext,
        posY: 0.55,
        posX: 0.35,
        scale: 4
    );
    pagerButtons += createButton(
        'add action...',
        primaryAction: MenuAction.AddAction,
        posY: 0.8,
        posX: -2,
        scale: 2
    );
    pagerButtons += createButton(
        'executes on attribute',
        posY: 0.3,
        scale: 1.75
    );
    ruleAttributeSelector = new NumberSelector(Rules[rulePage].ExecutesOnAttribute, 0, 0.175, true, value => Rules[rulePage].ExecutesOnAttribute = value);
    deleteActionText = createButton(
        'delete action',
        primaryAction: MenuAction.DeleteAction,
        posY: 0.4,
        posX: -0.725,
        scale: 2,
        defaultColor: deleteActionDisabledColor,
        interactable: false
    );
    rulePageText = createButton(
        'rule 1',
        posY: 0.55,
        scale: 3,
        interactable: false
    );

    heroScrollBar = new Scrollbar(
        1.75,
        0.5,
        AllHeroes().Map((hero, i) => '{0} {1}'.Format([HeroIconString(hero), Rules[rulePage].EnabledHeroes[i] ? 'yes' : 'no'])),
        6,
        toggleHero => {
            Rules[rulePage].EnabledHeroes[toggleHero] = !Rules[rulePage].EnabledHeroes[toggleHero];
            updateHeroIcon(toggleHero);
        }
    );
    pagerButtons += createButton(
        'toggle all',
        posX: 1.75,
        posY: 0.7,
        scale: 1.75,
        primaryAction: MenuAction.ToggleAll
    );

    pagerButtons += [previousRuleText, nextRuleText, deleteActionText, rulePageText];
    buttonCollectionMain += pagerButtons;
    updateRuleContent();
}

void loadActionScrollbar() '(Subroutine) CM: Load action scrollbar'
{
    actionScrollBar = new Scrollbar(
        -1.75,
        0.5,
        Rules[rulePage].ActionOrder.Map(actionID => Rules[rulePage].Actions[Rules[rulePage].Actions.Map(action => action.ID).IndexOf(actionID)].Label),
        6,
        item => {
            actionsSelected[item] = !actionsSelected[item];
            actionScrollBar.SetButtonColor(item, actionsSelected[item] ? Color.Green : Color.White);
        });
}

void updateHeroIcon(in Number index)
{
    // Update button color
    heroScrollBar.SetButtonColor(index, Rules[rulePage].EnabledHeroes[index] ? Color.Green : Color.Red);
    // Update button label
    heroScrollBar.SetButtonLabel(
        index,
        '{0} {1}'.Format([
            HeroIconString(AllHeroes()[index]),
            Rules[rulePage].EnabledHeroes[index] ? 'yes' : 'no'
        ])
    );
}

rule: 'CM: Enable delete action button'
Event.OngoingPlayer
if (menuState == MenuState.Rules)
if (pagerInitialized)
if (actionsSelected.IsTrueForAny(action => action))
{
    SetInteractability(deleteActionText, true);
    SetColor(deleteActionText, deleteActionEnabledColor);
}

rule: 'CM: Disable delete action button'
Event.OngoingPlayer
if (menuState == MenuState.Rules)
if (pagerInitialized)
if (actionsSelected.IsTrueForAll(action => !action))
{
    SetInteractability(deleteActionText, false);
    SetColor(deleteActionText, deleteActionDisabledColor);
}

rule: 'CM: Enter rule menu'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.RuleMenu)
{
    SetMenuState(MenuState.Rules);
}

rule: 'CM: Add action'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.AddAction)
{
    SetMenuState(MenuState.AddAction);
    actionScrollBar = new Scrollbar(0, 0.75, [
        'wait...',
        'jump',
        'start holding jump',
        'stop holding jump',
        'ability 1',
        'ability 2',
        'stop walking',
        'walk to destination',
        'look at floor',
        'look at destination'
    ], 9, item => {
        DestroyScrollbar();

        // Wait length
        if (item == 0)
        {
            SetMenuState(MenuState.ChooseWaitLength);
            waitTime = 0.016;
            waitTimeText = createButton('wait time: ' + waitTime + ' seconds', scale: 1.5, defaultColor: Color.Yellow, interactable: false);
            
            buttonCollectionMain += createButton('←', primaryAction: MenuAction.WaitTimeDown, secondaryAction: MenuAction.WaitTimeDownBig, posX: -0.6, scale: 4);
            buttonCollectionMain += createButton('→', primaryAction: MenuAction.WaitTimeUp, secondaryAction: MenuAction.WaitTimeUpBig, posX: 0.6, scale: 4);
            buttonCollectionMain += createButton('Add action', primaryAction: MenuAction.WaitConfirm, posY: -0.15, scale: 2, defaultColor: Color.Green);
            buttonCollectionMain += waitTimeText;
        }
        else
        {
            uniqueActionID++;
            Number id! = uniqueActionID;
            RuleAction createdAction!;

            if (item == 1)
                createdAction = {Label: 'jump', ID: id, Executor: () => PressButton(eventPlayer, Button.Jump)};
            else if (item == 2)
                createdAction = {Label: 'start holding jump', ID: id, Executor: () => StartHoldingButton(eventPlayer, Button.Jump)};
            else if (item == 3)
                createdAction = {Label: 'stop holding jump', ID: id, Executor: () => StopHoldingButton(eventPlayer, Button.Jump)};
            else if (item == 4)
                createdAction = {Label: 'ability 1', ID: id, Executor: () => PressButton(eventPlayer, Button.Ability1)};
            else if (item == 5)
                createdAction = {Label: 'ability 2', ID: id, Executor: () => PressButton(eventPlayer, Button.Ability2)};
            else if (item == 6)
                createdAction = {Label: 'stop walking', ID: id, Executor: () => StopThrottleInDirection(eventPlayer)};
            else if (item == 7)
                createdAction = {Label: 'walk to destination', ID: id, Executor: () => WalkToDestination()}; //TODO: WalkToDestination directly
            else if (item == 8)
                createdAction = {Label: 'look at floor', ID: id, Executor: () => StartFacing(
                    eventPlayer,
                    DirectionFromAngles(HorizontalFacingAngleOf(eventPlayer), -89),
                    100,
                    Relative.ToWorld,
                    FacingRev.None
                )};
            else if (item == 9)
                createdAction = {Label: 'look at destination', ID: id, Executor: () => StartFacing(
                    eventPlayer,
                    EyePosition().DirectionTowards(walkingTo + Up() * 1.75),
                    100,
                    Relative.ToWorld,
                    FacingRev.DirectionAndTurnRate
                )};
            
            DocumentAction(id, createdAction);
            SetMenuState(MenuState.Rules);
        }
    });
}

rule: 'CM: Delete action'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.DeleteAction)
{
    RuleAction[] deleting! = [];
    Number[] originalIndices! = [];

    for (waitlessI = 0; actionsSelected.Length; 1)
        if (actionsSelected[waitlessI])
        {
            deleting += Rules[rulePage].Actions[waitlessI];
            originalIndices += waitlessI;
        }
    
    actionsSelected = [];
    
    Number ruleIndex! = rulePage;
    
    Document({
        Set: () => {
            for (waitlessI = 0; deleting.Length; 1)
            {
                Number index! = actionIndexFromID(ruleIndex, deleting[waitlessI].ID);

                Rules[ruleIndex].ActionOrder -= deleting[waitlessI].ID;
                Rules[ruleIndex].Actions.ModRemoveByIndex(index);

                if (menuState == MenuState.Rules && actionScrollBar)
                    actionScrollBar.Remove(index);
            }
        },
        Revert: () => {
            for (waitlessI = 0; deleting.Length; 1)
            {
                Rules[ruleIndex].Actions += [deleting[waitlessI]];
                Rules[ruleIndex].ActionOrder = Rules[ruleIndex].ActionOrder
                    .Slice(0, originalIndices[waitlessI])
                    .Append(deleting[waitlessI].ID)
                    .Append(Rules[ruleIndex].ActionOrder.Slice(originalIndices[waitlessI], 9999));

                if (menuState == MenuState.Rules && actionScrollBar)
                    actionScrollBar.Insert(originalIndices[waitlessI], deleting[waitlessI].Label);
            }
        }
    });
}

rule: 'CM: Next rule'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.RuleNext)
{
    rulePage++;
    updateRuleContent();
}

rule: 'CM: Previous rule'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.RulePrevious)
{
    rulePage--;
    updateRuleContent();
}

rule: 'CM: Create rule'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.CreateRule)
{
    rulePage = Rules.Length;

    // todo: should not be surrounded in []
    Rules.ModAppend([{ Actions: [], ActionOrder: [], ExecutesOnAttribute: 0, EnabledHeroes: AllHeroes().Map(hero => true) }]);

    initiatePager();
    updateRuleContent();
}

rule: 'CM: Wait time'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.WaitTimeDown || cm_currActionID == MenuAction.WaitTimeUp || cm_currActionID == MenuAction.WaitTimeDownBig || cm_currActionID == MenuAction.WaitTimeUpBig)
{
    if (cm_currActionID == MenuAction.WaitTimeDown)
        waitTime -= 0.016;
    else if (cm_currActionID == MenuAction.WaitTimeUp)
        waitTime += 0.016;
    else if (cm_currActionID == MenuAction.WaitTimeDownBig)
        waitTime -= 0.5;
    else if (cm_currActionID == MenuAction.WaitTimeUpBig)
        waitTime += 0.5;
    
    ModifyVariable(waitTime, Operation.Max, 0.016);
    SetLabel(waitTimeText, 'wait time: ' + waitTime + ' seconds');
}

rule: 'CM: Wait confirm'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.WaitConfirm)
{
    uniqueActionID++;
    Number id! = uniqueActionID;
    Number wait! = waitTime;
    DocumentAction(id, { Label: 'wait ' + wait, ID: id, Executor: () => Wait(wait) });
    SetMenuState(MenuState.Rules);
}

rule: 'CM: Toggle all'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.ToggleAll)
{
    Boolean setTo! = Rules[rulePage].EnabledHeroes.IsTrueForAny(hero => !hero);
    Rules[rulePage].EnabledHeroes = AllHeroes().Map(_ => setTo);
    updateAllHeroIcons();
}

rule: 'CM: Exit rule menu'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.Back)
if (menuState == MenuState.Rules)
{
    SetMenuState(MenuState.Main);
}

rule: 'CM: Exit action menu'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.Back)
if (menuState == MenuState.AddAction)
{
    DestroyScrollbar();
    SetMenuState(MenuState.Rules);
}

void DocumentAction(in Number actionID, in RuleAction createdAction)
{
    Number ruleIndex! = rulePage;
    Document({
        Set: () => {
            Rules[ruleIndex].ActionOrder += actionID;
            Rules[ruleIndex].Actions += [createdAction];
            // RefreshActionList();
            if (menuState == MenuState.Rules && actionScrollBar)
                actionScrollBar.Add(createdAction.Label);
        },
        Revert: () => {
            Number i! = Rules[ruleIndex].ActionOrder.IndexOf(actionID);

            Rules[ruleIndex].ActionOrder -= actionID;
            Rules[ruleIndex].Actions.ModRemoveByIndex(i);
            // RefreshActionList();
            if (menuState == MenuState.Rules && actionScrollBar)
                actionScrollBar.Remove(i);
        }
    });
}

void RefreshActionList()
{
    if (menuState == MenuState.Rules)
    {
        DestroyScrollbar();
        loadActionScrollbar();
    }
}

void DestroyPager()
{
    destroyButtonCollection(pagerButtons);
    pagerInitialized = false;
    
    DestroyScrollbar();
    if (ruleAttributeSelector != null)
    {
        ruleAttributeSelector.Dispose();
        ruleAttributeSelector = null;
    }

    heroScrollBar.Dispose();
    heroScrollBar = null;
}

void DestroyScrollbar()
{
    if (actionScrollBar)
    {
        actionScrollBar.Dispose();
        actionScrollBar = null;
    }
}