import 'main.del';
import 'cursor menu adapter.del';

playervar MenuState menuState!;
playervar Number freecamSwitchID!;
playervar Number linkModeID!;
playervar Number attributeDecrementID!;
playervar Number attributeTextID!;
playervar Number attributeIncrementID!;
playervar Number mainText!;

playervar Number[] buttonCollectionMain = [];

enum MenuAction
{
    Back = 1,
    FreecamIncrement = 2,
    FreecamDecrement = 3,
    Undo = 4,
    Redo = 5,
    LinkMode = 6,
    AttributeIncrement = 7,
    AttributeIncrementBig = 8,
    AttributeDecrement = 9,
    AttributeDecrementBig = 10,
    AddDummy = 11,
    ChooseHero = 12,
    RuleMenu = 13,
    RuleNext = 14,
    RulePrevious = 15,
    CreateRule = 16,
    AddAction = 17,
    ScrollbarUp = 18,
    ScrollbarDown = 19,
    ScrollbarItem = 20,
    WaitTimeUp = 21,
    WaitTimeDown = 22,
    WaitTimeUpBig = 23,
    WaitTimeDownBig = 24,
    WaitConfirm = 25,
    DeleteAction = 26
}

enum MenuState
{
    None,
    Main,
    ChooseHero,
    Rules,
    AddAction,
    ChooseWaitLength
}

rule: 'CM: Make buttons: Main'
Event.OngoingPlayer
if (eventPlayer == host)
{
    SetMenuState(MenuState.Main);

    mainText = createButton(
        'main',
        scale: 2,
        posX: 0,
        posY: 1,
        defaultColor: Color.Yellow,
        interactable: false);
    createButton(
        'back',
        primaryAction: MenuAction.Back,
        scale: 2,
        posX: -2,
        posY: 1,
        defaultColor: Color.Red);
}

void SetMenuState(MenuState newState) '(Subroutine) CM: Update menu'
{
    if (newState == menuState) return;

    // Cleanup
    destroyButtonCollection(buttonCollectionMain);

    if (menuState == MenuState.Rules)
    {
        destroyButtonCollection(pagerButtons);
        pagerInitialized = false;
        actionScrollBar.Dispose();
    }
        
    menuState = newState;
    
    // Setup
    if (newState == MenuState.Main)
    {
        buttonCollectionMain += createButton(
            '← undo',
            primaryAction: MenuAction.Undo,
            scale: 2,
            posX: -2.1,
            posY: -1,
            clickWidth: 0.4,
            clickHeight: 0.3,
            defaultColor: Color.Yellow,
            hoverColor: Color.Orange);
        buttonCollectionMain += createButton(
            'redo →',
            primaryAction: MenuAction.Redo,
            scale: 2,
            posX: -1.6,
            posY: -1,
            clickWidth: 0.4,
            clickHeight: 0.3,
            defaultColor: Color.Aqua,
            hoverColor: Color.SkyBlue);
        
        buttonCollectionMain += createButton(
            'add dummy bot',
            primaryAction: MenuAction.AddDummy,
            scale: 2.5,
            posX: 1.7,
            posY: 0.6,
            defaultColor: Color.White);
        
        buttonCollectionMain += createButton(
            'Rule editor',
            primaryAction: MenuAction.RuleMenu,
            scale: 2.5,
            posX: 1.7,
            posY: 0.45,
            defaultColor: Color.White);
        
        freecamSwitchID = createButton(
            'freecam: off',
            primaryAction: MenuAction.FreecamIncrement,
            secondaryAction: MenuAction.FreecamDecrement,
            scale: 2.5,
            posX: -1.7,
            posY: 0.6,
            defaultColor: Color.White);
        
        linkModeID = createButton(
            'Node link mode (segment)',
            primaryAction: MenuAction.LinkMode,
            scale: 2.5,
            posY: 0.7);
        
        attributeIncrementID = createButton(
            '→',
            primaryAction: MenuAction.AttributeIncrement,
            secondaryAction: MenuAction.AttributeIncrementBig,
            scale: 4,
            posY: 0.5,
            posX: 0.1775,
            visible: false);
        attributeDecrementID = createButton(
            '←',
            primaryAction: MenuAction.AttributeDecrement,
            secondaryAction: MenuAction.AttributeDecrementBig,
            scale: 4,
            posY: 0.5,
            posX: -0.1775,
            visible: false,
            useDefaultFont: false);
        attributeTextID = createButton(
            '0',
            scale: 2.5,
            posY: 0.5,
            defaultColor: Color.Yellow,
            interactable: false,
            visible: false);
        
        buttonCollectionMain += [freecamSwitchID, linkModeID, attributeIncrementID, attributeDecrementID, attributeTextID];
    }
    else if (newState == MenuState.Rules)
        SetupRuleMenu();
}

rule: 'CM: Freecam increment'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.FreecamIncrement)
{
    cameraMode++;
    if (cameraMode == 3) cameraMode = 0;
    updateFreecamLabel();
}

rule: 'CM: Freecam decrement'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.FreecamDecrement)
{
    cameraMode--;
    if (cameraMode == -1) cameraMode = 2;
    updateFreecamLabel();
}

rule: 'CM: Undo'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.Undo)
if (CanUndo)
{
    Undo();
}

rule: 'CM: Redo'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.Redo)
if (CanRedo)
{
    Redo();
}

rule: 'CM: Change link mode'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.LinkMode)
{
    attributeMode = !attributeMode;
    SetLabel(linkModeID, !attributeMode ? 'Node link mode (segment)' : 'Node link mode (attribute)');
    SetVisible(attributeDecrementID, attributeMode);
    SetVisible(attributeTextID, attributeMode);
    SetVisible(attributeIncrementID, attributeMode);
}

rule: 'CM: Attribute change'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.AttributeIncrement ||
    cm_currActionID == MenuAction.AttributeIncrementBig ||
    cm_currActionID == MenuAction.AttributeDecrement ||
    cm_currActionID == MenuAction.AttributeDecrementBig)
{
    if (cm_currActionID == MenuAction.AttributeIncrement)
        attribute++;
    else if (cm_currActionID == MenuAction.AttributeIncrementBig)
        attribute += 5;
    else if (cm_currActionID == MenuAction.AttributeDecrement)
        attribute--;
    else if (cm_currActionID == MenuAction.AttributeDecrementBig)
        attribute -= 5;

    SetLabel(attributeTextID, <String>attribute);
}

rule: 'CM: Add dummy'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.AddDummy)
{
    chooseHeroMenu(hero => {
        editorState = EditorState.PlaceDummy;
        placingDummyHero = hero;
    });
}

void updateFreecamLabel() '(Subroutine) CM: Update freecam label'
{
    SetLabel(freecamSwitchID, ['freecam: off', 'freecam: on', 'freecam: gimbal'][cameraMode]);
}

void destroyButtonCollection(ref Number[] buttonCollection)
{
    while (buttonCollection.Length)
    {
        DestroyButton(buttonCollection.First);
        buttonCollection.ModRemoveByIndex(0);
    }
}

void setMainLabel(String label) '(Subroutine) CM: Set main label'
{
    SetLabel(mainText, label);
}

globalvar Hero => void chooseHeroCallback;
globalvar Number[] buttonCollectionHeroes! = [];

void chooseHeroMenu(Hero => void callback) '(Subroutine) CM: Choose hero'
{
    SetMenuState(MenuState.ChooseHero);
    chooseHeroCallback = callback;

    for (define i = 0; AllHeroes().Length; 1)
        buttonCollectionHeroes += createButton(
            label: HeroIconString(AllHeroes()[i]),
            primaryAction: [MenuAction.ChooseHero, AllHeroes()[i]],
            posX: -2 + (i % 13) / 3,
            posY: 0.5 - (i / 13 ~ Floor()) / 2,
            scale: 5
        );
}

rule: 'CM: Hero ready'
Event.OngoingPlayer
if (cm_currActionID[0] == MenuAction.ChooseHero)
{
    destroyButtonCollection(buttonCollectionHeroes);
    chooseHeroCallback(cm_currActionID[1]);
    SetMenuState(MenuState.Main);
}
