import 'main.del';

playervar MenuState menuState!;
playervar Number freecamSwitchID!;
playervar Number linkModeID!;
playervar NumberSelector attributeSelector!;
playervar Number mainText!;
globalvar Number undoText! = -1;
globalvar Number redoText! = -1;

playervar Number[] buttonCollectionMain = [];

enum MenuAction
{
    Back = 1,
    FreecamIncrement = 2,
    FreecamDecrement = 3,
    Undo = 4,
    Redo = 5,
    LinkMode = 6,
    AttributeIncrement = 7,
    AttributeIncrementBig = 8,
    AttributeDecrement = 9,
    AttributeDecrementBig = 10,
    AddDummy = 11,
    ChooseHero = 12,
    RuleMenu = 13,
    RuleNext = 14,
    RulePrevious = 15,
    CreateRule = 16,
    AddAction = 17,
    ScrollbarUp = 18,
    ScrollbarDown = 19,
    ScrollbarItem = 20,
    WaitTimeUp = 21,
    WaitTimeDown = 22,
    WaitTimeUpBig = 23,
    WaitTimeDownBig = 24,
    WaitConfirm = 25,
    DeleteAction = 26,
    PathfinderSettings = 27,
    AddOrRemovePathfindingAttribute = 28,
    ToggleAll = 29,
    Guide = 30,
    Export = 31,
    ExportWorkshop = 32,
    ExportOstw = 33,
    ExportOverpy = 34,
    FuncPrimary = 35,
    FuncSecondary = 36
}

enum MenuState
{
    None,
    Main,
    ChooseHero,
    Rules,
    AddAction,
    ChooseWaitLength,
    PathfinderSettings,
    Guide,
    Export
}

rule: 'CM: Make buttons: Main'
Event.OngoingPlayer
if (eventPlayer == host)
{
    SetMenuState(MenuState.Main);

    mainText = createButton(
        'main',
        scale: 2,
        posX: 0,
        posY: 1,
        defaultColor: Color.Gray,
        interactable: false);
    createButton(
        'back',
        primaryAction: MenuAction.Back,
        scale: 2,
        posX: -2,
        posY: 1,
        clickWidth: 0.4,
        defaultColor: Color.Red);
}

void SetMenuState(MenuState newState) '(Subroutine) CM: Update menu'
{
    if (newState == menuState) return;

    // Cleanup
    if (attributeSelector)
    {
        attributeSelector.Dispose();
        attributeSelector = null;
    }

    destroyButtonCollection(buttonCollectionMain);

    if (menuState == MenuState.Rules)
        DestroyPager();
        
    menuState = newState;
    
    // Setup
    if (newState == MenuState.Main)
    {
        buttonCollectionMain += createButton(
            'add dummy bot',
            primaryAction: MenuAction.AddDummy,
            scale: 2.5,
            posX: 1.7,
            posY: -0.6,
            clickWidth: 1.2,
            defaultColor: Color.White);
        
        buttonCollectionMain += createButton(
            'Rule editor',
            primaryAction: MenuAction.RuleMenu,
            scale: 2.5,
            posX: 1.7,
            posY: 0.4,
            clickWidth: 0.8,
            defaultColor: Color.White);
        
        buttonCollectionMain += createButton(
            'pathfinder settings',
            primaryAction: MenuAction.PathfinderSettings,
            scale: 2.5,
            posX: 1.7,
            posY: 0.2,
            clickWidth: 1.4,
            defaultColor: Color.White);

        buttonCollectionMain += createButton(
            'Guide',
            primaryAction: MenuAction.Guide,
            scale: 2.5,
            clickWidth: 0.4,
            posX: 1.7,
            posY: 0,
            defaultColor: Color.White);

        buttonCollectionMain += createButton(
            'Export',
            primaryAction: MenuAction.Export,
            scale: 2.5,
            clickWidth: 0.4,
            posX: 0,
            posY: -1.,
            defaultColor: Color.White);
        
        freecamSwitchID = createButton(
            'noclip: off',
            primaryAction: MenuAction.FreecamIncrement,
            secondaryAction: MenuAction.FreecamDecrement,
            scale: 2.5,
            posX: -1.7,
            posY: 0.6,
            clickWidth: 1.0,
            defaultColor: Color.White);
        
        linkModeID = createButton(
            'Node link mode (segment)',
            clickWidth: 1.7,
            primaryAction: MenuAction.LinkMode,
            scale: 2.5,
            posY: 0.7);
        
        updateFreecamLabel();
        
        attributeSelector = new NumberSelector(attribute, 0, 0.5, false, value => attribute = value);
        buttonCollectionMain += [freecamSwitchID, linkModeID];
    }
    else if (newState == MenuState.Rules)
        SetupRuleMenu();
    else if (newState == MenuState.Export)
        ExportMenu();
}

rule: 'CM: Freecam increment'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.FreecamIncrement)
{
    IsNoclipping = !IsNoclipping;
    updateFreecamLabel();
}

rule: 'CM: Undo'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.Undo)
if (CanUndo)
{
    Undo();
}

rule: 'CM: Redo'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.Redo)
if (CanRedo)
{
    Redo();
}

rule: 'CM: Enable undo menu'
Event.OngoingPlayer
if (menuState == MenuState.Main || menuState == MenuState.Rules)
{
    undoText = createButton(
        '← undo',
        primaryAction: MenuAction.Undo,
        scale: 2,
        posX: -2.1,
        posY: -1,
        clickWidth: 0.4,
        clickHeight: 0.3,
        defaultColor: Color.Yellow);
    redoText = createButton(
        'redo →',
        primaryAction: MenuAction.Redo,
        scale: 2,
        posX: -1.5,
        posY: -1,
        clickWidth: 0.4,
        clickHeight: 0.3,
        defaultColor: Color.Aqua);
    UpdateUndoInteractability();
}

rule: 'CM: Disable undo menu'
Event.OngoingPlayer
if (menuState != MenuState.Main && menuState != MenuState.Rules)
if (undoText != -1)
{
    DestroyButton(undoText);
    DestroyButton(redoText);
    undoText = -1;
    redoText = -1;
}

void UpdateUndoInteractability() globalvar 'CM: Update undo interactability'
{
    if (undoText != -1)
    {
        SetInteractabilityAndColor(undoText, CanUndo, CanUndo ? Color.Aqua : Color.Gray, HostPlayer());
        SetInteractabilityAndColor(redoText, CanRedo, CanRedo ? Color.Yellow : Color.Gray, HostPlayer());
    }
}

rule: 'CM: Change link mode'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.LinkMode)
{
    attributeMode = !attributeMode;
    SetLabel(linkModeID, !attributeMode ? 'Node link mode (segment)' : 'Node link mode (attribute)');
    if (attributeSelector)
        attributeSelector.SetVisible(attributeMode);
}

rule: 'CM: Add dummy'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.AddDummy)
{
    chooseHeroMenu(hero => {
        editorState = EditorState.PlaceDummy;
        placingDummyHero = hero;
    });
}

void updateFreecamLabel() '(Subroutine) CM: Update freecam label'
{
    SetLabel(freecamSwitchID, IsNoclipping ? 'noclip: on' : 'noclip: off');
}

void destroyButtonCollection(ref Number[] buttonCollection)
{
    while (buttonCollection.Length)
    {
        DestroyButton(buttonCollection.First);
        buttonCollection.ModRemoveByIndex(0);
    }
}

void setMainLabel(String label) '(Subroutine) CM: Set main label'
{
    SetLabel(mainText, label);
}

globalvar Hero => void chooseHeroCallback!;
globalvar Number[] buttonCollectionHeroes! = [];

void chooseHeroMenu(Hero => void callback) playervar '(Subroutine) CM: Choose hero'
{
    SetMenuState(MenuState.ChooseHero);

    for (Number i = 0; AllHeroes().Length; 1)
    {
        buttonCollectionHeroes += createButton(
            label: HeroIconString(AllHeroes()[i]),
            primaryAction: [MenuAction.ChooseHero, AllHeroes()[i]],
            posX: -2 + (i % 13) / 3,
            posY: 0.5 - (i / 13 ~ Floor()) / 2,
            scale: 5
        );
    }

    chooseHeroCallback = callback;
}

rule: 'CM: Hero ready'
Event.OngoingPlayer
if (cm_currActionID[0] == MenuAction.ChooseHero)
if (chooseHeroCallback)
{
    destroyButtonCollection(buttonCollectionHeroes);
    chooseHeroCallback(cm_currActionID[1]);
    SetMenuState(MenuState.Main);
    chooseHeroCallback = null;
    cm_isInMenu = false;
    releasePrimary = true;
}
